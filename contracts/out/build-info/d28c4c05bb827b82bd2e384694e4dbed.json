{"id":"d28c4c05bb827b82bd2e384694e4dbed","source_id_to_path":{"0":"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationBase.sol","1":"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol","2":"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","3":"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol","4":"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol","5":"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol","6":"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","7":"lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol","8":"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol","9":"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol","10":"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol","11":"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol","12":"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol","13":"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol","14":"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol","15":"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol","16":"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol","17":"lib/devtools/packages/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol","18":"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol","19":"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol","20":"lib/devtools/packages/oapp-evm/contracts/precrime/libs/Packet.sol","21":"lib/devtools/packages/oft-evm/contracts/OFT.sol","22":"lib/devtools/packages/oft-evm/contracts/OFTCore.sol","23":"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol","24":"lib/devtools/packages/oft-evm/contracts/libs/OFTComposeMsgCodec.sol","25":"lib/devtools/packages/oft-evm/contracts/libs/OFTMsgCodec.sol","26":"lib/forge-std/src/Base.sol","27":"lib/forge-std/src/Script.sol","28":"lib/forge-std/src/StdAssertions.sol","29":"lib/forge-std/src/StdChains.sol","30":"lib/forge-std/src/StdCheats.sol","31":"lib/forge-std/src/StdError.sol","32":"lib/forge-std/src/StdInvariant.sol","33":"lib/forge-std/src/StdJson.sol","34":"lib/forge-std/src/StdMath.sol","35":"lib/forge-std/src/StdStorage.sol","36":"lib/forge-std/src/StdStyle.sol","37":"lib/forge-std/src/StdToml.sol","38":"lib/forge-std/src/StdUtils.sol","39":"lib/forge-std/src/Test.sol","40":"lib/forge-std/src/Vm.sol","41":"lib/forge-std/src/console.sol","42":"lib/forge-std/src/console2.sol","43":"lib/forge-std/src/interfaces/IERC165.sol","44":"lib/forge-std/src/interfaces/IERC20.sol","45":"lib/forge-std/src/interfaces/IERC721.sol","46":"lib/forge-std/src/interfaces/IMulticall3.sol","47":"lib/forge-std/src/mocks/MockERC20.sol","48":"lib/forge-std/src/mocks/MockERC721.sol","49":"lib/forge-std/src/safeconsole.sol","50":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol","51":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol","52":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLib.sol","53":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol","54":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol","55":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol","56":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol","57":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ISendLib.sol","58":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/AddressCast.sol","59":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol","60":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/ExecutorOptions.sol","61":"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/PacketV1Codec.sol","62":"lib/openzeppelin-contracts/contracts/access/AccessControl.sol","63":"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol","64":"lib/openzeppelin-contracts/contracts/access/Ownable.sol","65":"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol","66":"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol","67":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","68":"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol","69":"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol","70":"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol","71":"lib/openzeppelin-contracts/contracts/utils/Address.sol","72":"lib/openzeppelin-contracts/contracts/utils/Context.sol","73":"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol","74":"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol","75":"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","76":"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol","77":"lib/solidity-bytes-utils/contracts/BytesLib.sol","78":"script/DeployHomeChain.s.sol","79":"script/HelperConfig.s.sol","80":"src/AccessManager.sol","81":"src/CollateralSafekeep.sol","82":"src/Libraries/OptionsBuilder.sol","83":"src/PriceFeed.sol","84":"src/Rupio.sol","85":"src/RupioSavingsContract.sol","86":"src/libraries/OracleLib.sol","87":"src/priceFeed.sol"},"language":"Solidity","_format":"ethers-rs-sol-build-info-1","input":{"version":"0.8.26","language":"Solidity","sources":{"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppSender, MessagingFee, MessagingReceipt } from \"./OAppSender.sol\";\n// @dev Import the 'Origin' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppReceiver, Origin } from \"./OAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OApp\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\n */\nabstract contract OApp is OAppSender, OAppReceiver {\n    /**\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol implementation.\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\n     */\n    function oAppVersion()\n        public\n        pure\n        virtual\n        override(OAppSender, OAppReceiver)\n        returns (uint64 senderVersion, uint64 receiverVersion)\n    {\n        return (SENDER_VERSION, RECEIVER_VERSION);\n    }\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppCore, ILayerZeroEndpointV2 } from \"./interfaces/IOAppCore.sol\";\n\n/**\n * @title OAppCore\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\n */\nabstract contract OAppCore is IOAppCore, Ownable {\n    // The LayerZero endpoint associated with the given OApp\n    ILayerZeroEndpointV2 public immutable endpoint;\n\n    // Mapping to store peers associated with corresponding endpoints\n    mapping(uint32 eid => bytes32 peer) public peers;\n\n    /**\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     *\n     * @dev The delegate typically should be set as the owner of the contract.\n     */\n    constructor(address _endpoint, address _delegate) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n\n        if (_delegate == address(0)) revert InvalidDelegate();\n        endpoint.setDelegate(_delegate);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\n        _setPeer(_eid, _peer);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\n        peers[_eid] = _peer;\n        emit PeerSet(_eid, _peer);\n    }\n\n    /**\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n     * ie. the peer is set to bytes32(0).\n     * @param _eid The endpoint ID.\n     * @return peer The address of the peer associated with the specified endpoint.\n     */\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\n        bytes32 peer = peers[_eid];\n        if (peer == bytes32(0)) revert NoPeer(_eid);\n        return peer;\n    }\n\n    /**\n     * @notice Sets the delegate address for the OApp.\n     * @param _delegate The address of the delegate to be set.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\n     */\n    function setDelegate(address _delegate) public onlyOwner {\n        endpoint.setDelegate(_delegate);\n    }\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IOAppReceiver, Origin } from \"./interfaces/IOAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppReceiver\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\n */\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\n    // Custom error message for when the caller is not the registered endpoint/\n    error OnlyEndpoint(address addr);\n\n    // @dev The version of the OAppReceiver implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant RECEIVER_VERSION = 2;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\n     * ie. this is a RECEIVE only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (0, RECEIVER_VERSION);\n    }\n\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @dev _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @dev _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata /*_origin*/,\n        bytes calldata /*_message*/,\n        address _sender\n    ) public view virtual returns (bool) {\n        return _sender == address(this);\n    }\n\n    /**\n     * @notice Checks if the path initialization is allowed based on the provided origin.\n     * @param origin The origin information containing the source endpoint and sender address.\n     * @return Whether the path has been initialized.\n     *\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\n     * @dev This defaults to assuming if a peer has been set, its initialized.\n     * Can be overridden by the OApp if there is other logic to determine this.\n     */\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\n        return peers[origin.srcEid] == origin.sender;\n    }\n\n    /**\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\n     * @dev _srcEid The source endpoint ID.\n     * @dev _sender The sender address.\n     * @return nonce The next nonce.\n     *\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\n     * @dev This is also enforced by the OApp.\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\n     */\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\n        return 0;\n    }\n\n    /**\n     * @dev Entry point for receiving messages or packets from the endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The payload of the received message.\n     * @param _executor The address of the executor for the received message.\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\n     *\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\n     */\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) public payable virtual {\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\n\n        // Ensure that the sender matches the expected peer for the source endpoint.\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\n\n        // Call the internal OApp implementation of lzReceive.\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppSender\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\n */\nabstract contract OAppSender is OAppCore {\n    using SafeERC20 for IERC20;\n\n    // Custom error messages\n    error NotEnoughNative(uint256 msgValue);\n    error LzTokenUnavailable();\n\n    // @dev The version of the OAppSender implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant SENDER_VERSION = 1;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n     * ie. this is a SEND only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (SENDER_VERSION, 0);\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n     * @return fee The calculated MessagingFee for the message.\n     *      - nativeFee: The native fee for the message.\n     *      - lzTokenFee: The LZ token fee for the message.\n     */\n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view virtual returns (MessagingFee memory fee) {\n        return\n            endpoint.quote(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\n                address(this)\n            );\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _fee The calculated LayerZero fee for the message.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n     * @return receipt The receipt for the sent message.\n     *      - guid: The unique identifier for the sent message.\n     *      - nonce: The nonce of the sent message.\n     *      - fee: The LayerZero fee incurred for the message.\n     */\n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory receipt) {\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\n        uint256 messageValue = _payNative(_fee.nativeFee);\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\n\n        return\n            // solhint-disable-next-line check-send-result\n            endpoint.send{ value: messageValue }(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\n                _refundAddress\n            );\n    }\n\n    /**\n     * @dev Internal function to pay the native fee associated with the message.\n     * @param _nativeFee The native fee to be paid.\n     * @return nativeFee The amount of native currency paid.\n     *\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n     * this will need to be overridden because msg.value would contain multiple lzFees.\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\n     */\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\n        return _nativeFee;\n    }\n\n    /**\n     * @dev Internal function to pay the LZ token fee associated with the message.\n     * @param _lzTokenFee The LZ token fee to be paid.\n     *\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\n     */\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\n        address lzToken = endpoint.lzToken();\n        if (lzToken == address(0)) revert LzTokenUnavailable();\n\n        // Pay LZ token fee by sending tokens to the endpoint.\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\n    }\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ILayerZeroEndpointV2 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\n/**\n * @title IOAppCore\n */\ninterface IOAppCore {\n    // Custom error messages\n    error OnlyPeer(uint32 eid, bytes32 sender);\n    error NoPeer(uint32 eid);\n    error InvalidEndpointCall();\n    error InvalidDelegate();\n\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\n    event PeerSet(uint32 eid, bytes32 peer);\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     */\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\n\n    /**\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\n     * @return iEndpoint The LayerZero endpoint as an interface.\n     */\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\n\n    /**\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\n     */\n    function peers(uint32 _eid) external view returns (bytes32 peer);\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) external;\n\n    /**\n     * @notice Sets the delegate address for the OApp Core.\n     * @param _delegate The address of the delegate to be set.\n     */\n    function setDelegate(address _delegate) external;\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title IOAppMsgInspector\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\n */\ninterface IOAppMsgInspector {\n    // Custom error message for inspection failure\n    error InspectionFailed(bytes message, bytes options);\n\n    /**\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\n     * @param _message The message payload to be inspected.\n     * @param _options Additional options or parameters for inspection.\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\n     *\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\n     */\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Struct representing enforced option parameters.\n */\nstruct EnforcedOptionParam {\n    uint32 eid; // Endpoint ID\n    uint16 msgType; // Message Type\n    bytes options; // Additional options\n}\n\n/**\n * @title IOAppOptionsType3\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\n */\ninterface IOAppOptionsType3 {\n    // Custom error message for invalid options\n    error InvalidOptions(bytes options);\n\n    // Event emitted when enforced options are set\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\n\n    /**\n     * @notice Sets enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OApp message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) external view returns (bytes memory options);\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ILayerZeroReceiver, Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\n\ninterface IOAppReceiver is ILayerZeroReceiver {\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata _origin,\n        bytes calldata _message,\n        address _sender\n    ) external view returns (bool isSender);\n}\n"},"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppOptionsType3, EnforcedOptionParam } from \"../interfaces/IOAppOptionsType3.sol\";\n\n/**\n * @title OAppOptionsType3\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\n */\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\n    uint16 internal constant OPTION_TYPE_3 = 3;\n\n    // @dev The \"msgType\" should be defined in the child contract.\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\n        _setEnforcedOptions(_enforcedOptions);\n    }\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\n            _assertOptionsType3(_enforcedOptions[i].options);\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\n        }\n\n        emit EnforcedOptionSet(_enforcedOptions);\n    }\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OAPP message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     *\n     * @dev If there is an enforced lzReceive option:\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) public view virtual returns (bytes memory) {\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\n\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\n        if (enforced.length == 0) return _extraOptions;\n\n        // No caller options, return enforced\n        if (_extraOptions.length == 0) return enforced;\n\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\n        if (_extraOptions.length >= 2) {\n            _assertOptionsType3(_extraOptions);\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\n            return bytes.concat(enforced, _extraOptions[2:]);\n        }\n\n        // No valid set of options was found.\n        revert InvalidOptions(_extraOptions);\n    }\n\n    /**\n     * @dev Internal function to assert that options are of type 3.\n     * @param _options The options to be checked.\n     */\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\n        uint16 optionsType;\n        assembly {\n            optionsType := mload(add(_options, 2))\n        }\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\n    }\n}\n"},"lib/devtools/packages/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IPreCrime } from \"./interfaces/IPreCrime.sol\";\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \"./interfaces/IOAppPreCrimeSimulator.sol\";\n\n/**\n * @title OAppPreCrimeSimulator\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\n */\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\n    // The address of the preCrime implementation.\n    address public preCrime;\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     *\n     * @dev The simulator contract is the base contract for the OApp by default.\n     * @dev If the simulator is a separate contract, override this function.\n     */\n    function oApp() external view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\n        preCrime = _preCrime;\n        emit PreCrimeSet(_preCrime);\n    }\n\n    /**\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\n     *\n     * @dev WARNING: MUST revert at the end with the simulation results.\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\n     * WITHOUT actually executing them.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\n        for (uint256 i = 0; i < _packets.length; i++) {\n            InboundPacket calldata packet = _packets[i];\n\n            // Ignore packets that are not from trusted peers.\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\n\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\n            //  - address _executor\n            //  - bytes calldata _extraData\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\n            // They are instead stubbed to default values, address(0) and bytes(\"\")\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\n            // which would cause the revert to be ignored.\n            this.lzReceiveSimulate{ value: packet.value }(\n                packet.origin,\n                packet.guid,\n                packet.message,\n                packet.executor,\n                packet.extraData\n            );\n        }\n\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\n    }\n\n    /**\n     * @dev Is effectively an internal function because msg.sender must be address(this).\n     * Allows resetting the call stack for 'internal' calls.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier of the packet.\n     * @param _message The message payload of the packet.\n     * @param _executor The executor address for the packet.\n     * @param _extraData Additional data for the packet.\n     */\n    function lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable virtual {\n        // @dev Ensure ONLY can be called 'internally'.\n        if (msg.sender != address(this)) revert OnlySelf();\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The GUID of the LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\n}\n"},"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\n// solhint-disable-next-line no-unused-import\nimport { InboundPacket, Origin } from \"../libs/Packet.sol\";\n\n/**\n * @title IOAppPreCrimeSimulator Interface\n * @dev Interface for the preCrime simulation functionality in an OApp.\n */\ninterface IOAppPreCrimeSimulator {\n    // @dev simulation result used in PreCrime implementation\n    error SimulationResult(bytes result);\n    error OnlySelf();\n\n    /**\n     * @dev Emitted when the preCrime contract address is set.\n     * @param preCrimeAddress The address of the preCrime contract.\n     */\n    event PreCrimeSet(address preCrimeAddress);\n\n    /**\n     * @dev Retrieves the address of the preCrime contract implementation.\n     * @return The address of the preCrime contract.\n     */\n    function preCrime() external view returns (address);\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     */\n    function oApp() external view returns (address);\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) external;\n\n    /**\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\n}\n"},"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\nstruct PreCrimePeer {\n    uint32 eid;\n    bytes32 preCrime;\n    bytes32 oApp;\n}\n\n// TODO not done yet\ninterface IPreCrime {\n    error OnlyOffChain();\n\n    // for simulate()\n    error PacketOversize(uint256 max, uint256 actual);\n    error PacketUnsorted();\n    error SimulationFailed(bytes reason);\n\n    // for preCrime()\n    error SimulationResultNotFound(uint32 eid);\n    error InvalidSimulationResult(uint32 eid, bytes reason);\n    error CrimeFound(bytes crime);\n\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\n\n    function simulate(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues\n    ) external payable returns (bytes memory);\n\n    function buildSimulationResult() external view returns (bytes memory);\n\n    function preCrime(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues,\n        bytes[] calldata _simulations\n    ) external;\n\n    function version() external view returns (uint64 major, uint8 minor);\n}\n"},"lib/devtools/packages/oapp-evm/contracts/precrime/libs/Packet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { PacketV1Codec } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\";\n\n/**\n * @title InboundPacket\n * @dev Structure representing an inbound packet received by the contract.\n */\nstruct InboundPacket {\n    Origin origin; // Origin information of the packet.\n    uint32 dstEid; // Destination endpointId of the packet.\n    address receiver; // Receiver address for the packet.\n    bytes32 guid; // Unique identifier of the packet.\n    uint256 value; // msg.value of the packet.\n    address executor; // Executor address for the packet.\n    bytes message; // Message payload of the packet.\n    bytes extraData; // Additional arbitrary data for the packet.\n}\n\n/**\n * @title PacketDecoder\n * @dev Library for decoding LayerZero packets.\n */\nlibrary PacketDecoder {\n    using PacketV1Codec for bytes;\n\n    /**\n     * @dev Decode an inbound packet from the given packet data.\n     * @param _packet The packet data to decode.\n     * @return packet An InboundPacket struct representing the decoded packet.\n     */\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\n        packet.dstEid = _packet.dstEid();\n        packet.receiver = _packet.receiverB20();\n        packet.guid = _packet.guid();\n        packet.message = _packet.message();\n    }\n\n    /**\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\n     * @param _packets An array of packet data to decode.\n     * @param _packetMsgValues An array of associated message values for each packet.\n     * @return packets An array of InboundPacket structs representing the decoded packets.\n     */\n    function decode(\n        bytes[] calldata _packets,\n        uint256[] memory _packetMsgValues\n    ) internal pure returns (InboundPacket[] memory packets) {\n        packets = new InboundPacket[](_packets.length);\n        for (uint256 i = 0; i < _packets.length; i++) {\n            bytes calldata packet = _packets[i];\n            packets[i] = PacketDecoder.decode(packet);\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\n            packets[i].value = _packetMsgValues[i];\n        }\n    }\n}\n"},"lib/devtools/packages/oft-evm/contracts/OFT.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IOFT, OFTCore } from \"./OFTCore.sol\";\n\n/**\n * @title OFT Contract\n * @dev OFT is an ERC-20 token that extends the functionality of the OFTCore contract.\n */\nabstract contract OFT is OFTCore, ERC20 {\n    /**\n     * @dev Constructor for the OFT contract.\n     * @param _name The name of the OFT.\n     * @param _symbol The symbol of the OFT.\n     * @param _lzEndpoint The LayerZero endpoint address.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lzEndpoint,\n        address _delegate\n    ) ERC20(_name, _symbol) OFTCore(decimals(), _lzEndpoint, _delegate) {}\n\n    /**\n     * @dev Retrieves the address of the underlying ERC20 implementation.\n     * @return The address of the OFT token.\n     *\n     * @dev In the case of OFT, address(this) and erc20 are the same contract.\n     */\n    function token() public view returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev In the case of OFT where the contract IS the token, approval is NOT required.\n     */\n    function approvalRequired() external pure virtual returns (bool) {\n        return false;\n    }\n\n    /**\n     * @dev Burns tokens from the sender's specified balance.\n     * @param _from The address to debit the tokens from.\n     * @param _amountLD The amount of tokens to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination chain ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        (amountSentLD, amountReceivedLD) = _debitView(_amountLD, _minAmountLD, _dstEid);\n\n        // @dev In NON-default OFT, amountSentLD could be 100, with a 10% fee, the amountReceivedLD amount is 90,\n        // therefore amountSentLD CAN differ from amountReceivedLD.\n\n        // @dev Default OFT burns on src.\n        _burn(_from, amountSentLD);\n    }\n\n    /**\n     * @dev Credits tokens to the specified address.\n     * @param _to The address to credit the tokens to.\n     * @param _amountLD The amount of tokens to credit in local decimals.\n     * @dev _srcEid The source chain ID.\n     * @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 /*_srcEid*/\n    ) internal virtual override returns (uint256 amountReceivedLD) {\n        if (_to == address(0x0)) _to = address(0xdead); // _mint(...) does not support address(0x0)\n        // @dev Default OFT mints on dst.\n        _mint(_to, _amountLD);\n        // @dev In the case of NON-default OFT, the _amountLD MIGHT not be == amountReceivedLD.\n        return _amountLD;\n    }\n}\n"},"lib/devtools/packages/oft-evm/contracts/OFTCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { OApp, Origin } from \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\nimport { OAppOptionsType3 } from \"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\";\nimport { IOAppMsgInspector } from \"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\";\n\nimport { OAppPreCrimeSimulator } from \"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\";\n\nimport { IOFT, SendParam, OFTLimit, OFTReceipt, OFTFeeDetail, MessagingReceipt, MessagingFee } from \"./interfaces/IOFT.sol\";\nimport { OFTMsgCodec } from \"./libs/OFTMsgCodec.sol\";\nimport { OFTComposeMsgCodec } from \"./libs/OFTComposeMsgCodec.sol\";\n\n/**\n * @title OFTCore\n * @dev Abstract contract for the OftChain (OFT) token.\n */\nabstract contract OFTCore is IOFT, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\n    using OFTMsgCodec for bytes;\n    using OFTMsgCodec for bytes32;\n\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\n    //      - shareDecimals == SD == shared Decimals\n    //      - localDecimals == LD == local decimals\n    // @dev Considers that tokens have different decimal amounts on various chains.\n    // @dev eg.\n    //  For a token\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\n    //  you can only display 1.23 -> uint(123).\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\n    uint256 public immutable decimalConversionRate;\n\n    // @notice Msg types that are used to identify the various OFT operations.\n    // @dev This can be extended in child contracts for non-default oft operations\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\n    uint16 public constant SEND = 1;\n    uint16 public constant SEND_AND_CALL = 2;\n\n    // Address of an optional contract to inspect both 'message' and 'options'\n    address public msgInspector;\n    event MsgInspectorSet(address inspector);\n\n    /**\n     * @dev Constructor.\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\n     * @param _endpoint The address of the LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(uint8 _localDecimals, address _endpoint, address _delegate) OApp(_endpoint, _delegate) {\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\n    }\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\n        return (type(IOFT).interfaceId, 1);\n    }\n\n    /**\n     * @dev Retrieves the shared decimals of the OFT.\n     * @return The shared decimals of the OFT.\n     *\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\n     * Lowest common decimal denominator between chains.\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\n     */\n    function sharedDecimals() public view virtual returns (uint8) {\n        return 6;\n    }\n\n    /**\n     * @dev Sets the message inspector address for the OFT.\n     * @param _msgInspector The address of the message inspector.\n     *\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\n     */\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\n        msgInspector = _msgInspector;\n        emit MsgInspectorSet(_msgInspector);\n    }\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return oftLimit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return oftReceipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    )\n        external\n        view\n        virtual\n        returns (OFTLimit memory oftLimit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory oftReceipt)\n    {\n        uint256 minAmountLD = 0; // Unused in the default implementation.\n        uint256 maxAmountLD = type(uint64).max; // Unused in the default implementation.\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\n\n        // Unused in the default implementation; reserved for future complex fee details.\n        oftFeeDetails = new OFTFeeDetail[](0);\n\n        // @dev This is the same as the send() operation, but without the actual send.\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(\n        SendParam calldata _sendParam,\n        bool _payInLzToken\n    ) external view virtual returns (MessagingFee memory msgFee) {\n        // @dev mock the amount to receive, this is the same operation used in the send().\n        // The quote is as similar as possible to the actual send() operation.\n        (, uint256 amountReceivedLD) = _debitView(_sendParam.amountLD, _sendParam.minAmountLD, _sendParam.dstEid);\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Calculates the LayerZero fee for the send() operation.\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\n    }\n\n    /**\n     * @dev Executes the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        return _send(_sendParam, _fee, _refundAddress);\n    }\n\n    /**\n     * @dev Internal function to execute the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function _send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        // @dev Applies the token transfers regarding this send() operation.\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent/debited from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be received/credited to the recipient on the remote OFT instance.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\n            msg.sender,\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\n        // @dev Formulate the OFT receipt.\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n\n        emit OFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to build the message and options.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _amountLD The amount in local decimals.\n     * @return message The encoded message.\n     * @return options The encoded options.\n     */\n    function _buildMsgAndOptions(\n        SendParam calldata _sendParam,\n        uint256 _amountLD\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\n        bool hasCompose;\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\n        (message, hasCompose) = OFTMsgCodec.encode(\n            _sendParam.to,\n            _toSD(_amountLD),\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\n            _sendParam.composeMsg\n        );\n        // @dev Change the msg type depending if its composed or not.\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\n\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\n        address inspector = msgInspector; // caches the msgInspector to avoid potential double storage read\n        if (inspector != address(0)) IOAppMsgInspector(inspector).inspect(message, options);\n    }\n\n    /**\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The encoded message.\n     * @dev _executor The address of the executor.\n     * @dev _extraData Additional data.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address /*_executor*/, // @dev unused in the default implementation.\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\n    ) internal virtual override {\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\n        // Thus everything is bytes32() encoded in flight.\n        address toAddress = _message.sendTo().bytes32ToAddress();\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\n        uint256 amountReceivedLD = _credit(toAddress, _toLD(_message.amountSD()), _origin.srcEid);\n\n        if (_message.isComposed()) {\n            // @dev Proprietary composeMsg format for the OFT.\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\n                _origin.nonce,\n                _origin.srcEid,\n                amountReceivedLD,\n                _message.composeMsg()\n            );\n\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of the composed message*/, composeMsg);\n        }\n\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual override {\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Check if the peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint ID to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     *\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\n        return peers[_eid] == _peer;\n    }\n\n    /**\n     * @dev Internal function to remove dust from the given local decimal amount.\n     * @param _amountLD The amount in local decimals.\n     * @return amountLD The amount after removing dust.\n     *\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\n     */\n    function _removeDust(uint256 _amountLD) internal view virtual returns (uint256 amountLD) {\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\n     * @param _amountSD The amount in shared decimals.\n     * @return amountLD The amount in local decimals.\n     */\n    function _toLD(uint64 _amountSD) internal view virtual returns (uint256 amountLD) {\n        return _amountSD * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\n     * @param _amountLD The amount in local decimals.\n     * @return amountSD The amount in shared decimals.\n     */\n    function _toSD(uint256 _amountLD) internal view virtual returns (uint64 amountSD) {\n        return uint64(_amountLD / decimalConversionRate);\n    }\n\n    /**\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @dev _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent, in local decimals.\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\n     *\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\n     */\n    function _debitView(\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 /*_dstEid*/\n    ) internal view virtual returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\n        amountSentLD = _removeDust(_amountLD);\n        // @dev The amount to send is the same as amount received in the default implementation.\n        amountReceivedLD = amountSentLD;\n\n        // @dev Check for slippage.\n        if (amountReceivedLD < _minAmountLD) {\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\n        }\n    }\n\n    /**\n     * @dev Internal function to perform a debit operation.\n     * @param _from The address to debit.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\n\n    /**\n     * @dev Internal function to perform a credit operation.\n     * @param _to The address to credit.\n     * @param _amountLD The amount to credit in local decimals.\n     * @param _srcEid The source endpoint ID.\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 _srcEid\n    ) internal virtual returns (uint256 amountReceivedLD);\n}\n"},"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { MessagingReceipt, MessagingFee } from \"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\";\n\n/**\n * @dev Struct representing token parameters for the OFT send() operation.\n */\nstruct SendParam {\n    uint32 dstEid; // Destination endpoint ID.\n    bytes32 to; // Recipient address.\n    uint256 amountLD; // Amount to send in local decimals.\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\n    bytes composeMsg; // The composed message for the send() operation.\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\n}\n\n/**\n * @dev Struct representing OFT limit information.\n * @dev These amounts can change dynamically and are up the specific oft implementation.\n */\nstruct OFTLimit {\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\n}\n\n/**\n * @dev Struct representing OFT receipt information.\n */\nstruct OFTReceipt {\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\n}\n\n/**\n * @dev Struct representing OFT fee details.\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\n */\nstruct OFTFeeDetail {\n    int256 feeAmountLD; // Amount of the fee in local decimals.\n    string description; // Description of the fee.\n}\n\n/**\n * @title IOFT\n * @dev Interface for the OftChain (OFT) token.\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\n * @dev This specific interface ID is '0x02e49c2c'.\n */\ninterface IOFT {\n    // Custom error messages\n    error InvalidLocalDecimals();\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\n\n    // Events\n    event OFTSent(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 dstEid, // Destination Endpoint ID.\n        address indexed fromAddress, // Address of the sender on the src chain.\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n    event OFTReceived(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 srcEid, // Source Endpoint ID.\n        address indexed toAddress, // Address of the recipient on the dst chain.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\n\n    /**\n     * @notice Retrieves the address of the token associated with the OFT.\n     * @return token The address of the ERC20 token implementation.\n     */\n    function token() external view returns (address);\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev Allows things like wallet implementers to determine integration requirements,\n     * without understanding the underlying token implementation.\n     */\n    function approvalRequired() external view returns (bool);\n\n    /**\n     * @notice Retrieves the shared decimals of the OFT.\n     * @return sharedDecimals The shared decimals of the OFT.\n     */\n    function sharedDecimals() external view returns (uint8);\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return limit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return receipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\n\n    /**\n     * @notice Executes the send() operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The fee information supplied by the caller.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\n     * @return receipt The LayerZero messaging receipt from the send() operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\n}\n"},"lib/devtools/packages/oft-evm/contracts/libs/OFTComposeMsgCodec.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTComposeMsgCodec {\n    // Offset constants for decoding composed messages\n    uint8 private constant NONCE_OFFSET = 8;\n    uint8 private constant SRC_EID_OFFSET = 12;\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\n\n    /**\n     * @dev Encodes a OFT composed message.\n     * @param _nonce The nonce value.\n     * @param _srcEid The source endpoint ID.\n     * @param _amountLD The amount in local decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded Composed message.\n     */\n    function encode(\n        uint64 _nonce,\n        uint32 _srcEid,\n        uint256 _amountLD,\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\n    ) internal pure returns (bytes memory _msg) {\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\n    }\n\n    /**\n     * @dev Retrieves the nonce for the composed message.\n     * @param _msg The message.\n     * @return The nonce value.\n     */\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the source endpoint ID for the composed message.\n     * @param _msg The message.\n     * @return The source endpoint ID.\n     */\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the amount in local decimals from the composed message.\n     * @param _msg The message.\n     * @return The amount in local decimals.\n     */\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composeFrom value from the composed message.\n     * @param _msg The message.\n     * @return The composeFrom value.\n     */\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the composed message.\n     * @param _msg The message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[COMPOSE_FROM_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"},"lib/devtools/packages/oft-evm/contracts/libs/OFTMsgCodec.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTMsgCodec {\n    // Offset constants for encoding and decoding OFT messages\n    uint8 private constant SEND_TO_OFFSET = 32;\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\n\n    /**\n     * @dev Encodes an OFT LayerZero message.\n     * @param _sendTo The recipient address.\n     * @param _amountShared The amount in shared decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded message.\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\n     */\n    function encode(\n        bytes32 _sendTo,\n        uint64 _amountShared,\n        bytes memory _composeMsg\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\n        hasCompose = _composeMsg.length > 0;\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\n        _msg = hasCompose\n            ? abi.encodePacked(_sendTo, _amountShared, addressToBytes32(msg.sender), _composeMsg)\n            : abi.encodePacked(_sendTo, _amountShared);\n    }\n\n    /**\n     * @dev Checks if the OFT message is composed.\n     * @param _msg The OFT message.\n     * @return A boolean indicating whether the message is composed.\n     */\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\n    }\n\n    /**\n     * @dev Retrieves the recipient address from the OFT message.\n     * @param _msg The OFT message.\n     * @return The recipient address.\n     */\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[:SEND_TO_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the amount in shared decimals from the OFT message.\n     * @param _msg The OFT message.\n     * @return The amount in shared decimals.\n     */\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composed message from the OFT message.\n     * @param _msg The OFT message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"},"lib/forge-std/src/Base.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\n    // console.sol and console2.sol work by executing a staticcall to this address.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    // Deterministic deployment address of the Multicall3 contract.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n    // The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n"},"lib/forge-std/src/Script.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n// 💬 ABOUT\n// Forge Std's default Script.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheatsSafe} from \"./StdCheats.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorageSafe} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {ScriptBase} from \"./Base.sol\";\n\n// ⭐️ SCRIPT\nabstract contract Script is ScriptBase, StdChains, StdCheatsSafe, StdUtils {\n    // Note: IS_SCRIPT() must return true.\n    bool public IS_SCRIPT = true;\n}\n"},"lib/forge-std/src/StdAssertions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdAssertions {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    event log(string);\n    event logs(bytes);\n\n    event log_address(address);\n    event log_bytes32(bytes32);\n    event log_int(int256);\n    event log_uint(uint256);\n    event log_bytes(bytes);\n    event log_string(string);\n\n    event log_named_address(string key, address val);\n    event log_named_bytes32(string key, bytes32 val);\n    event log_named_decimal_int(string key, int256 val, uint256 decimals);\n    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);\n    event log_named_int(string key, int256 val);\n    event log_named_uint(string key, uint256 val);\n    event log_named_bytes(string key, bytes val);\n    event log_named_string(string key, string val);\n\n    event log_array(uint256[] val);\n    event log_array(int256[] val);\n    event log_array(address[] val);\n    event log_named_array(string key, uint256[] val);\n    event log_named_array(string key, int256[] val);\n    event log_named_array(string key, address[] val);\n\n    bool private _failed;\n\n    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n    }\n\n    function fail() internal virtual {\n        vm.store(address(vm), bytes32(\"failed\"), bytes32(uint256(1)));\n        _failed = true;\n    }\n\n    function assertTrue(bool data) internal pure virtual {\n        vm.assertTrue(data);\n    }\n\n    function assertTrue(bool data, string memory err) internal pure virtual {\n        vm.assertTrue(data, err);\n    }\n\n    function assertFalse(bool data) internal pure virtual {\n        vm.assertFalse(data);\n    }\n\n    function assertFalse(bool data, string memory err) internal pure virtual {\n        vm.assertFalse(data, err);\n    }\n\n    function assertEq(bool left, bool right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bool left, bool right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(uint256 left, uint256 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals);\n    }\n\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals, err);\n    }\n\n    function assertEq(int256 left, int256 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals);\n    }\n\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals, err);\n    }\n\n    function assertEq(address left, address right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(address left, address right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes32 left, bytes32 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq32(bytes32 left, bytes32 right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        assertEq(left, right, err);\n    }\n\n    function assertEq(string memory left, string memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(string memory left, string memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes memory left, bytes memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(address[] memory left, address[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(string[] memory left, string[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    // Legacy helper\n    function assertEqUint(uint256 left, uint256 right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertNotEq(bool left, bool right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bool left, bool right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(uint256 left, uint256 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals);\n    }\n\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertNotEqDecimal(left, right, decimals, err);\n    }\n\n    function assertNotEq(int256 left, int256 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals);\n    }\n\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals, err);\n    }\n\n    function assertNotEq(address left, address right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(address left, address right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes32 left, bytes32 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq32(bytes32 left, bytes32 right) internal pure virtual {\n        assertNotEq(left, right);\n    }\n\n    function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(string memory left, string memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(string memory left, string memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes memory left, bytes memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bool[] memory left, bool[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(uint256[] memory left, uint256[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(int256[] memory left, int256[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(address[] memory left, address[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(string[] memory left, string[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes[] memory left, bytes[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertLt(uint256 left, uint256 right) internal pure virtual {\n        vm.assertLt(left, right);\n    }\n\n    function assertLt(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertLt(left, right, err);\n    }\n\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals);\n    }\n\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals, err);\n    }\n\n    function assertLt(int256 left, int256 right) internal pure virtual {\n        vm.assertLt(left, right);\n    }\n\n    function assertLt(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertLt(left, right, err);\n    }\n\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals);\n    }\n\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals, err);\n    }\n\n    function assertGt(uint256 left, uint256 right) internal pure virtual {\n        vm.assertGt(left, right);\n    }\n\n    function assertGt(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertGt(left, right, err);\n    }\n\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals);\n    }\n\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals, err);\n    }\n\n    function assertGt(int256 left, int256 right) internal pure virtual {\n        vm.assertGt(left, right);\n    }\n\n    function assertGt(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertGt(left, right, err);\n    }\n\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals);\n    }\n\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals, err);\n    }\n\n    function assertLe(uint256 left, uint256 right) internal pure virtual {\n        vm.assertLe(left, right);\n    }\n\n    function assertLe(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertLe(left, right, err);\n    }\n\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals);\n    }\n\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals, err);\n    }\n\n    function assertLe(int256 left, int256 right) internal pure virtual {\n        vm.assertLe(left, right);\n    }\n\n    function assertLe(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertLe(left, right, err);\n    }\n\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals);\n    }\n\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals, err);\n    }\n\n    function assertGe(uint256 left, uint256 right) internal pure virtual {\n        vm.assertGe(left, right);\n    }\n\n    function assertGe(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertGe(left, right, err);\n    }\n\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals);\n    }\n\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals, err);\n    }\n\n    function assertGe(int256 left, int256 right) internal pure virtual {\n        vm.assertGe(left, right);\n    }\n\n    function assertGe(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertGe(left, right, err);\n    }\n\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals);\n    }\n\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals, err);\n    }\n\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta);\n    }\n\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbs(left, right, maxDelta, err);\n    }\n\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);\n    }\n\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);\n    }\n\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta);\n    }\n\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta, err);\n    }\n\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);\n    }\n\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);\n    }\n\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }\n\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }\n\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }\n\n    function assertApproxEqRel(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }\n\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }\n\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }\n\n    // Inherited from DSTest, not used but kept for backwards-compatibility\n    function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {\n        return keccak256(left) == keccak256(right);\n    }\n\n    function assertEq0(bytes memory left, bytes memory right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        assertEq(left, right, err);\n    }\n\n    function assertNotEq0(bytes memory left, bytes memory right) internal pure virtual {\n        assertNotEq(left, right);\n    }\n\n    function assertNotEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        assertNotEq(left, right, err);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {\n        assertEqCall(target, callDataA, target, callDataB, true);\n    }\n\n    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)\n        internal\n        virtual\n    {\n        assertEqCall(targetA, callDataA, targetB, callDataB, true);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)\n        internal\n        virtual\n    {\n        assertEqCall(target, callDataA, target, callDataB, strictRevertData);\n    }\n\n    function assertEqCall(\n        address targetA,\n        bytes memory callDataA,\n        address targetB,\n        bytes memory callDataB,\n        bool strictRevertData\n    ) internal virtual {\n        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);\n        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);\n\n        if (successA && successB) {\n            assertEq(returnDataA, returnDataB, \"Call return data does not match\");\n        }\n\n        if (!successA && !successB && strictRevertData) {\n            assertEq(returnDataA, returnDataB, \"Call revert data does not match\");\n        }\n\n        if (!successA && successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call revert data\", returnDataA);\n            emit log_named_bytes(\" Right call return data\", returnDataB);\n            revert(\"assertion failed\");\n        }\n\n        if (successA && !successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call return data\", returnDataA);\n            emit log_named_bytes(\" Right call revert data\", returnDataB);\n            revert(\"assertion failed\");\n        }\n    }\n}\n"},"lib/forge-std/src/StdChains.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve the RPC URL for `mainnet`:\n *   - If you have specified data with `setChain`, it will return that.\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\n *   - If neither of the above conditions is met, the default data is returned.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private stdChainsInitialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initializeStdChains();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initializeStdChains() private {\n        if (stdChainsInitialized) return;\n\n        stdChainsInitialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\"holesky\", ChainData(\"Holesky\", 17000, \"https://rpc.holesky.ethpandaops.io\"));\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\n            \"optimism_sepolia\", ChainData(\"Optimism Sepolia\", 11155420, \"https://sepolia.optimism.io\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_sepolia\", ChainData(\"Arbitrum One Sepolia\", 421614, \"https://sepolia-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_amoy\", ChainData(\"Polygon Amoy\", 80002, \"https://rpc-amoy.polygon.technology\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\n        );\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\"base_sepolia\", ChainData(\"Base Sepolia\", 84532, \"https://sepolia.base.org\"));\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\n        setChainWithDefaultRpcUrl(\"blast_sepolia\", ChainData(\"Blast Sepolia\", 168587773, \"https://sepolia.blast.io\"));\n        setChainWithDefaultRpcUrl(\"blast\", ChainData(\"Blast\", 81457, \"https://rpc.blast.io\"));\n        setChainWithDefaultRpcUrl(\"fantom_opera\", ChainData(\"Fantom Opera\", 250, \"https://rpc.ankr.com/fantom/\"));\n        setChainWithDefaultRpcUrl(\n            \"fantom_opera_testnet\", ChainData(\"Fantom Opera Testnet\", 4002, \"https://rpc.ankr.com/fantom_testnet/\")\n        );\n        setChainWithDefaultRpcUrl(\"fraxtal\", ChainData(\"Fraxtal\", 252, \"https://rpc.frax.com\"));\n        setChainWithDefaultRpcUrl(\"fraxtal_testnet\", ChainData(\"Fraxtal Testnet\", 2522, \"https://rpc.testnet.frax.com\"));\n        setChainWithDefaultRpcUrl(\n            \"berachain_bartio_testnet\", ChainData(\"Berachain bArtio Testnet\", 80084, \"https://bartio.rpc.berachain.com\")\n        );\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n"},"lib/forge-std/src/StdCheats.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {console2} from \"./console2.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    struct Account {\n        address addr;\n        uint256 key;\n    }\n\n    enum AddressType {\n        Payable,\n        NonPayable,\n        ZeroAddress,\n        Precompile,\n        ForgeAddress\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n    // backwards compatibility, since this name was used in the original PR which has already has\n    // a release. This function can be removed in a future release once we want a breaking change.\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\n        if (addressType == AddressType.Payable) {\n            assumeNotPayable(addr);\n        } else if (addressType == AddressType.NonPayable) {\n            assumePayable(addr);\n        } else if (addressType == AddressType.ZeroAddress) {\n            assumeNotZeroAddress(addr);\n        } else if (addressType == AddressType.Precompile) {\n            assumeNotPrecompile(addr);\n        } else if (addressType == AddressType.ForgeAddress) {\n            assumeNotForgeAddress(addr);\n        }\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3,\n        AddressType addressType4\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n        assumeAddressIsNot(addr, addressType4);\n    }\n\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n    // `addr` and checking the `success` return value.\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used.\n    function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }\n\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used. See the\n    // `_isPayable` method for more information.\n    function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }\n\n    function assumeNotPayable(address addr) internal virtual {\n        vm.assume(!_isPayable(addr));\n    }\n\n    function assumeNotZeroAddress(address addr) internal pure virtual {\n        vm.assume(addr != address(0));\n    }\n\n    function assumeNotPrecompile(address addr) internal pure virtual {\n        assumeNotPrecompile(addr, _pureChainId());\n    }\n\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These should be present on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0x9));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function assumeNotForgeAddress(address addr) internal pure virtual {\n        // vm, console, and Create2Deployer addresses\n        vm.assume(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // Destroys an account immediately, sending the balance to beneficiary.\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n    // only after tx ends, this will run immediately.\n    function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }\n\n    // creates a struct containing both a labeled address and the corresponding private key\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    function changePrank(address msgSender, address txOrigin) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender, txOrigin);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) =\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n\n    function deployCodeTo(string memory what, address where) internal virtual {\n        deployCodeTo(what, \"\", 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\n        deployCodeTo(what, args, 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\n        bytes memory creationCode = vm.getCode(what);\n        vm.etch(where, abi.encodePacked(creationCode, args));\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        vm.etch(where, runtimeBytecode);\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n    function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }\n}\n"},"lib/forge-std/src/StdError.sol":{"content":"// SPDX-License-Identifier: MIT\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdError {\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\n}\n"},"lib/forge-std/src/StdInvariant.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nabstract contract StdInvariant {\n    struct FuzzSelector {\n        address addr;\n        bytes4[] selectors;\n    }\n\n    struct FuzzArtifactSelector {\n        string artifact;\n        bytes4[] selectors;\n    }\n\n    struct FuzzInterface {\n        address addr;\n        string[] artifacts;\n    }\n\n    address[] private _excludedContracts;\n    address[] private _excludedSenders;\n    address[] private _targetedContracts;\n    address[] private _targetedSenders;\n\n    string[] private _excludedArtifacts;\n    string[] private _targetedArtifacts;\n\n    FuzzArtifactSelector[] private _targetedArtifactSelectors;\n\n    FuzzSelector[] private _excludedSelectors;\n    FuzzSelector[] private _targetedSelectors;\n\n    FuzzInterface[] private _targetedInterfaces;\n\n    // Functions for users:\n    // These are intended to be called in tests.\n\n    function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }\n\n    function excludeSelector(FuzzSelector memory newExcludedSelector_) internal {\n        _excludedSelectors.push(newExcludedSelector_);\n    }\n\n    function excludeSender(address newExcludedSender_) internal {\n        _excludedSenders.push(newExcludedSender_);\n    }\n\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\n        _excludedArtifacts.push(newExcludedArtifact_);\n    }\n\n    function targetArtifact(string memory newTargetedArtifact_) internal {\n        _targetedArtifacts.push(newTargetedArtifact_);\n    }\n\n    function targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_) internal {\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\n    }\n\n    function targetContract(address newTargetedContract_) internal {\n        _targetedContracts.push(newTargetedContract_);\n    }\n\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\n        _targetedSelectors.push(newTargetedSelector_);\n    }\n\n    function targetSender(address newTargetedSender_) internal {\n        _targetedSenders.push(newTargetedSender_);\n    }\n\n    function targetInterface(FuzzInterface memory newTargetedInterface_) internal {\n        _targetedInterfaces.push(newTargetedInterface_);\n    }\n\n    // Functions for forge:\n    // These are called by forge to run invariant tests and don't need to be called in tests.\n\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n    function excludeSelectors() public view returns (FuzzSelector[] memory excludedSelectors_) {\n        excludedSelectors_ = _excludedSelectors;\n    }\n\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n    function targetArtifactSelectors() public view returns (FuzzArtifactSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n}\n"},"lib/forge-std/src/StdJson.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"<some_path>\");\n// json.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n"},"lib/forge-std/src/StdMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"},"lib/forge-std/src/StdStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct FindData {\n    uint256 slot;\n    uint256 offsetLeft;\n    uint256 offsetRight;\n    bool found;\n}\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n    bool _enable_packed_slots;\n    bytes _calldata;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {\n        if (self._calldata.length == 0) {\n            return flatten(self._keys);\n        } else {\n            return self._calldata;\n        }\n    }\n\n    // Calls target contract with configured parameters\n    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {\n        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));\n        (bool success, bytes memory rdat) = self._target.staticcall(cald);\n        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);\n\n        return (success, result);\n    }\n\n    // Tries mutating slot value to determine if the targeted value is stored in it.\n    // If current value is 0, then we are setting slot value to type(uint256).max\n    // Otherwise, we set it to 0. That way, return value should always be affected.\n    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n        (bool success, bytes32 prevReturnValue) = callTarget(self);\n\n        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);\n        vm.store(self._target, slot, testVal);\n\n        (, bytes32 newReturnValue) = callTarget(self);\n\n        vm.store(self._target, slot, prevSlotValue);\n\n        return (success && (prevReturnValue != newReturnValue));\n    }\n\n    // Tries setting one of the bits in slot to 1 until return value changes.\n    // Index of resulted bit is an offset packed slot has from left/right side\n    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {\n        for (uint256 offset = 0; offset < 256; offset++) {\n            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);\n            vm.store(self._target, slot, bytes32(valueToPut));\n\n            (bool success, bytes32 data) = callTarget(self);\n\n            if (success && (uint256(data) > 0)) {\n                return (true, offset);\n            }\n        }\n        return (false, 0);\n    }\n\n    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n\n        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);\n        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);\n\n        // `findOffset` may mutate slot value, so we are setting it to initial value\n        vm.store(self._target, slot, prevSlotValue);\n        return (foundLeft && foundRight, offsetLeft, offsetRight);\n    }\n\n    function find(StdStorage storage self) internal returns (FindData storage) {\n        return find(self, true);\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = getCallParams(self);\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            if (_clear) {\n                clear(self);\n            }\n            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        }\n        vm.record();\n        (, bytes32 callResult) = callTarget(self);\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n\n        if (reads.length == 0) {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        } else {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n\n                if (!checkSlotMutatesCall(self, reads[i])) {\n                    continue;\n                }\n\n                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);\n\n                if (self._enable_packed_slots) {\n                    bool found;\n                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);\n                    if (!found) {\n                        continue;\n                    }\n                }\n\n                // Check that value between found offsets is equal to the current call result\n                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;\n\n                if (uint256(callResult) != curVal) {\n                    continue;\n                }\n\n                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));\n                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =\n                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);\n                break;\n            }\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        if (_clear) {\n            clear(self);\n        }\n        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        self._calldata = _calldata;\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        self._enable_packed_slots = true;\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        FindData storage data = find(self, false);\n        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);\n        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;\n        clear(self);\n        return abi.encode(value);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        return (uint256(parent_slot), key);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        bool found;\n        bytes32 root_slot;\n        bytes32 parent_slot;\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        while (found) {\n            root_slot = parent_slot;\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\n        }\n        return uint256(root_slot);\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n    function clear(StdStorage storage self) internal {\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n        delete self._enable_packed_slots;\n        delete self._calldata;\n    }\n\n    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`\n    // (slotValue & mask) >> offsetRight will be the value of the given packed variable\n    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {\n        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;\n        // using assembly because (1 << 256) causes overflow\n        assembly {\n            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))\n        }\n    }\n\n    // Returns slot value with updated packed variable.\n    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)\n        internal\n        pure\n        returns (bytes32 newValue)\n    {\n        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return find(self, true);\n    }\n\n    function find(StdStorage storage self, bool _clear) internal returns (uint256) {\n        return stdStorageSafe.find(self, _clear).slot;\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_calldata(self, _calldata);\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        return stdStorageSafe.enable_packed_slots(self);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function clear(StdStorage storage self) internal {\n        stdStorageSafe.clear(self);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write_int(StdStorage storage self, int256 val) internal {\n        checked_write(self, bytes32(uint256(val)));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = stdStorageSafe.getCallParams(self);\n\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            find(self, false);\n        }\n        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        if ((data.offsetLeft + data.offsetRight) > 0) {\n            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));\n            require(\n                uint256(set) < maxVal,\n                string(\n                    abi.encodePacked(\n                        \"stdStorage find(StdStorage): Packed slot. We can't fit value greater than \",\n                        vm.toString(maxVal)\n                    )\n                )\n            );\n        }\n        bytes32 curVal = vm.load(who, bytes32(data.slot));\n        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);\n\n        vm.store(who, bytes32(data.slot), valToSet);\n\n        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);\n\n        if (!success || callResult != set) {\n            vm.store(who, bytes32(data.slot), curVal);\n            revert(\"stdStorage find(StdStorage): Failed to write value.\");\n        }\n        clear(self);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        return stdStorageSafe.parent(self);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.root(self);\n    }\n}\n"},"lib/forge-std/src/StdStyle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n"},"lib/forge-std/src/StdToml.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing TOML files\n// To parse:\n// ```\n// using stdToml for string;\n// string memory toml = vm.readFile(\"<some_path>\");\n// toml.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdToml for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdToml {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseToml(toml, key);\n    }\n\n    function readUint(string memory toml, string memory key) internal pure returns (uint256) {\n        return vm.parseTomlUint(toml, key);\n    }\n\n    function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseTomlUintArray(toml, key);\n    }\n\n    function readInt(string memory toml, string memory key) internal pure returns (int256) {\n        return vm.parseTomlInt(toml, key);\n    }\n\n    function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseTomlIntArray(toml, key);\n    }\n\n    function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {\n        return vm.parseTomlBytes32(toml, key);\n    }\n\n    function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseTomlBytes32Array(toml, key);\n    }\n\n    function readString(string memory toml, string memory key) internal pure returns (string memory) {\n        return vm.parseTomlString(toml, key);\n    }\n\n    function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {\n        return vm.parseTomlStringArray(toml, key);\n    }\n\n    function readAddress(string memory toml, string memory key) internal pure returns (address) {\n        return vm.parseTomlAddress(toml, key);\n    }\n\n    function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {\n        return vm.parseTomlAddressArray(toml, key);\n    }\n\n    function readBool(string memory toml, string memory key) internal pure returns (bool) {\n        return vm.parseTomlBool(toml, key);\n    }\n\n    function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseTomlBoolArray(toml, key);\n    }\n\n    function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseTomlBytes(toml, key);\n    }\n\n    function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseTomlBytesArray(toml, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeToml(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeToml(jsonKey, path, valueKey);\n    }\n}\n"},"lib/forge-std/src/StdUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {MockERC20} from \"./mocks/MockERC20.sol\";\nimport {MockERC721} from \"./mocks/MockERC721.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", result);\n    }\n\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns an initialized mock ERC20 contract\n    function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }\n\n    /// @dev returns an initialized mock ERC721 contract\n    function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n"},"lib/forge-std/src/Test.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\n// 💬 ABOUT\n// Forge Std's default Test.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdAssertions} from \"./StdAssertions.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheats} from \"./StdCheats.sol\";\nimport {stdError} from \"./StdError.sol\";\nimport {StdInvariant} from \"./StdInvariant.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {stdToml} from \"./StdToml.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {Vm} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {TestBase} from \"./Base.sol\";\n\n// ⭐️ TEST\nabstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {\n    // Note: IS_TEST() must return true.\n    bool public IS_TEST = true;\n}\n"},"lib/forge-std/src/Vm.sol":{"content":"// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// Forge execution contexts.\n    enum ForgeContext {\n        // Test group execution context (test, coverage or snapshot).\n        TestGroup,\n        // `forge test` execution context.\n        Test,\n        // `forge coverage` execution context.\n        Coverage,\n        // `forge snapshot` execution context.\n        Snapshot,\n        // Script group execution context (dry run, broadcast or resume).\n        ScriptGroup,\n        // `forge script` execution context.\n        ScriptDryRun,\n        // `forge script --broadcast` execution context.\n        ScriptBroadcast,\n        // `forge script --resume` execution context.\n        ScriptResume,\n        // Unknown `forge` execution context.\n        Unknown\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    /// Gas used. Returned by `lastCallGas`.\n    struct Gas {\n        // The gas limit of the call.\n        uint64 gasLimit;\n        // The total gas used.\n        uint64 gasTotalUsed;\n        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>\n        uint64 gasMemoryUsed;\n        // The amount of gas refunded.\n        int64 gasRefunded;\n        // The amount of gas remaining.\n        uint64 gasRemaining;\n    }\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and returns true if it exists, else returns false.\n    function envExists(string calldata name) external view returns (bool result);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Returns true if `forge` command was executed in given context.\n    function isContext(ForgeContext context) external view returns (bool result);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.blobbasefee`.\n    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlobBaseFee() external view returns (uint256 blobBaseFee);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Gets the gas used in the last call.\n    function lastCallGas() external view returns (Gas memory gas);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Prompts the user for a string value in the terminal.\n    function prompt(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for an address in the terminal.\n    function promptAddress(string calldata promptText) external returns (address);\n\n    /// Prompts the user for a hidden string value in the terminal.\n    function promptSecret(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for hidden uint256 in the terminal (usually pk).\n    function promptSecretUint(string calldata promptText) external returns (uint256);\n\n    /// Prompts the user for uint256 in the terminal.\n    function promptUint(string calldata promptText) external returns (uint256);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Scripting ========\n\n    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Returns the index of the first occurrence of a `key` in an `input` string.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\n    /// Returns 0 in case of an empty `key`.\n    function indexOf(string calldata input, string calldata key) external pure returns (uint256);\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external;\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Returns ENS namehash for provided string.\n    function ensNamehash(string calldata name) external pure returns (bytes32);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Get a `Wallet`'s nonce.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Returns a random `address`.\n    function randomAddress() external returns (address);\n\n    /// Returns a random uint256 value.\n    function randomUint() external returns (uint256);\n\n    /// Returns random uin256 value between the provided range (=min..=max).\n    function randomUint(uint256 min, uint256 max) external returns (uint256);\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.blobbasefee`\n    function blobBaseFee(uint256 newBlobBaseFee) external;\n\n    /// Sets the blobhashes in the transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function blobhashes(bytes32[] calldata hashes) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Gets the blockhashes from the current transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function getBlobhashes() external view returns (bytes32[] memory hashes);\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory revm state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(uint256 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertTo`.\n    function snapshot() external returns (uint256 snapshotId);\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top of the test.\n    function skip(bool skipTest) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n}\n"},"lib/forge-std/src/console.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _castLogPayloadViewToPure(\n        function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(int p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, int p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"},"lib/forge-std/src/console2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {console as console2} from \"./console.sol\";\n"},"lib/forge-std/src/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    /// uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"},"lib/forge-std/src/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n"},"lib/forge-std/src/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC165 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    /// This event emits when NFTs are created (`from` == 0) and destroyed\n    /// (`to` == 0). Exception: during contract creation, any number of NFTs\n    /// may be created and assigned without emitting Transfer. At the time of\n    /// any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    /// reaffirmed. The zero address indicates there is no approved address.\n    /// When a Transfer event emits, this also indicates that the approved\n    /// address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    /// The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    /// function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    /// about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT. When transfer is complete, this function\n    /// checks if `_to` is a smart contract (code size > 0). If so, it calls\n    /// `onERC721Received` on `_to` and throws if the return value is not\n    /// `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    /// except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    /// THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// Throws unless `msg.sender` is the current NFT owner, or an authorized\n    /// operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    /// all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    /// multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    /// after a `transfer`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted.\n    /// Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)\n        external\n        returns (bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata is IERC721 {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    /// 3986. The URI may point to a JSON file that conforms to the \"ERC721\n    /// Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable is IERC721 {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    /// them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    /// (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    /// `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    /// (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"},"lib/forge-std/src/interfaces/IMulticall3.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"},"lib/forge-std/src/mocks/MockERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n"},"lib/forge-std/src/mocks/MockERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC721Metadata, IERC721TokenReceiver} from \"../interfaces/IERC721.sol\";\n\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\ncontract MockERC721 is IERC721Metadata {\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {}\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n    function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _isApprovedForAll[owner][operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(address from, address to, uint256 id) public payable virtual override {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        _balanceOf[from]--;\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        delete _getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data)\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        _balanceOf[owner]--;\n\n        delete _ownerOf[id];\n\n        delete _getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }\n}\n"},"lib/forge-std/src/safeconsole.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n/// @author philogy <https://github.com/philogy>\n/// @dev Code generated automatically by script.\nlibrary safeconsole {\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\n\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\n    // for the view-to-pure log trick.\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\n        function(uint256, uint256) internal pure pureSendLogPayload;\n        assembly {\n            pureSendLogPayload := fnIn\n        }\n        pureSendLogPayload(offset, size);\n    }\n\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\n        assembly {\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\n        }\n    }\n\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\n        assembly {\n            pureMemcopy := fnIn\n        }\n        pureMemcopy(fromOffset, toOffset, length);\n    }\n\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\n        assembly {\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\n        }\n    }\n\n    function logMemory(uint256 offset, uint256 length) internal pure {\n        if (offset >= 0x60) {\n            // Sufficient memory before slice to prepare call header.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            assembly {\n                m0 := mload(sub(offset, 0x60))\n                m1 := mload(sub(offset, 0x40))\n                m2 := mload(sub(offset, 0x20))\n                // Selector of `logBytes(bytes)`.\n                mstore(sub(offset, 0x60), 0xe17bf956)\n                mstore(sub(offset, 0x40), 0x20)\n                mstore(sub(offset, 0x20), length)\n            }\n            _sendLogPayload(offset - 0x44, length + 0x44);\n            assembly {\n                mstore(sub(offset, 0x60), m0)\n                mstore(sub(offset, 0x40), m1)\n                mstore(sub(offset, 0x20), m2)\n            }\n        } else {\n            // Insufficient space, so copy slice forward, add header and reverse.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            uint256 endOffset = offset + length;\n            assembly {\n                m0 := mload(add(endOffset, 0x00))\n                m1 := mload(add(endOffset, 0x20))\n                m2 := mload(add(endOffset, 0x40))\n            }\n            _memcopy(offset, offset + 0x60, length);\n            assembly {\n                // Selector of `logBytes(bytes)`.\n                mstore(add(offset, 0x00), 0xe17bf956)\n                mstore(add(offset, 0x20), 0x20)\n                mstore(add(offset, 0x40), length)\n            }\n            _sendLogPayload(offset + 0x1c, length + 0x44);\n            _memcopy(offset + 0x60, offset, length);\n            assembly {\n                mstore(add(endOffset, 0x00), m0)\n                mstore(add(endOffset, 0x20), m1)\n                mstore(add(endOffset, 0x40), m2)\n            }\n        }\n    }\n\n    function log(address p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(address)`.\n            mstore(0x00, 0x2c2ecbc2)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bool p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(bool)`.\n            mstore(0x00, 0x32458eed)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(uint256 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(uint256)`.\n            mstore(0x00, 0xf82c50f1)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bytes32 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(string)`.\n            mstore(0x00, 0x41304fac)\n            mstore(0x20, 0x20)\n            writeString(0x40, p0)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,address)`.\n            mstore(0x00, 0xdaf0d4aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,bool)`.\n            mstore(0x00, 0x75b605d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,uint256)`.\n            mstore(0x00, 0x8309e8a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,string)`.\n            mstore(0x00, 0x759f86bb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,address)`.\n            mstore(0x00, 0x853c4849)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,bool)`.\n            mstore(0x00, 0x2a110e83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,uint256)`.\n            mstore(0x00, 0x399174d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,string)`.\n            mstore(0x00, 0x8feac525)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,address)`.\n            mstore(0x00, 0x69276c86)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,bool)`.\n            mstore(0x00, 0x1c9d7eb3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,uint256)`.\n            mstore(0x00, 0xf666715a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,string)`.\n            mstore(0x00, 0x643fd0df)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,address)`.\n            mstore(0x00, 0x319af333)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,bool)`.\n            mstore(0x00, 0xc3b55635)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,uint256)`.\n            mstore(0x00, 0xb60e72cc)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,string)`.\n            mstore(0x00, 0x4b5c4277)\n            mstore(0x20, 0x40)\n            mstore(0x40, 0x80)\n            writeString(0x60, p0)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,address)`.\n            mstore(0x00, 0x018c84c2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,bool)`.\n            mstore(0x00, 0xf2a66286)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,uint256)`.\n            mstore(0x00, 0x17fe6185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,address,string)`.\n            mstore(0x00, 0x007150be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,address)`.\n            mstore(0x00, 0xf11699ed)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,bool)`.\n            mstore(0x00, 0xeb830c92)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,uint256)`.\n            mstore(0x00, 0x9c4f99fb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,bool,string)`.\n            mstore(0x00, 0x212255cc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,address)`.\n            mstore(0x00, 0x7bc0d848)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,bool)`.\n            mstore(0x00, 0x678209a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,uint256)`.\n            mstore(0x00, 0xb69bcaf6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,uint256,string)`.\n            mstore(0x00, 0xa1f2e8aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,address)`.\n            mstore(0x00, 0xf08744e8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,bool)`.\n            mstore(0x00, 0xcf020fb1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,uint256)`.\n            mstore(0x00, 0x67dd6ff1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(address,string,string)`.\n            mstore(0x00, 0xfb772265)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,address)`.\n            mstore(0x00, 0xd2763667)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,bool)`.\n            mstore(0x00, 0x18c9c746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,uint256)`.\n            mstore(0x00, 0x5f7b9afb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,address,string)`.\n            mstore(0x00, 0xde9a9270)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,address)`.\n            mstore(0x00, 0x1078f68d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,bool)`.\n            mstore(0x00, 0x50709698)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,uint256)`.\n            mstore(0x00, 0x12f21602)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,bool,string)`.\n            mstore(0x00, 0x2555fa46)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,address)`.\n            mstore(0x00, 0x088ef9d2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,bool)`.\n            mstore(0x00, 0xe8defba9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,uint256)`.\n            mstore(0x00, 0x37103367)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,uint256,string)`.\n            mstore(0x00, 0xc3fc3970)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,address)`.\n            mstore(0x00, 0x9591b953)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,bool)`.\n            mstore(0x00, 0xdbb4c247)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,uint256)`.\n            mstore(0x00, 0x1093ee11)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(bool,string,string)`.\n            mstore(0x00, 0xb076847f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,address)`.\n            mstore(0x00, 0xbcfd9be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,bool)`.\n            mstore(0x00, 0x9b6ec042)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,uint256)`.\n            mstore(0x00, 0x5a9b5ed5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,address,string)`.\n            mstore(0x00, 0x63cb41f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,address)`.\n            mstore(0x00, 0x35085f7b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,bool)`.\n            mstore(0x00, 0x20718650)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,uint256)`.\n            mstore(0x00, 0x20098014)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,bool,string)`.\n            mstore(0x00, 0x85775021)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,address)`.\n            mstore(0x00, 0x5c96b331)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,bool)`.\n            mstore(0x00, 0x4766da72)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,uint256)`.\n            mstore(0x00, 0xd1ed7a3c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,uint256,string)`.\n            mstore(0x00, 0x71d04af2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,address)`.\n            mstore(0x00, 0x7afac959)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,bool)`.\n            mstore(0x00, 0x4ceda75a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,uint256)`.\n            mstore(0x00, 0x37aa7d4c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(uint256,string,string)`.\n            mstore(0x00, 0xb115611f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,address)`.\n            mstore(0x00, 0xfcec75e0)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,bool)`.\n            mstore(0x00, 0xc91d5ed4)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,uint256)`.\n            mstore(0x00, 0x0d26b925)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,address,string)`.\n            mstore(0x00, 0xe0e9ad4f)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,address)`.\n            mstore(0x00, 0x932bbb38)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,bool)`.\n            mstore(0x00, 0x850b7ad6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,uint256)`.\n            mstore(0x00, 0xc95958d6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,bool,string)`.\n            mstore(0x00, 0xe298f47d)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,address)`.\n            mstore(0x00, 0x1c7ec448)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,bool)`.\n            mstore(0x00, 0xca7733b1)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,uint256)`.\n            mstore(0x00, 0xca47c4eb)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,uint256,string)`.\n            mstore(0x00, 0x5970e089)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,address)`.\n            mstore(0x00, 0x95ed0195)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,bool)`.\n            mstore(0x00, 0xb0e0f9b5)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,uint256)`.\n            mstore(0x00, 0x5821efa1)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            // Selector of `log(string,string,string)`.\n            mstore(0x00, 0x2ced7cef)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, 0xe0)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n            writeString(0x100, p2)\n        }\n        _sendLogPayload(0x1c, 0x124);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n        }\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,address)`.\n            mstore(0x00, 0x665bf134)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,bool)`.\n            mstore(0x00, 0x0e378994)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,uint256)`.\n            mstore(0x00, 0x94250d77)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,address,string)`.\n            mstore(0x00, 0xf808da20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,address)`.\n            mstore(0x00, 0x9f1bc36e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,bool)`.\n            mstore(0x00, 0x2cd4134a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,uint256)`.\n            mstore(0x00, 0x3971e78c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,bool,string)`.\n            mstore(0x00, 0xaa6540c8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,address)`.\n            mstore(0x00, 0x8da6def5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,bool)`.\n            mstore(0x00, 0x9b4254e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,uint256)`.\n            mstore(0x00, 0xbe553481)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,uint256,string)`.\n            mstore(0x00, 0xfdb4f990)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,address)`.\n            mstore(0x00, 0x8f736d16)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,bool)`.\n            mstore(0x00, 0x6f1a594e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,uint256)`.\n            mstore(0x00, 0xef1cefe7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,address,string,string)`.\n            mstore(0x00, 0x21bdaf25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,address)`.\n            mstore(0x00, 0x660375dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,bool)`.\n            mstore(0x00, 0xa6f50b0f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,uint256)`.\n            mstore(0x00, 0xa75c59de)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,address,string)`.\n            mstore(0x00, 0x2dd778e6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,address)`.\n            mstore(0x00, 0xcf394485)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,bool)`.\n            mstore(0x00, 0xcac43479)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,uint256)`.\n            mstore(0x00, 0x8c4e5de6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,bool,string)`.\n            mstore(0x00, 0xdfc4a2e8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,address)`.\n            mstore(0x00, 0xccf790a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,bool)`.\n            mstore(0x00, 0xc4643e20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,uint256)`.\n            mstore(0x00, 0x386ff5f4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,uint256,string)`.\n            mstore(0x00, 0x0aa6cfad)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,address)`.\n            mstore(0x00, 0x19fd4956)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,bool)`.\n            mstore(0x00, 0x50ad461d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,uint256)`.\n            mstore(0x00, 0x80e6a20b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,bool,string,string)`.\n            mstore(0x00, 0x475c5c33)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,address)`.\n            mstore(0x00, 0x478d1c62)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,bool)`.\n            mstore(0x00, 0xa1bcc9b3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,uint256)`.\n            mstore(0x00, 0x100f650e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,address,string)`.\n            mstore(0x00, 0x1da986ea)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,address)`.\n            mstore(0x00, 0xa31bfdcc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,bool)`.\n            mstore(0x00, 0x3bf5e537)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,uint256)`.\n            mstore(0x00, 0x22f6b999)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,bool,string)`.\n            mstore(0x00, 0xc5ad85f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,address)`.\n            mstore(0x00, 0x20e3984d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,bool)`.\n            mstore(0x00, 0x66f1bc67)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,uint256)`.\n            mstore(0x00, 0x34f0e636)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,uint256,string)`.\n            mstore(0x00, 0x4a28c017)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,address)`.\n            mstore(0x00, 0x5c430d47)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,bool)`.\n            mstore(0x00, 0xcf18105c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,uint256)`.\n            mstore(0x00, 0xbf01f891)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,uint256,string,string)`.\n            mstore(0x00, 0x88a8c406)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,address)`.\n            mstore(0x00, 0x0d36fa20)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,bool)`.\n            mstore(0x00, 0x0df12b76)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,uint256)`.\n            mstore(0x00, 0x457fe3cf)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,address,string)`.\n            mstore(0x00, 0xf7e36245)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,address)`.\n            mstore(0x00, 0x205871c2)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,bool)`.\n            mstore(0x00, 0x5f1d5c9f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,uint256)`.\n            mstore(0x00, 0x515e38b6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,bool,string)`.\n            mstore(0x00, 0xbc0b61fe)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,address)`.\n            mstore(0x00, 0x63183678)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,bool)`.\n            mstore(0x00, 0x0ef7e050)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,uint256)`.\n            mstore(0x00, 0x1dc8e1b8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,uint256,string)`.\n            mstore(0x00, 0x448830a8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,address)`.\n            mstore(0x00, 0xa04e2f87)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,bool)`.\n            mstore(0x00, 0x35a5071f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,uint256)`.\n            mstore(0x00, 0x159f8927)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(address,string,string,string)`.\n            mstore(0x00, 0x5d02c50b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,address)`.\n            mstore(0x00, 0x1d14d001)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,bool)`.\n            mstore(0x00, 0x46600be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,uint256)`.\n            mstore(0x00, 0x0c66d1be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,address,string)`.\n            mstore(0x00, 0xd812a167)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,address)`.\n            mstore(0x00, 0x1c41a336)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,bool)`.\n            mstore(0x00, 0x6a9c478b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,uint256)`.\n            mstore(0x00, 0x07831502)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,bool,string)`.\n            mstore(0x00, 0x4a66cb34)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,address)`.\n            mstore(0x00, 0x136b05dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,bool)`.\n            mstore(0x00, 0xd6019f1c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,uint256)`.\n            mstore(0x00, 0x7bf181a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,uint256,string)`.\n            mstore(0x00, 0x51f09ff8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,address)`.\n            mstore(0x00, 0x6f7c603e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,bool)`.\n            mstore(0x00, 0xe2bfd60b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,uint256)`.\n            mstore(0x00, 0xc21f64c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,address,string,string)`.\n            mstore(0x00, 0xa73c1db6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,address)`.\n            mstore(0x00, 0xf4880ea4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,bool)`.\n            mstore(0x00, 0xc0a302d8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,uint256)`.\n            mstore(0x00, 0x4c123d57)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,address,string)`.\n            mstore(0x00, 0xa0a47963)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,address)`.\n            mstore(0x00, 0x8c329b1a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,bool)`.\n            mstore(0x00, 0x3b2a5ce0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,uint256)`.\n            mstore(0x00, 0x6d7045c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,bool,string)`.\n            mstore(0x00, 0x2ae408d4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,address)`.\n            mstore(0x00, 0x54a7a9a0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,bool)`.\n            mstore(0x00, 0x619e4d0e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,uint256)`.\n            mstore(0x00, 0x0bb00eab)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,uint256,string)`.\n            mstore(0x00, 0x7dd4d0e0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,address)`.\n            mstore(0x00, 0xf9ad2b89)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,bool)`.\n            mstore(0x00, 0xb857163a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,uint256)`.\n            mstore(0x00, 0xe3a9ca2f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,bool,string,string)`.\n            mstore(0x00, 0x6d1e8751)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,address)`.\n            mstore(0x00, 0x26f560a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,bool)`.\n            mstore(0x00, 0xb4c314ff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,uint256)`.\n            mstore(0x00, 0x1537dc87)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,address,string)`.\n            mstore(0x00, 0x1bb3b09a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,address)`.\n            mstore(0x00, 0x9acd3616)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,bool)`.\n            mstore(0x00, 0xceb5f4d7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,uint256)`.\n            mstore(0x00, 0x7f9bbca2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,bool,string)`.\n            mstore(0x00, 0x9143dbb1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,address)`.\n            mstore(0x00, 0x00dd87b9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,bool)`.\n            mstore(0x00, 0xbe984353)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,uint256)`.\n            mstore(0x00, 0x374bb4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,uint256,string)`.\n            mstore(0x00, 0x8e69fb5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,address)`.\n            mstore(0x00, 0xfedd1fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,bool)`.\n            mstore(0x00, 0xe5e70b2b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,uint256)`.\n            mstore(0x00, 0x6a1199e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,uint256,string,string)`.\n            mstore(0x00, 0xf5bc2249)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,address)`.\n            mstore(0x00, 0x2b2b18dc)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,bool)`.\n            mstore(0x00, 0x6dd434ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,uint256)`.\n            mstore(0x00, 0xa5cada94)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,address,string)`.\n            mstore(0x00, 0x12d6c788)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,address)`.\n            mstore(0x00, 0x538e06ab)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,bool)`.\n            mstore(0x00, 0xdc5e935b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,uint256)`.\n            mstore(0x00, 0x1606a393)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,bool,string)`.\n            mstore(0x00, 0x483d0416)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,address)`.\n            mstore(0x00, 0x1596a1ce)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,bool)`.\n            mstore(0x00, 0x6b0e5d53)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,uint256)`.\n            mstore(0x00, 0x28863fcb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,uint256,string)`.\n            mstore(0x00, 0x1ad96de6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,address)`.\n            mstore(0x00, 0x97d394d8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,bool)`.\n            mstore(0x00, 0x1e4b87e5)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,uint256)`.\n            mstore(0x00, 0x7be0c3eb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(bool,string,string,string)`.\n            mstore(0x00, 0x1762e32a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,address)`.\n            mstore(0x00, 0x2488b414)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,bool)`.\n            mstore(0x00, 0x091ffaf5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,uint256)`.\n            mstore(0x00, 0x736efbb6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,address,string)`.\n            mstore(0x00, 0x031c6f73)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,address)`.\n            mstore(0x00, 0xef72c513)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,bool)`.\n            mstore(0x00, 0xe351140f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,uint256)`.\n            mstore(0x00, 0x5abd992a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,bool,string)`.\n            mstore(0x00, 0x90fb06aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,address)`.\n            mstore(0x00, 0x15c127b5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,bool)`.\n            mstore(0x00, 0x5f743a7c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,uint256)`.\n            mstore(0x00, 0x0c9cd9c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,uint256,string)`.\n            mstore(0x00, 0xddb06521)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,address)`.\n            mstore(0x00, 0x9cba8fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,bool)`.\n            mstore(0x00, 0xcc32ab07)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,uint256)`.\n            mstore(0x00, 0x46826b5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,address,string,string)`.\n            mstore(0x00, 0x3e128ca3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,address)`.\n            mstore(0x00, 0xa1ef4cbb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,bool)`.\n            mstore(0x00, 0x454d54a5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,uint256)`.\n            mstore(0x00, 0x078287f5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,address,string)`.\n            mstore(0x00, 0xade052c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,address)`.\n            mstore(0x00, 0x69640b59)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,bool)`.\n            mstore(0x00, 0xb6f577a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,uint256)`.\n            mstore(0x00, 0x7464ce23)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,bool,string)`.\n            mstore(0x00, 0xdddb9561)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,address)`.\n            mstore(0x00, 0x88cb6041)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,bool)`.\n            mstore(0x00, 0x91a02e2a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,uint256)`.\n            mstore(0x00, 0xc6acc7a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,uint256,string)`.\n            mstore(0x00, 0xde03e774)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,address)`.\n            mstore(0x00, 0xef529018)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,bool)`.\n            mstore(0x00, 0xeb928d7f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,uint256)`.\n            mstore(0x00, 0x2c1d0746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,bool,string,string)`.\n            mstore(0x00, 0x68c8b8bd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,address)`.\n            mstore(0x00, 0x56a5d1b1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,bool)`.\n            mstore(0x00, 0x15cac476)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,uint256)`.\n            mstore(0x00, 0x88f6e4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,address,string)`.\n            mstore(0x00, 0x6cde40b8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,address)`.\n            mstore(0x00, 0x9a816a83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,bool)`.\n            mstore(0x00, 0xab085ae6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,uint256)`.\n            mstore(0x00, 0xeb7f6fd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,bool,string)`.\n            mstore(0x00, 0xa5b4fc99)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,address)`.\n            mstore(0x00, 0xfa8185af)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,bool)`.\n            mstore(0x00, 0xc598d185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\n            mstore(0x00, 0x193fb800)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,uint256,string)`.\n            mstore(0x00, 0x59cfcbe3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,address)`.\n            mstore(0x00, 0x42d21db7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,bool)`.\n            mstore(0x00, 0x7af6ab25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,uint256)`.\n            mstore(0x00, 0x5da297eb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,uint256,string,string)`.\n            mstore(0x00, 0x27d8afd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,address)`.\n            mstore(0x00, 0x6168ed61)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,bool)`.\n            mstore(0x00, 0x90c30a56)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,uint256)`.\n            mstore(0x00, 0xe8d3018d)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,address,string)`.\n            mstore(0x00, 0x9c3adfa1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,address)`.\n            mstore(0x00, 0xae2ec581)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,bool)`.\n            mstore(0x00, 0xba535d9c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,uint256)`.\n            mstore(0x00, 0xcf009880)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,bool,string)`.\n            mstore(0x00, 0xd2d423cd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,address)`.\n            mstore(0x00, 0x3b2279b4)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,bool)`.\n            mstore(0x00, 0x691a8f74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,uint256)`.\n            mstore(0x00, 0x82c25b74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,uint256,string)`.\n            mstore(0x00, 0xb7b914ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,address)`.\n            mstore(0x00, 0xd583c602)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,bool)`.\n            mstore(0x00, 0xb3a6b6bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,uint256)`.\n            mstore(0x00, 0xb028c9bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(uint256,string,string,string)`.\n            mstore(0x00, 0x21ad0683)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,address)`.\n            mstore(0x00, 0xed8f28f6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,bool)`.\n            mstore(0x00, 0xb59dbd60)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,uint256)`.\n            mstore(0x00, 0x8ef3f399)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,address,string)`.\n            mstore(0x00, 0x800a1c67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,address)`.\n            mstore(0x00, 0x223603bd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,bool)`.\n            mstore(0x00, 0x79884c2b)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,uint256)`.\n            mstore(0x00, 0x3e9f866a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,bool,string)`.\n            mstore(0x00, 0x0454c079)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,address)`.\n            mstore(0x00, 0x63fb8bc5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,bool)`.\n            mstore(0x00, 0xfc4845f0)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,uint256)`.\n            mstore(0x00, 0xf8f51b1e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,uint256,string)`.\n            mstore(0x00, 0x5a477632)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,address)`.\n            mstore(0x00, 0xaabc9a31)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,bool)`.\n            mstore(0x00, 0x5f15d28c)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,uint256)`.\n            mstore(0x00, 0x91d1112e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,address,string,string)`.\n            mstore(0x00, 0x245986f2)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,address)`.\n            mstore(0x00, 0x33e9dd1d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,bool)`.\n            mstore(0x00, 0x958c28c6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,uint256)`.\n            mstore(0x00, 0x5d08bb05)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,address,string)`.\n            mstore(0x00, 0x2d8e33a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,address)`.\n            mstore(0x00, 0x7190a529)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,bool)`.\n            mstore(0x00, 0x895af8c5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,uint256)`.\n            mstore(0x00, 0x8e3f78a9)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,bool,string)`.\n            mstore(0x00, 0x9d22d5dd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,address)`.\n            mstore(0x00, 0x935e09bf)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,bool)`.\n            mstore(0x00, 0x8af7cf8a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,uint256)`.\n            mstore(0x00, 0x64b5bb67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,uint256,string)`.\n            mstore(0x00, 0x742d6ee7)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,address)`.\n            mstore(0x00, 0xe0625b29)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,bool)`.\n            mstore(0x00, 0x3f8a701d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,uint256)`.\n            mstore(0x00, 0x24f91465)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,bool,string,string)`.\n            mstore(0x00, 0xa826caeb)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,address)`.\n            mstore(0x00, 0x5ea2b7ae)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,bool)`.\n            mstore(0x00, 0x82112a42)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,uint256)`.\n            mstore(0x00, 0x4f04fdc6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,address,string)`.\n            mstore(0x00, 0x9ffb2f93)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,address)`.\n            mstore(0x00, 0xe0e95b98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,bool)`.\n            mstore(0x00, 0x354c36d6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,uint256)`.\n            mstore(0x00, 0xe41b6f6f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,bool,string)`.\n            mstore(0x00, 0xabf73a98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,address)`.\n            mstore(0x00, 0xe21de278)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,bool)`.\n            mstore(0x00, 0x7626db92)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,uint256)`.\n            mstore(0x00, 0xa7a87853)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,uint256,string)`.\n            mstore(0x00, 0x854b3496)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,address)`.\n            mstore(0x00, 0x7c4632a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,bool)`.\n            mstore(0x00, 0x7d24491d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,uint256)`.\n            mstore(0x00, 0xc67ea9d1)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,uint256,string,string)`.\n            mstore(0x00, 0x5ab84e1f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,address)`.\n            mstore(0x00, 0x439c7bef)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,bool)`.\n            mstore(0x00, 0x5ccd4e37)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,uint256)`.\n            mstore(0x00, 0x7cc3c607)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,address,string)`.\n            mstore(0x00, 0xeb1bff80)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,address)`.\n            mstore(0x00, 0xc371c7db)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,bool)`.\n            mstore(0x00, 0x40785869)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,uint256)`.\n            mstore(0x00, 0xd6aefad2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,bool,string)`.\n            mstore(0x00, 0x5e84b0ea)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,address)`.\n            mstore(0x00, 0x1023f7b2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,bool)`.\n            mstore(0x00, 0xc3a8a654)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,uint256)`.\n            mstore(0x00, 0xf45d7d2c)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,uint256,string)`.\n            mstore(0x00, 0x5d1a971a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,address)`.\n            mstore(0x00, 0x6d572f44)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,bool)`.\n            mstore(0x00, 0x2c1754ed)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,uint256)`.\n            mstore(0x00, 0x8eafb02b)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        bytes32 m11;\n        bytes32 m12;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            m11 := mload(0x160)\n            m12 := mload(0x180)\n            // Selector of `log(string,string,string,string)`.\n            mstore(0x00, 0xde68f20a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, 0x140)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n            writeString(0x160, p3)\n        }\n        _sendLogPayload(0x1c, 0x184);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n            mstore(0x160, m11)\n            mstore(0x180, m12)\n        }\n    }\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IMessageLibManager } from \"./IMessageLibManager.sol\";\nimport { IMessagingComposer } from \"./IMessagingComposer.sol\";\nimport { IMessagingChannel } from \"./IMessagingChannel.sol\";\nimport { IMessagingContext } from \"./IMessagingContext.sol\";\n\nstruct MessagingParams {\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes message;\n    bytes options;\n    bool payInLzToken;\n}\n\nstruct MessagingReceipt {\n    bytes32 guid;\n    uint64 nonce;\n    MessagingFee fee;\n}\n\nstruct MessagingFee {\n    uint256 nativeFee;\n    uint256 lzTokenFee;\n}\n\nstruct Origin {\n    uint32 srcEid;\n    bytes32 sender;\n    uint64 nonce;\n}\n\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\n\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\n\n    event PacketDelivered(Origin origin, address receiver);\n\n    event LzReceiveAlert(\n        address indexed receiver,\n        address indexed executor,\n        Origin origin,\n        bytes32 guid,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    event LzTokenSet(address token);\n\n    event DelegateSet(address sender, address delegate);\n\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory);\n\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\n\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function lzReceive(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _guid,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\n\n    function setLzToken(address _lzToken) external;\n\n    function lzToken() external view returns (address);\n\n    function nativeToken() external view returns (address);\n\n    function setDelegate(address _delegate) external;\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"./ILayerZeroEndpointV2.sol\";\n\ninterface ILayerZeroReceiver {\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\n\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\n\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable;\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLib.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport { SetConfigParam } from \"./IMessageLibManager.sol\";\n\nenum MessageLibType {\n    Send,\n    Receive,\n    SendAndReceive\n}\n\ninterface IMessageLib is IERC165 {\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\n\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    // message libs of same major version are compatible\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\n\n    function messageLibType() external view returns (MessageLibType);\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nstruct SetConfigParam {\n    uint32 eid;\n    uint32 configType;\n    bytes config;\n}\n\ninterface IMessageLibManager {\n    struct Timeout {\n        address lib;\n        uint256 expiry;\n    }\n\n    event LibraryRegistered(address newLib);\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\n\n    function registerLibrary(address _lib) external;\n\n    function isRegisteredLibrary(address _lib) external view returns (bool);\n\n    function getRegisteredLibraries() external view returns (address[] memory);\n\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\n\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\n\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\n\n    /// ------------------- OApp interfaces -------------------\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\n\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\n\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\n\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\n\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\n\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\n\n    function getConfig(\n        address _oapp,\n        address _lib,\n        uint32 _eid,\n        uint32 _configType\n    ) external view returns (bytes memory config);\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingChannel {\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n\n    function eid() external view returns (uint32);\n\n    // this is an emergency function if a message cannot be verified for some reasons\n    // required to provide _nextNonce to avoid race condition\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\n\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\n\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\n\n    function inboundPayloadHash(\n        address _receiver,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint64 _nonce\n    ) external view returns (bytes32);\n\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingComposer {\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\n    event LzComposeAlert(\n        address indexed from,\n        address indexed to,\n        address indexed executor,\n        bytes32 guid,\n        uint16 index,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    function composeQueue(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index\n    ) external view returns (bytes32 messageHash);\n\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\n\n    function lzCompose(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingContext {\n    function isSendingMessage() external view returns (bool);\n\n    function getSendContext() external view returns (uint32 dstEid, address sender);\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ISendLib.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { MessagingFee } from \"./ILayerZeroEndpointV2.sol\";\nimport { IMessageLib } from \"./IMessageLib.sol\";\n\nstruct Packet {\n    uint64 nonce;\n    uint32 srcEid;\n    address sender;\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes32 guid;\n    bytes message;\n}\n\ninterface ISendLib is IMessageLib {\n    function send(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\n\n    function quote(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external view returns (MessagingFee memory);\n\n    function setTreasury(address _treasury) external;\n\n    function withdrawFee(address _to, uint256 _amount) external;\n\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/AddressCast.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary AddressCast {\n    error AddressCast_InvalidSizeForAddress();\n    error AddressCast_InvalidAddress();\n\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\n        result = bytes32(_addressBytes);\n        unchecked {\n            uint256 offset = 32 - _addressBytes.length;\n            result = result >> (offset * 8);\n        }\n    }\n\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\n        result = bytes32(uint256(uint160(_address)));\n    }\n\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\n        result = new bytes(_size);\n        unchecked {\n            uint256 offset = 256 - _size * 8;\n            assembly {\n                mstore(add(result, 32), shl(offset, _addressBytes32))\n            }\n        }\n    }\n\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\n        result = address(uint160(uint256(_addressBytes32)));\n    }\n\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\n        result = address(bytes20(_addressBytes));\n    }\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary CalldataBytesLib {\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\n        return uint8(_bytes[_start]);\n    }\n\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\n        unchecked {\n            uint256 end = _start + 2;\n            return uint16(bytes2(_bytes[_start:end]));\n        }\n    }\n\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\n        unchecked {\n            uint256 end = _start + 4;\n            return uint32(bytes4(_bytes[_start:end]));\n        }\n    }\n\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\n        unchecked {\n            uint256 end = _start + 8;\n            return uint64(bytes8(_bytes[_start:end]));\n        }\n    }\n\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\n        unchecked {\n            uint256 end = _start + 16;\n            return uint128(bytes16(_bytes[_start:end]));\n        }\n    }\n\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\n        unchecked {\n            uint256 end = _start + 32;\n            return uint256(bytes32(_bytes[_start:end]));\n        }\n    }\n\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\n        unchecked {\n            uint256 end = _start + 20;\n            return address(bytes20(_bytes[_start:end]));\n        }\n    }\n\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\n        unchecked {\n            uint256 end = _start + 32;\n            return bytes32(_bytes[_start:end]);\n        }\n    }\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/ExecutorOptions.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { CalldataBytesLib } from \"../../libs/CalldataBytesLib.sol\";\n\nlibrary ExecutorOptions {\n    using CalldataBytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 1;\n\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\n\n    error Executor_InvalidLzReceiveOption();\n    error Executor_InvalidNativeDropOption();\n    error Executor_InvalidLzComposeOption();\n\n    /// @dev decode the next executor option from the options starting from the specified cursor\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\n    ///        executor_option = [option_size][option_type][option]\n    ///        option_size = len(option_type) + len(option)\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @param _cursor the cursor to start decoding from\n    /// @return optionType the type of the option\n    /// @return option the option of the executor\n    /// @return cursor the cursor to start decoding the next executor option\n    function nextExecutorOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor);\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 1; // skip option type\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\n        gas = _option.toU128(0);\n        value = _option.length == 32 ? _option.toU128(16) : 0;\n    }\n\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\n        amount = _option.toU128(0);\n        receiver = _option.toB32(16);\n    }\n\n    function decodeLzComposeOption(\n        bytes calldata _option\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\n        index = _option.toU16(0);\n        gas = _option.toU128(2);\n        value = _option.length == 34 ? _option.toU128(18) : 0;\n    }\n\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\n    }\n\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\n        return abi.encodePacked(_amount, _receiver);\n    }\n\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\n    }\n}\n"},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/PacketV1Codec.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Packet } from \"../../interfaces/ISendLib.sol\";\nimport { AddressCast } from \"../../libs/AddressCast.sol\";\n\nlibrary PacketV1Codec {\n    using AddressCast for address;\n    using AddressCast for bytes32;\n\n    uint8 internal constant PACKET_VERSION = 1;\n\n    // header (version + nonce + path)\n    // version\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\n    //    nonce\n    uint256 private constant NONCE_OFFSET = 1;\n    //    path\n    uint256 private constant SRC_EID_OFFSET = 9;\n    uint256 private constant SENDER_OFFSET = 13;\n    uint256 private constant DST_EID_OFFSET = 45;\n    uint256 private constant RECEIVER_OFFSET = 49;\n    // payload (guid + message)\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\n    uint256 private constant MESSAGE_OFFSET = 113;\n\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\n        encodedPacket = abi.encodePacked(\n            PACKET_VERSION,\n            _packet.nonce,\n            _packet.srcEid,\n            _packet.sender.toBytes32(),\n            _packet.dstEid,\n            _packet.receiver,\n            _packet.guid,\n            _packet.message\n        );\n    }\n\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                PACKET_VERSION,\n                _packet.nonce,\n                _packet.srcEid,\n                _packet.sender.toBytes32(),\n                _packet.dstEid,\n                _packet.receiver\n            );\n    }\n\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\n        return abi.encodePacked(_packet.guid, _packet.message);\n    }\n\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return _packet[0:GUID_OFFSET];\n    }\n\n    function version(bytes calldata _packet) internal pure returns (uint8) {\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\n    }\n\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\n    }\n\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\n    }\n\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\n        return sender(_packet).toAddress();\n    }\n\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\n    }\n\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\n    }\n\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\n        return receiver(_packet).toAddress();\n    }\n\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\n    }\n\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[MESSAGE_OFFSET:]);\n    }\n\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[GUID_OFFSET:]);\n    }\n\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\n        return keccak256(payload(_packet));\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"},"lib/solidity-bytes-utils/contracts/BytesLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let endMinusWord := add(_preBytes, length)\n                let mc := add(_preBytes, 0x20)\n                let cc := add(_postBytes, 0x20)\n\n                for {\n                // the next line is the loop condition:\n                // while(uint256(mc < endWord) + cb == 2)\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n\n                // Only if still successful\n                // For <1 word tail bytes\n                if gt(success, 0) {\n                    // Get the remainder of length/32\n                    // length % 32 = AND(length, 32 - 1)\n                    let numTailBytes := and(length, 0x1f)\n                    let mcRem := mload(mc)\n                    let ccRem := mload(cc)\n                    for {\n                        let i := 0\n                    // the next line is the loop condition:\n                    // while(uint256(i < numTailBytes) + cb == 2)\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\n                        i := add(i, 1)\n                    } {\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\n                            // unsuccess:\n                            success := 0\n                            cb := 0\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"},"script/DeployHomeChain.s.sol":{"content":"//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {console} from \"forge-std/Test.sol\";\nimport {HelperConfig} from \"./HelperConfig.s.sol\";\nimport {AccessManager} from \"../src/AccessManager.sol\";\nimport {PriceFeed} from \"../src/priceFeed.sol\";\nimport {Rupio} from \"../src/Rupio.sol\";\nimport {CollateralSafekeep} from \"../src/CollateralSafekeep.sol\";\nimport {RupioSavingsContract} from \"../src/RupioSavingsContract.sol\";\nimport {MockV3Aggregator} from \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n\ncontract DeployHomeChain is Script {\n    HelperConfig helperconfig;\n    AccessManager accessmanager;\n    PriceFeed pricefeed;\n    Rupio rupio;\n    CollateralSafekeep csk;\n    RupioSavingsContract isr;\n\n    function run() external {\n        helperconfig = new HelperConfig();\n        vm.startBroadcast();\n        MockV3Aggregator inrToUsdMock = new MockV3Aggregator(\n            uint8(8),\n            int256(1200000)\n        );\n        accessmanager = new AccessManager();\n        pricefeed = new PriceFeed(\n            address(inrToUsdMock),\n            helperconfig.getBaseSepoliaConfig().ethToUsdFeed\n        );\n        rupio = new Rupio(\n            helperconfig.getBaseSepoliaConfig().lzEndpoint,\n            address(accessmanager),\n            helperconfig.getBaseSepoliaConfig().chainEid\n        );\n        csk = new CollateralSafekeep(\n            helperconfig.getBaseSepoliaConfig().cip,\n            helperconfig.getBaseSepoliaConfig().baseRiskRate,\n            helperconfig.getBaseSepoliaConfig().riskPremiumRate,\n            address(accessmanager),\n            address(rupio),\n            address(pricefeed)\n        );\n        vm.stopBroadcast();\n        console.log(\"price feed mock\", address(rupio));\n        console.log(\"access manager\", address(accessmanager));\n        console.log(\"rupio\", address(rupio));\n        console.log(\"price feed\", address(pricefeed));\n        console.log(\"collateral safe keep\", address(csk));\n    }\n}\n"},"script/HelperConfig.s.sol":{"content":"//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {console} from \"forge-std/Test.sol\";\nimport {MockV3Aggregator} from \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n\ncontract HelperConfig is Script {\n    uint256 BASE_RISK_RATE = 150;\n    uint256 RISK_PREMIUM_RATE = 130;\n    uint256 CIP = 150;\n\n    struct NetworkConfig {\n        address inrToUsdFeed;\n        address ethToUsdFeed;\n        uint256 cip;\n        uint256 baseRiskRate;\n        uint256 riskPremiumRate;\n        uint32 chainEid;\n        address lzEndpoint;\n    }\n\n    NetworkConfig public ActiveConfig;\n\n    constructor() {\n        // if (block.chainid == 10) {\n        //     ActiveConfig = getOptimismMainnetConfig();\n        // } else {\n        //     ActiveConfig = getAnvilConfig();\n        // }\n    }\n\n    function getOptimismMainnetConfig()\n        public\n        view\n        returns (NetworkConfig memory)\n    {\n        console.log(\"Wotking on optimism mainnet now....\");\n        NetworkConfig memory mainnetConfig = NetworkConfig({\n            inrToUsdFeed: 0x5535e67d8f99c8ebe961E1Fc1F6DDAE96FEC82C9,\n            ethToUsdFeed: 0x13e3Ee699D1909E989722E753853AE30b17e08c5,\n            baseRiskRate: BASE_RISK_RATE,\n            riskPremiumRate: RISK_PREMIUM_RATE,\n            cip: CIP,\n            chainEid: 0,\n            lzEndpoint: address(0)\n        });\n        return mainnetConfig;\n    }\n\n    function getOptimismSepoliaConfig()\n        public\n        view\n        returns (NetworkConfig memory)\n    {\n        console.log(\"Working on optimism sepolia now....\");\n        NetworkConfig memory sepoliaConfig = NetworkConfig({\n            inrToUsdFeed: address(0),\n            ethToUsdFeed: 0x61Ec26aA57019C486B10502285c5A3D4A4750AD7,\n            baseRiskRate: BASE_RISK_RATE,\n            riskPremiumRate: RISK_PREMIUM_RATE,\n            cip: CIP,\n            chainEid: uint32(40232),\n            lzEndpoint: 0x6EDCE65403992e310A62460808c4b910D972f10f\n        });\n        return sepoliaConfig;\n    }\n\n    function getBaseSepoliaConfig() public view returns (NetworkConfig memory) {\n        console.log(\"Working on base sepolia now....\");\n        NetworkConfig memory baseConfig = NetworkConfig({\n            inrToUsdFeed: address(0),\n            ethToUsdFeed: 0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1,\n            baseRiskRate: BASE_RISK_RATE,\n            riskPremiumRate: RISK_PREMIUM_RATE,\n            cip: CIP,\n            chainEid: uint32(40245),\n            lzEndpoint: 0x6EDCE65403992e310A62460808c4b910D972f10f\n        });\n        return baseConfig;\n    }\n\n    function getEthSepoliaConfig() public view returns (NetworkConfig memory) {\n        console.log(\"Working on eth sepolia now....\");\n        NetworkConfig memory ethConfig = NetworkConfig({\n            inrToUsdFeed: address(0),\n            ethToUsdFeed: 0x694AA1769357215DE4FAC081bf1f309aDC325306,\n            baseRiskRate: BASE_RISK_RATE,\n            riskPremiumRate: RISK_PREMIUM_RATE,\n            cip: CIP,\n            chainEid: uint32(40161),\n            lzEndpoint: 0x6EDCE65403992e310A62460808c4b910D972f10f\n        });\n        return ethConfig;\n    }\n\n    function getAnvilConfig() public returns (NetworkConfig memory) {\n        console.log(\"local network detected, deploying mocks!!\");\n        MockV3Aggregator inrToUsdMock = new MockV3Aggregator(\n            uint8(8),\n            int256(1200000)\n        );\n        MockV3Aggregator ethToUsdMock = new MockV3Aggregator(\n            uint8(8),\n            int256(325834000000)\n        );\n        NetworkConfig memory anvilConfig = NetworkConfig({\n            inrToUsdFeed: address(inrToUsdMock),\n            ethToUsdFeed: address(ethToUsdMock),\n            baseRiskRate: BASE_RISK_RATE,\n            riskPremiumRate: RISK_PREMIUM_RATE,\n            cip: CIP,\n            chainEid: 123,\n            lzEndpoint: address(123)\n        });\n        return anvilConfig;\n    }\n\n    function getActiveConfig() public view returns (NetworkConfig memory) {\n        return ActiveConfig;\n    }\n}\n"},"src/AccessManager.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @title AccessManager.\n * @author Jaskaran Singh.\n * @notice Contract for managing access to the protocol.\n * @notice Integrated with openzeppelin access control to manage access between different contracts of this protocol.\n */\ncontract AccessManager is AccessControl {\n    /**\n     * @notice Owner Role Identifier.\n     */\n    bytes32 public constant OWNER = keccak256(\"OWNER\");\n    /**\n     * @notice Moderator Role Identifier.\n     */\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n    /**\n     * @notice Minter Role Identifier.\n     */\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @notice Constructor.\n     * @dev Grants moderator, minter and owner role to the deployer.\n     * @dev Sets Owner as the admin for Mod role and for Minter, Mod role.\n     */\n    constructor() {\n        _setRoleAdmin(MODERATOR_ROLE, OWNER);\n        _setRoleAdmin(MINTER_ROLE, MODERATOR_ROLE);\n        _grantRole(OWNER, msg.sender);\n        _grantRole(MODERATOR_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n    }\n\n    /**\n     * @notice Modifier to check if the msg.sender has Moderator role.\n     */\n    modifier onlyModerator() {\n        require(\n            hasRole(MODERATOR_ROLE, msg.sender),\n            \"Must have MODERATOR_ROLE\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Grant moderator role to an account.\n     * @notice Only callable by another moderator.\n     * @param account Address of the account\n     */\n    function grantModeratorRole(address account) public onlyModerator {\n        grantRole(MODERATOR_ROLE, account);\n    }\n\n    /**\n     * @notice Grant minter role to an account.\n     * @notice Only callable by another moderator.\n     * @param account Address of the account.\n     */\n    function grantMinterRole(address account) public onlyModerator {\n        grantRole(MINTER_ROLE, account);\n    }\n}\n"},"src/CollateralSafekeep.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AccessManager} from \"./AccessManager.sol\";\nimport {PriceFeed} from \"./PriceFeed.sol\";\nimport {Rupio} from \"./Rupio.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\nimport {SendParam, OFTReceipt} from \"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\";\nimport {OptionsBuilder} from \"./Libraries/OptionsBuilder.sol\";\nimport {MessagingFee} from \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\n\n/**\n * @title CollateralSafekeep.\n * @author Jaskaran Singh.\n * @notice An algorithmic stablecoin just like DAI, but pegged to INR.\n * @notice This contract integrates with chainlink pricefeeds and automation, to fetch INR conversion\n * rates and to automate the process of checking the vault health for all users.\n * @notice This contract is integrated with RupioDao access manager to manage access.\n * @notice This contract is integrated with Rupio token contract to mint and burn tokens.\n * @notice This contract is integrated with RupioDao price feed to fetch INR conversion rates.\n * @dev This contract works in RupioDao core, integrating with RupioDao price feed, access manager and token contract.\n */\ncontract CollateralSafekeep is ReentrancyGuard, AutomationCompatibleInterface {\n    using OptionsBuilder for bytes;\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n    uint256 public immutable CRP;\n    uint256 public immutable BASE_RISK_RATE;\n    uint256 public immutable RISK_PREMIUM_RATE;\n    uint256 private lastTimeStamp;\n    int256 internal currentCollateralBalance; // Total collateral balance of the whole contract in inr.\n    uint256 internal VAULT_ID;\n    AccessManager internal accessManager;\n    Rupio internal token;\n    PriceFeed internal priceContract;\n\n    /**\n     * @notice A struct representing vault details for a user.\n     */\n    struct vault {\n        uint256 vaultId;\n        address userAddress;\n        uint256 balance; //In ETH.\n        uint256 balanceInINR; //In inr.\n        uint256 rupioIssued;\n        uint256 vaultHealth; //Vault health should be greater than 150 to avoid liquidation.\n    }\n\n    /**\n     * @notice An array of user's vaults.\n     */\n    vault[] internal userVaults;\n\n    event thisIsARiskyVault(\n        uint256 vaultId,\n        address userAddress,\n        uint256 balance,\n        uint256 balanceInINR,\n        uint256 rupioIssued,\n        uint256 vaultHealth\n    );\n\n    /**\n     * @notice Mapping of user's address to their vault index.\n     */\n    mapping(address => uint256) public userIndexes;\n\n    /**\n     * @notice User should have a vault.\n     */\n    modifier yesVault() {\n        require(\n            userIndexes[msg.sender] > 0,\n            \"You dont have a Vault, create a vault first!\"\n        );\n        _;\n    }\n\n    /**\n     * @notice User should not have a vault.\n     */\n    modifier noVault() {\n        require(userIndexes[msg.sender] == 0, \"You already have a vault\");\n        _;\n    }\n\n    /**\n     * @notice Msg.sender should be a moderator.\n     */\n    modifier onlyModerator() {\n        require(\n            accessManager.hasRole(MODERATOR_ROLE, msg.sender),\n            \"Must have MODERATOR_ROLE\"\n        );\n        _;\n    }\n\n    error CollateralSafekeep__UpkeepNotNeeded();\n    error CollateralSafekeep__UserInDebt();\n    error CollateralSafeKeep__ETHAmountMustBeGreaterThanZero();\n\n    /**\n     * @param _CRP Initial collateral to Rupio token percentage (threshold).\n     * @param _BASE_RISK_RATE Base rate debt on a vault.\n     * @param _RISK_PREMIUM_RATE Currently only for ethereum, the rate associated with debt in a vault, with increasing time.\n     * @param _accessManager Address of RupioDao AccessManager.\n     * @param _rupio Address of Rupio token contract.\n     * @param _priceContract Address of RupioDao PriceFeed.\n     */\n    constructor(\n        // uint256 _timeInterval,\n        uint256 _CRP,\n        uint256 _BASE_RISK_RATE,\n        uint256 _RISK_PREMIUM_RATE,\n        address _accessManager,\n        address _rupio,\n        address _priceContract\n    ) {\n        VAULT_ID = 1;\n        accessManager = AccessManager(_accessManager);\n        token = Rupio(_rupio);\n        priceContract = PriceFeed(_priceContract);\n        lastTimeStamp = block.timestamp;\n        /* timeInterval= timeInterval;*/\n        CRP = _CRP;\n        BASE_RISK_RATE = _BASE_RISK_RATE;\n        RISK_PREMIUM_RATE = _RISK_PREMIUM_RATE;\n        //Push an initial vault to the userVaults array.\n        vault memory initialVault = vault({\n            rupioIssued: 0,\n            userAddress: address(0),\n            vaultId: 0,\n            balance: 0,\n            balanceInINR: 0,\n            vaultHealth: 0\n        });\n        userVaults.push(initialVault);\n    }\n\n    /**\n     * @notice Create a new vault or add funds in an existing vault.\n     * @notice Public function.\n     * @notice User needs to send a msg.value with the functions, in ETH currently.\n     * @dev Msg.value must be in native decimals, in this case 1e18.\n     * @return vaultId Vault id of the user.\n     */\n    function createOrUpdateVault() public payable returns (uint256 vaultId) {\n        require(\n            msg.value > 0,\n            CollateralSafeKeep__ETHAmountMustBeGreaterThanZero()\n        );\n        //If the user has no vault previously.\n        if (userIndexes[msg.sender] == 0) {\n            vault memory newVault;\n            newVault.balance = msg.value;\n            newVault.userAddress = msg.sender;\n            newVault.vaultId = VAULT_ID;\n            newVault.rupioIssued = 0; //Initially it will be 0 for a new vault\n            newVault.vaultHealth = _getAmountETHToINR(msg.value) * 100; //Full health for new vault\n            newVault.balanceInINR = _getAmountETHToINR(msg.value);\n            //Push the new vault to the userVaults array.\n            userVaults.push(newVault);\n            //Update the mapping of address to vault id.\n            userIndexes[msg.sender] = VAULT_ID;\n            //Increment global vault id counter.\n            VAULT_ID = VAULT_ID + 1;\n        }\n        //If the user has a vault previously.\n        else {\n            //Update user balance in ETH and INR.\n            userVaults[userIndexes[msg.sender]].balance += msg.value;\n            userVaults[userIndexes[msg.sender]]\n                .balanceInINR = _getAmountETHToINR(\n                userVaults[userIndexes[msg.sender]].balance\n            );\n            //Update user vault health.\n            userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n                msg.sender\n            );\n        }\n        return userVaults[userIndexes[msg.sender]].vaultId;\n    }\n\n    /**\n     * @notice Mint rupio based on collateral provided.\n     * @notice MINTS ON HOME-CHAIN CURRENTLY BASE SEPOLIA.\n     * @notice Public function.\n     * @notice User needs to have a vault first.\n     * @notice One rupio is issued for every ruppee of collateral(in ETH, converted to INR).\n     * @notice User cannot mint if vault health is lower than 150 percent of CRP.\n     * @param amount Amount of rupio to be minted, in no decimals, example 50, should be less than CRP cross.\n     * @return max Max amount of rupio that can be minted.\n     */\n    function mintRupioOnHomeChain(\n        uint256 amount\n    ) public yesVault returns (uint256) {\n        require(\n            amount > 0,\n            CollateralSafeKeep__ETHAmountMustBeGreaterThanZero()\n        );\n        //Update vault health first.\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n        require(\n            userVaults[userIndexes[msg.sender]].vaultHealth > CRP,\n            CollateralSafekeep__UserInDebt()\n        );\n        //Calculate the maximum number of rupio tokens that a user can mint based on vault health.\n        uint256 max = _getMaxMintableRupio(msg.sender);\n        require(amount < max, \"enter amount less than CRP cross\");\n        //Mint rupio tokens to the user.\n        token.mint(msg.sender, amount);\n\n        //Update user's rupio issued and vault health in array UserVaults.\n        userVaults[userIndexes[msg.sender]].rupioIssued += amount;\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n        return max;\n    }\n\n    function mintRupioOnDifferentChain(\n        uint256 amount,\n        uint32 chainEid\n    ) public payable yesVault {\n        require(\n            amount > 0,\n            CollateralSafeKeep__ETHAmountMustBeGreaterThanZero()\n        );\n        //Update vault health first.\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n        require(\n            userVaults[userIndexes[msg.sender]].vaultHealth > CRP,\n            CollateralSafekeep__UserInDebt()\n        );\n        //Calculate the maximum number of rupio tokens that a user can mint based on vault health.\n        uint256 max = _getMaxMintableRupio(msg.sender);\n        require(amount < max, \"enter amount less than CRP cross\");\n        //Configure LZ options.\n        bytes memory _extraOptions = OptionsBuilder\n            .newOptions()\n            .addExecutorLzReceiveOption(65000, 0);\n        SendParam memory sendParam = SendParam(\n            chainEid, // You can also make this dynamic if needed\n            addressToBytes32(msg.sender),\n            amount,\n            (amount * 9) / 10,\n            _extraOptions,\n            \"\",\n            \"\"\n        );\n        //Quote fee.\n        MessagingFee memory fee = token.quoteSend(sendParam, false);\n        require(msg.value >= fee.nativeFee, \"insufficient funds\");\n        token.mint(address(this), amount);\n\n        //Transfer rupio to caller address on destination chain.\n        token.send{value: fee.nativeFee}(sendParam, fee, msg.sender);\n        //Update user's rupio issued and vault health in array UserVaults.\n        userVaults[userIndexes[msg.sender]].rupioIssued += amount;\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice User can withdraw if any excess collateral than 150 percent of rupio issued.\n     * @notice Public function.\n     * @param amount Amount of ETH to withdraw from vault.\n     */\n    function withdrawFromVault(uint256 amount) public payable yesVault {\n        //Update vault health first.\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n        require(\n            amount > 0,\n            CollateralSafeKeep__ETHAmountMustBeGreaterThanZero()\n        );\n        require(\n            userVaults[userIndexes[msg.sender]].balance >= amount,\n            \"insufficient balance in vault\"\n        );\n        require(\n            userVaults[userIndexes[msg.sender]].vaultHealth > 150,\n            CollateralSafekeep__UserInDebt()\n        );\n        //Calculate the maximum amount of ETH that the user can withdraw from vault.\n        uint256 max = _getMaxWithdrawableCollateral(msg.sender);\n        require(amount <= max, CollateralSafekeep__UserInDebt());\n        //Transfer the amount ETH into calling user's address.\n        payable(msg.sender).transfer(amount);\n        //Update balance in ETH and INR, and vault health in array UserVaults.\n        userVaults[userIndexes[msg.sender]].balance -= amount;\n        userVaults[userIndexes[msg.sender]].balanceInINR = _getAmountETHToINR(\n            userVaults[userIndexes[msg.sender]].balance\n        );\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Burn Rupio and relieve collateral in ETH from the vault.\n     * @notice Public function.\n     * @notice User must have a vault first.\n     * @param amount Amount of rupio to burn.\n     */\n    function burnRupioAndRelieveCollateral(uint256 amount) public yesVault {\n        //Update vault health first.\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n        require(\n            userVaults[userIndexes[msg.sender]].rupioIssued > 0,\n            \"No rupio issued yet.\"\n        );\n        require(\n            userVaults[userIndexes[msg.sender]].rupioIssued >= amount,\n            \"Less amount of rupio issued\"\n        );\n\n        //Burn rupio tokens from user's vault.\n        token.burnFrom(msg.sender, amount);\n\n        //Update user's rupio issued and vault health in array UserVaults.\n        userVaults[userIndexes[msg.sender]].rupioIssued -= amount;\n        userVaults[userIndexes[msg.sender]].vaultHealth = _getVaultHealth(\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Chainlink automation function to check if the conditions are met to perform upkeep.\n     * @notice Public function.\n     * @return upkeepNeeded Bool indicating if upkeep is needed, based on specific conditions.\n     */\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    )\n        external\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory /* performData */)\n    {\n        upkeepNeeded = true;\n    }\n\n    /**\n     * @notice Chainlink automation function to perform upkeep.\n     * @notice Public function.\n     * @dev In this case, it is scanning all the vaults in database and updating vault health for them.\n     * @dev Needed because we cannot tranditionally loop over all the vaults to update vault health.\n     */\n    function performUpkeep(bytes calldata /* performData */) external override {\n        scanVaults();\n    }\n\n    /**\n     * @notice Scans all the vaults in database and updates vault health for them.\n     * @notice Public function.\n     * @dev Needed because we cannot tranditionally loop over all the vaults to update vault health due to gas costs.\n     * @dev Called by chainlink automation or can be called by moderators or good keepers of this protocol.\n     */\n    function scanVaults() public {\n        //Get userVaults array length.\n        uint256 userVaultArrayLength = userVaults.length;\n        //Start a for loop to update INR balances and vault health.\n        for (uint256 i = 0; i < userVaultArrayLength; i++) {\n            userVaults[i].balanceInINR = getUserBalanceInINR(\n                userVaults[i].userAddress\n            );\n            userVaults[i].vaultHealth = getVaultHealth(\n                userVaults[i].userAddress\n            );\n            bool yesOrNo = _getIsLiquidationCondition(\n                userVaults[i].userAddress\n            );\n            if (yesOrNo = true) {\n                liquidateVault(userVaults[i].userAddress);\n                emit thisIsARiskyVault(\n                    i,\n                    userVaults[i].userAddress,\n                    userVaults[i].balance,\n                    userVaults[i].balanceInINR,\n                    userVaults[i].rupioIssued,\n                    userVaults[i].vaultHealth\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Liquidates vaults that get too risky.\n     * @dev Moderator only funciton.\n     */\n    function liquidateVault(address _vaultAddress) public onlyModerator {}\n\n    /**\n     * @notice Public getter function.\n     * @return uint256 Collateral to rupio percentage threshold defined by the DAO.\n     */\n    function getCRP() public view returns (uint256) {\n        return CRP;\n    }\n\n    /**\n     * @notice Public getter function.\n     * @return uint256 Base Risk Rate on all collateral types defined by the DAO.\n     */\n    function getBASE_RISK_RATE() public view returns (uint256) {\n        return BASE_RISK_RATE;\n    }\n\n    /**\n     * @notice Public getter function.\n     * @return uint256 Risk Premium Rate on specific collateral type defined by the DAO.\n     */\n    function getRISK_PREMIUM_RATE() public view returns (uint256) {\n        return RISK_PREMIUM_RATE;\n    }\n\n    /**\n     * @notice Public getter function.\n     * @notice User must have a vault first.\n     * @return vault Struct indicating user's vault details.\n     */\n    function getVaultDetailsForTheUser()\n        public\n        view\n        yesVault\n        returns (vault memory)\n    {\n        return userVaults[userIndexes[msg.sender]];\n    }\n\n    /**\n     * @notice Calculates the vault health of an address based on current collateral and rupio issued.\n     * @notice Moderator only getter function.\n     * @param _user Address of user.\n     * @return uint256 Vault health.\n     */\n    function getVaultHealth(\n        address _user /*onlyModerator*/\n    ) public view returns (uint256) {\n        return _getVaultHealth(_user);\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @param _address Address of the user\n     * @return uint256 Collateral balance in ETH in native decimals, in this case 1e18.\n     */\n    function getUserCollateralBalance(\n        address _address /*onlyModerator*/\n    ) public view returns (uint256) {\n        return userVaults[userIndexes[_address]].balance;\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @dev Can be used to get total number of vaults in the system.\n     * @dev Vault Id starts from 1.\n     * @return uint256 Current global counter of vault ids.\n     */\n    function getCurrentVaultId()\n        public\n        view\n        returns (/*onlyModerator*/ uint256)\n    {\n        return VAULT_ID;\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @return int256 Total collateral balance of the whole contract in ETH in native decimals, in this case 1e18\n     */\n    function getTotalCollateralPrice()\n        public\n        view\n        returns (\n            /*onlyModerator*/\n            int256\n        )\n    {\n        return currentCollateralBalance;\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @return vault[] Total database of vaults in array of structs userVaults.\n     */\n    function getTotalVaultDetails()\n        public\n        view\n        returns (\n            /*onlyModerator*/\n            vault[] memory\n        )\n    {\n        return userVaults;\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @param _address Address of the user.\n     * @return uint256 User's current collateral balance in INR in native decimals, in this case 1e8.\n     */\n    function getUserBalanceInINR(\n        address _address /*onlyModerator*/\n    ) public view returns (uint256) {\n        uint256 bal = userVaults[userIndexes[_address]].balance; // In 18 decimals cuz ETH.\n\n        return _getAmountETHToINR(bal);\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @param amountINR Amount of INR to be converted to ETH, in native decimals in this case 1e8.\n     * @return uint256 Amount of ETH converted to INR, in native decimals in this case 1e18.\n     */\n    function getAmountINRToETH(\n        uint256 amountINR /*onlyModerator*/\n    ) public view returns (uint256) {\n        return _getAmountINRToETH(amountINR);\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @param user Address of the user.\n     * @return uint256 Max amount of collateral that can be withdrawn by a user at current state in native decimals, in this case 1e18.\n     */\n    function getMaxWithdrawableCollateral(\n        address user /*onlyModerator*/\n    ) public view returns (uint256) {\n        return _getMaxWithdrawableCollateral(user);\n    }\n\n    /**\n     * @notice Moderator only getter function.\n     * @param user Address of the user.\n     * @return uint256 Maximum amount of rupio that can be minted by a user at current state in no decimals.\n     */\n    function getMaxMintableRupio(\n        address user /*onlyModerator*/\n    ) public view returns (uint256) {\n        return _getMaxMintableRupio(user);\n    }\n\n    /**\n     * @notice Internal getter function.\n     * @param _user Address of the user.\n     * @return uint256 Vault health of the user at current state.\n     */\n    function _getVaultHealth(address _user) internal view returns (uint256) {\n        uint256 collateral = userVaults[userIndexes[_user]].balanceInINR; //In INR, 8 decimals.\n        uint256 rupioIssued = userVaults[userIndexes[_user]].rupioIssued; //In uint256 token quantity,can say 1 token = 1 inr.\n        if (rupioIssued == 0) {\n            return collateral * 100;\n        } else {\n            uint256 _vaultHealth = ((collateral / (rupioIssued)) * 100);\n            return _vaultHealth;\n        }\n    }\n\n    /**\n     * @notice Internal getter function.\n     * @dev Liquidation condition is met when vault health is less than CRP.\n     * @param user Address of the user.\n     * @return bool Is liquidation condition met for the user.\n     */\n    function _getIsLiquidationCondition(\n        address user\n    ) internal view returns (bool) {\n        uint256 current = getVaultHealth(user);\n        if (current > CRP) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @notice Internal getter function.\n     * @param amountETH Amount of ETH to be converted to INR, in native decimals in this case 1e18.\n     * @return uint256 Amount ETH converted to INR, in native decimals in this case 1e8.\n     */\n    function _getAmountETHToINR(\n        uint256 amountETH\n    ) internal view returns (uint256) {\n        int256 a = priceContract.ETHtoUSD(); // in 8 decimals cuz usd\n\n        int256 b = priceContract.INRtoUSD(); // in 8 decimals cuz usd\n        uint256 c = (amountETH * uint256(a)) / uint256(b);\n\n        uint256 d = (c / 1e10);\n        return d;\n    }\n\n    /**\n     * @notice Internal getter function.\n     * @param amountINR Amount of INR to be converted to ETH, in native decimals in this case 1e8.\n     * @return uint256 Amount INR converted to ETH, in native decimals in this case 1e18.\n     */\n    function _getAmountINRToETH(\n        uint256 amountINR\n    ) internal view returns (uint256) {\n        int256 a = priceContract.ETHtoUSD();\n        int256 b = priceContract.INRtoUSD();\n        uint256 c = (uint256(b) * amountINR) / uint256(a);\n        uint256 d = c * 1e10;\n        return d;\n    }\n\n    /**\n     * @notice Internal getter function.\n     * @param user Address of the user.\n     * @return uint256 Maximum amount of rupio that can be minted by a user at current state in no decimals.\n     */\n    function _getMaxMintableRupio(\n        address user\n    ) internal view returns (uint256) {\n        if (userVaults[userIndexes[user]].vaultHealth < 150) {\n            return 0;\n        }\n        uint256 bal = userVaults[userIndexes[user]].balance; //amount, can say 1 token = 1 inr\n        uint256 _getUserBalanceInINR = _getAmountETHToINR(bal); // in 8 decimals\n        uint256 rupioIssued = userVaults[userIndexes[user]].rupioIssued; //amount, can say 1 token = 1 inr\n        uint256 totalAval = (_getUserBalanceInINR * 2) / (3);\n        uint256 grand = totalAval - rupioIssued;\n        return grand;\n    }\n\n    /**\n     * @notice Internal getter function.\n     * @param user Address of the user.\n     * @return uint256 Max amount of collateral that can be withdrawn by a user at current state in native decimals, in this case 1e18.\n     */\n    function _getMaxWithdrawableCollateral(\n        address user\n    ) internal view returns (uint256) {\n        uint256 collateral = userVaults[userIndexes[user]].balanceInINR;\n        uint256 rupioIssued = userVaults[userIndexes[user]].rupioIssued;\n        require(\n            userVaults[userIndexes[user]].rupioIssued <\n                userVaults[userIndexes[user]].balanceInINR,\n            \"you are in debt!\"\n        );\n        require(\n            userVaults[userIndexes[user]].vaultHealth > CRP,\n            \"you are in debt\"\n        );\n        if (rupioIssued == 0) {\n            return _getAmountINRToETH(collateral);\n        } else {\n            uint256 a = (rupioIssued * 3) / 2;\n            uint256 c = collateral - a;\n\n            uint256 d = _getAmountINRToETH(c);\n            return d;\n        }\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n}\n"},"src/Libraries/OptionsBuilder.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {BytesLib} from \"@solidity-bytes-utils/contracts/BytesLib.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {ExecutorOptions} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\";\n\n/**\n * @title OptionsBuilder\n * @dev Library for building and encoding various message options.\n */\nlibrary OptionsBuilder {\n    using SafeCast for uint256;\n    using BytesLib for bytes;\n\n    // Constants for options types\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\n    uint16 internal constant TYPE_3 = 3;\n\n    // Custom error message\n    error InvalidSize(uint256 max, uint256 actual);\n    error InvalidOptionType(uint16 optionType);\n\n    // Modifier to ensure only options of type 3 are used\n    modifier onlyType3(bytes memory _options) {\n        if (_options.toUint16(0) != TYPE_3) {\n            revert InvalidOptionType(_options.toUint16(0));\n        }\n        _;\n    }\n\n    /**\n     * @dev Creates a new options container with type 3.\n     * @return options The newly created options container.\n     */\n    function newOptions() internal pure returns (bytes memory) {\n        return abi.encodePacked(TYPE_3);\n    }\n\n    /**\n     * @dev Adds an executor LZ receive option to the existing options.\n     * @param _options The existing options container.\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\n     * @return options The updated options container.\n     *\n     * @dev When multiples of this option are added, they are summed by the executor\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the\n     * LayerZeroEndpoint,\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\n     */\n    function addExecutorLzReceiveOption(\n        bytes memory _options,\n        uint128 _gas,\n        uint128 _value\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(\n            _gas,\n            _value\n        );\n        return\n            addExecutorOption(\n                _options,\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                option\n            );\n    }\n\n    /**\n     * @dev Adds an executor native drop option to the existing options.\n     * @param _options The existing options container.\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\n     * @param _receiver The receiver address for the native drop option.\n     * @return options The updated options container.\n     *\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\n     */\n    function addExecutorNativeDropOption(\n        bytes memory _options,\n        uint128 _amount,\n        bytes32 _receiver\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(\n            _amount,\n            _receiver\n        );\n        return\n            addExecutorOption(\n                _options,\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\n                option\n            );\n    }\n\n    /**\n     * @dev Adds an executor LZ compose option to the existing options.\n     * @param _options The existing options container.\n     * @param _index The index for the lzCompose() function call.\n     * @param _gas The gasLimit for the lzCompose() function call.\n     * @param _value The msg.value for the lzCompose() function call.\n     * @return options The updated options container.\n     *\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\n     */\n    function addExecutorLzComposeOption(\n        bytes memory _options,\n        uint16 _index,\n        uint128 _gas,\n        uint128 _value\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(\n            _index,\n            _gas,\n            _value\n        );\n        return\n            addExecutorOption(\n                _options,\n                ExecutorOptions.OPTION_TYPE_LZCOMPOSE,\n                option\n            );\n    }\n\n    /**\n     * @dev Adds an executor ordered execution option to the existing options.\n     * @param _options The existing options container.\n     * @return options The updated options container.\n     */\n    function addExecutorOrderedExecutionOption(\n        bytes memory _options\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        return\n            addExecutorOption(\n                _options,\n                ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION,\n                bytes(\"\")\n            );\n    }\n\n    /**\n     * @dev Adds an executor option to the existing options.\n     * @param _options The existing options container.\n     * @param _optionType The type of the executor option.\n     * @param _option The encoded data for the executor option.\n     * @return options The updated options container.\n     */\n    function addExecutorOption(\n        bytes memory _options,\n        uint8 _optionType,\n        bytes memory _option\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _options,\n                ExecutorOptions.WORKER_ID,\n                _option.length.toUint16() + 1, // +1 for optionType\n                _optionType,\n                _option\n            );\n    }\n\n    /**\n     * @dev Encodes legacy options of type 1.\n     * @param _executionGas The gasLimit value passed to lzReceive().\n     * @return legacyOptions The encoded legacy options.\n     */\n    function encodeLegacyOptionsType1(\n        uint256 _executionGas\n    ) internal pure returns (bytes memory) {\n        if (_executionGas > type(uint128).max) {\n            revert InvalidSize(type(uint128).max, _executionGas);\n        }\n        return abi.encodePacked(TYPE_1, _executionGas);\n    }\n\n    /**\n     * @dev Encodes legacy options of type 2.\n     * @param _executionGas The gasLimit value passed to lzReceive().\n     * @param _nativeForDst The amount of native air dropped to the receiver.\n     * @param _receiver The _nativeForDst receiver address.\n     * @return legacyOptions The encoded legacy options of type 2.\n     */\n    function encodeLegacyOptionsType2(\n        uint256 _executionGas,\n        uint256 _nativeForDst,\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\n    ) internal pure returns (bytes memory) {\n        if (_executionGas > type(uint128).max) {\n            revert InvalidSize(type(uint128).max, _executionGas);\n        }\n        if (_nativeForDst > type(uint128).max) {\n            revert InvalidSize(type(uint128).max, _nativeForDst);\n        }\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\n        return\n            abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\n    }\n}\n"},"src/PriceFeed.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {OracleLib, AggregatorV3Interface} from \"./libraries/OracleLib.sol\";\n\n/**\n * @title PriceFeed.\n * @author Jaskaran Singh.\n * @notice Contract for fetching INR to USD and ETH to USD prices for the RupioDao CollateralSafekeep contract.\n * @notice This contract is integrated with chainlink price feeds to fetch the latest prices.\n * @dev Uses OracleLib to check if the price feed is stale.\n */\ncontract PriceFeed {\n    using OracleLib for AggregatorV3Interface;\n    AggregatorV3Interface internal INRtoUSDFeed;\n    AggregatorV3Interface internal ETHtoUSDFeed;\n\n    constructor(address _INRToUSDFeed, address _ETHToUSDFeed) {\n        INRtoUSDFeed = AggregatorV3Interface(_INRToUSDFeed);\n        ETHtoUSDFeed = AggregatorV3Interface(_ETHToUSDFeed);\n    }\n\n    /**\n     * @notice Fetches the latest INR to USD price from the Chainlink Price Feed.\n     */\n    function INRtoUSD() public view returns (int256 oneINRinUSD) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */\n            ,\n             oneINRinUSD,\n            /*uint startedAt*/\n            ,\n            /*uint timeStamp*/\n            ,\n            /*uint80 answeredInRound*/\n        ) = INRtoUSDFeed.staleCheckLatestRoundData();\n    }\n\n    /**\n     * @notice Fetches the latest ETH to USD price from the Chainlink Price Feed.\n     */\n    function ETHtoUSD() public view returns (int256 oneETHinUSD) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */\n            ,\n             oneETHinUSD,\n            /*uint startedAt*/\n            ,\n            /*uint timeStamp*/\n            ,\n            /*uint80 answeredInRound*/\n        ) = ETHtoUSDFeed.staleCheckLatestRoundData();\n    }\n}\n"},"src/Rupio.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {AccessManager} from \"./AccessManager.sol\";\nimport {OFT} from \"@layerzerolabs/oft-evm/contracts/OFT.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Rupio.\n * @author Jaskaran Singh.\n * @notice A simple ERC20 token for the Rupio stablecoin, pegegd to 1 INR.\n * @notice Integrated with LayerZero OFT to make Rupio Crosschain.\n * @notice Integrated with RupioDao access manager to manage access.\n */\ncontract Rupio is Ownable, OFT {\n    AccessManager internal accessManager;\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    uint32 public chainEid;\n\n    /**\n     * @param _lzEndpoint LayerZero endpoint for the current chain.\n     * @param _accessManager RupioDao AccessManager address.\n     * @param _chainEid Layerzero ChainEid for the current chain.\n     */\n    constructor(\n        address _lzEndpoint,\n        address _accessManager,\n        uint32 _chainEid\n    ) OFT(\"Rupio\", \"RUP\", _lzEndpoint, msg.sender) Ownable(msg.sender) {\n        accessManager = AccessManager(_accessManager);\n        chainEid = _chainEid;\n    }\n\n    /**\n     * @notice Modifier to check if the msg.sender has Minter role in RupioDao AccessManager.\n     */\n    modifier onlyMinter() {\n        require(accessManager.hasRole(MINTER_ROLE, msg.sender));\n        _;\n    }\n\n    /**\n     * @notice This function is used by the CSK contract to mint Rupio for investors.\n     * @param _add The address to mint Rupio to.\n     * @param _amount The amount of Rupio to mint.\n     */\n    function mint(address _add, uint256 _amount) public /**onlyMinter*/ {\n        _credit(_add, _amount, chainEid);\n    }\n\n    /**\n     * @notice This function is used to burn any rupio tokens\n     * @param _add Address of wallet to burn from.\n     * @param _amount Amount to burn.\n     */\n    function burnFrom(address _add, uint256 _amount) public {\n        _debit(_add, _amount, _amount - 100, chainEid);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 8;\n    }\n}\n"},"src/RupioSavingsContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Rupio.sol\";\nimport {AccessManager} from \"./AccessManager.sol\";\n\n/**\n * @title RupioSavingsContract.\n * @author RupioDao.\n * @notice A simple Savings Contract that incentivizes users to hold Rupio in this contract.\n * @notice Savings rate is determined by governance in RupioDao.\n * @notice This contract acts as a part of RupioDao stability mechanism.\n */\n\ncontract RupioSavingsContract {\n    /**\n     * @notice User Struct showing user investment details.\n     */\n    struct User {\n        uint256 userBalance;\n        uint256 userDepositedAt;\n        uint256 userWithdrawn;\n        bool isUserWithdrawn;\n        uint256 rewardAmount;\n        uint256 lastWithdrawnAmount;\n        uint256 lastClaimedReward;\n        uint256 currentRewardAmount;\n        uint256 lastRewardClaimedAt;\n    }\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n    Rupio public token;\n    AccessManager public accessManager;\n    uint256 lockPeriod;\n    uint256 savingsRate; //Rupio savings rate\n    uint256 public totalDeposited;\n    uint256 public totalInvestersCount;\n\n    /**\n     * @dev Mapping of investor address to their details struct.\n     */\n    mapping(address => User) users;\n\n    /**\n     * @param _savingsRate Rupio savings rate determined by RupioDao governance.\n     * @param _token Address of rupio token.\n     * @param _accessManager Address of RupioDao access manager.\n     */\n    constructor(uint256 _savingsRate, address _token, address _accessManager) {\n        token = Rupio(_token);\n        savingsRate = _savingsRate;\n        accessManager = AccessManager(_accessManager);\n    }\n\n    /**\n     * @notice Modifier that calls the access manager to check if the caller is a moderator in RupioDao.\n     */\n    modifier onlyModerator() {\n        require(\n            accessManager.hasRole(MODERATOR_ROLE, msg.sender),\n            \"Owner of this can call this function\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Update lock period.\n     * @dev OnlyModerator can call this function.\n     * @param value New lock period.\n     */\n    function updateLockPeriod(uint256 value) public onlyModerator {\n        lockPeriod = value;\n    }\n\n    /**\n     * @notice Update savings rate.\n     * @dev OnlyModerator can call this function.\n     * @param value New savings rate.\n     */\n    function updateSavingsRate(uint256 value) public onlyModerator {\n        savingsRate = value;\n    }\n\n    /**\n     * @notice Lock Rupio to earn interest, Rupio Savings Rate.\n     * @param _amount Amount of Rupio to be locked.\n     */\n    function lockRupio(uint256 _amount) public {\n        require(\n            token.balanceOf(msg.sender) >= _amount,\n            \"You dont Have a balance\"\n        );\n        require(\n            token.allowance(msg.sender, address(this)) >= _amount,\n            \"Not sufficient allowance\"\n        );\n        User memory user = User(\n            _amount,\n            block.timestamp,\n            0,\n            false,\n            0,\n            0,\n            0,\n            0,\n            0\n        );\n        totalDeposited += _amount;\n        totalInvestersCount++;\n        users[msg.sender] = user;\n        token.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @notice Withdraw Rupio from the contract plus returns if any.\n     * @param _amount Amount of Rupio to be withdrawn.\n     */\n    function withdrawRupio(uint256 _amount) public {\n        User memory user = users[msg.sender];\n        require(user.isUserWithdrawn == false, \"Your balance is zero\");\n        uint256 userLockPeriod = user.userDepositedAt + lockPeriod;\n        require(\n            block.timestamp >= userLockPeriod,\n            \"withdraw your token after the lock period ends\"\n        );\n        user.userBalance = user.userBalance - _amount;\n        user.userWithdrawn = block.timestamp;\n        user.lastWithdrawnAmount = _amount;\n        if (user.userBalance == 0) {\n            user.isUserWithdrawn = true;\n        }\n        users[msg.sender] = user;\n        token.transfer(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Internal function to calculate interest of a user investment.\n     * @param user Address of the user.\n     */\n    function calculateInterest(address user) internal view returns (uint256) {\n        User memory currentUser = users[user];\n        uint256 duration = (block.timestamp - currentUser.userDepositedAt) /\n            86400;\n        uint256 value = (currentUser.userBalance * savingsRate * duration) /\n            100;\n        currentUser.rewardAmount = value / 365;\n        return currentUser.rewardAmount;\n    }\n\n    /**\n     * @notice Claim Rupio rewards incurred on the investment.\n     */\n    function claimReward() public {\n        User memory user = users[msg.sender];\n\n        calculateInterest(msg.sender);\n        user.currentRewardAmount = user.rewardAmount - user.lastClaimedReward;\n        user.lastClaimedReward = user.currentRewardAmount;\n        user.lastRewardClaimedAt = block.timestamp;\n        users[msg.sender] = user;\n        token.mint(msg.sender, user.currentRewardAmount);\n    }\n}\n"},"src/libraries/OracleLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @title OracleLib.\n * @author Jaskaran Singh.\n * @notice This library is used to check the PriceFeed.sol for stale data.\n * If a price is stale, functions will revert, and render the CollateralSafeKeep unusable - this is by design.\n * So if the Chainlink network explodes and you have a lot of money locked in the protocol... too bad.\n */\nlibrary OracleLib {\n    /**\n     * @dev Error thrown if the price is stale.\n     */\n    error OracleLib__StalePrice();\n\n    /**\n     * @dev Time in seconds after which a price is considered stale.\n     */\n    uint256 private constant TIMEOUT = 24 hours;\n\n    /**\n     * @notice Called by RupioDao contracts for getting price data, through PriceFeed.sol\n     * @notice This function is a wrapper to check if the price is stale.\n     * @param chainlinkFeed Address of the Chainlink Feed\n     */\n    function staleCheckLatestRoundData(\n        AggregatorV3Interface chainlinkFeed\n    ) public view returns (uint80, int256, uint256, uint256, uint80) {\n        (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        ) = chainlinkFeed.latestRoundData();\n\n        if (updatedAt == 0 || answeredInRound < roundId) {\n            revert OracleLib__StalePrice();\n        }\n        uint256 secondsSince = block.timestamp - updatedAt;\n        if (secondsSince > TIMEOUT) revert OracleLib__StalePrice();\n\n        return (roundId, answer, startedAt, updatedAt, answeredInRound);\n    }\n\n    /**\n     * @dev Returns time in seconds after which a price is considered stale.\n     */\n    function getTimeout() public pure returns (uint256) {\n        return TIMEOUT;\n    }\n}\n"},"src/priceFeed.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {OracleLib, AggregatorV3Interface} from \"./libraries/OracleLib.sol\";\n\n/**\n * @title PriceFeed.\n * @author Jaskaran Singh.\n * @notice Contract for fetching INR to USD and ETH to USD prices for the RupioDao CollateralSafekeep contract.\n * @notice This contract is integrated with chainlink price feeds to fetch the latest prices.\n * @dev Uses OracleLib to check if the price feed is stale.\n */\ncontract PriceFeed {\n    using OracleLib for AggregatorV3Interface;\n    AggregatorV3Interface internal INRtoUSDFeed;\n    AggregatorV3Interface internal ETHtoUSDFeed;\n\n    constructor(address _INRToUSDFeed, address _ETHToUSDFeed) {\n        INRtoUSDFeed = AggregatorV3Interface(_INRToUSDFeed);\n        ETHtoUSDFeed = AggregatorV3Interface(_ETHToUSDFeed);\n    }\n\n    /**\n     * @notice Fetches the latest INR to USD price from the Chainlink Price Feed.\n     */\n    function INRtoUSD() public view returns (int256 oneINRinUSD) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */\n            ,\n             oneINRinUSD,\n            /*uint startedAt*/\n            ,\n            /*uint timeStamp*/\n            ,\n            /*uint80 answeredInRound*/\n        ) = INRtoUSDFeed.staleCheckLatestRoundData();\n    }\n\n    /**\n     * @notice Fetches the latest ETH to USD price from the Chainlink Price Feed.\n     */\n    function ETHtoUSD() public view returns (int256 oneETHinUSD) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */\n            ,\n             oneETHinUSD,\n            /*uint startedAt*/\n            ,\n            /*uint timeStamp*/\n            ,\n            /*uint80 answeredInRound*/\n        ) = ETHtoUSDFeed.staleCheckLatestRoundData();\n    }\n}\n"}},"settings":{"remappings":["@aave/core-v3/=lib/protocol-v3/","@openzeppelin/=lib/openzeppelin-contracts/","@api3/contracts/=lib/contracts/contracts/","@uniswap/v3-periphery/=node_modules/@uniswap/v3-periphery/","@uniswap/v3-core/=node_modules/@uniswap/v3-core/","@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/","@layerzerolabs/oft-evm/=lib/devtools/packages/oft-evm/","@layerzerolabs/oapp-evm/=lib/devtools/packages/oapp-evm/","@layerzerolabs/lz-evm-protocol-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/protocol/","@solidity-bytes-utils/=lib/solidity-bytes-utils/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","layerzero-v2/=lib/layerzero-v2/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationBase.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"*":[]},"lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol":{"*":[]},"lib/devtools/packages/oapp-evm/contracts/precrime/libs/Packet.sol":{"*":[]},"lib/devtools/packages/oft-evm/contracts/OFT.sol":{"*":[]},"lib/devtools/packages/oft-evm/contracts/OFTCore.sol":{"*":[]},"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol":{"*":[]},"lib/devtools/packages/oft-evm/contracts/libs/OFTComposeMsgCodec.sol":{"*":[]},"lib/devtools/packages/oft-evm/contracts/libs/OFTMsgCodec.sol":{"*":[]},"lib/forge-std/src/Base.sol":{"*":[]},"lib/forge-std/src/Script.sol":{"*":[]},"lib/forge-std/src/StdAssertions.sol":{"*":[]},"lib/forge-std/src/StdChains.sol":{"*":[]},"lib/forge-std/src/StdCheats.sol":{"*":[]},"lib/forge-std/src/StdError.sol":{"*":[]},"lib/forge-std/src/StdInvariant.sol":{"*":[]},"lib/forge-std/src/StdJson.sol":{"*":[]},"lib/forge-std/src/StdMath.sol":{"*":[]},"lib/forge-std/src/StdStorage.sol":{"*":[]},"lib/forge-std/src/StdStyle.sol":{"*":[]},"lib/forge-std/src/StdToml.sol":{"*":[]},"lib/forge-std/src/StdUtils.sol":{"*":[]},"lib/forge-std/src/Test.sol":{"*":[]},"lib/forge-std/src/Vm.sol":{"*":[]},"lib/forge-std/src/console.sol":{"*":[]},"lib/forge-std/src/console2.sol":{"*":[]},"lib/forge-std/src/interfaces/IERC165.sol":{"*":[]},"lib/forge-std/src/interfaces/IERC20.sol":{"*":[]},"lib/forge-std/src/interfaces/IERC721.sol":{"*":[]},"lib/forge-std/src/interfaces/IMulticall3.sol":{"*":[]},"lib/forge-std/src/mocks/MockERC20.sol":{"*":[]},"lib/forge-std/src/mocks/MockERC721.sol":{"*":[]},"lib/forge-std/src/safeconsole.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLib.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ISendLib.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/AddressCast.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/ExecutorOptions.sol":{"*":[]},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/PacketV1Codec.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"*":[]},"lib/solidity-bytes-utils/contracts/BytesLib.sol":{"*":[]},"script/DeployHomeChain.s.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"]},"script/HelperConfig.s.sol":{"*":[]},"src/AccessManager.sol":{"*":[]},"src/CollateralSafekeep.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"]},"src/Libraries/OptionsBuilder.sol":{"*":[]},"src/PriceFeed.sol":{"*":[]},"src/Rupio.sol":{"*":[]},"src/RupioSavingsContract.sol":{"*":[]},"src/libraries/OracleLib.sol":{"*":[]},"src/priceFeed.sol":{"*":[]}},"evmVersion":"paris","viaIR":true,"libraries":{}},"allowPaths":["/Users/jaskaransingh/projects/RupioDao/Rupio/contracts","/Users/jaskaransingh/projects/RupioDao/Rupio/contracts/lib"],"basePath":"/Users/jaskaransingh/projects/RupioDao/Rupio/contracts","includePaths":["/Users/jaskaransingh/projects/RupioDao/Rupio/contracts"]},"output":{"errors":[{"sourceLocation":{"file":"src/CollateralSafekeep.sol","start":13271,"end":13283},"type":"Warning","component":"general","severity":"warning","errorCode":"6321","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> src/CollateralSafekeep.sol:348:37:\n    |\n348 |         returns (bool upkeepNeeded, bytes memory /* performData */)\n    |                                     ^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"src/CollateralSafekeep.sol","start":13121,"end":13343},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> src/CollateralSafekeep.sol:342:5:\n    |\n342 |     function checkUpkeep(\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"script/DeployHomeChain.s.sol","start":570,"end":2013},"type":"Warning","component":"general","severity":"warning","errorCode":"5574","message":"Contract code size is 31402 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract code size is 31402 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n  --> script/DeployHomeChain.s.sol:15:1:\n   |\n15 | contract DeployHomeChain is Script {\n   | ^ (Relevant source part starts here and spans across multiple lines).\n\n"}],"contracts":{"script/DeployHomeChain.s.sol":{"DeployHomeChain":{"abi":[{"type":"function","name":"IS_SCRIPT","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"run","inputs":[],"outputs":[],"stateMutability":"nonpayable"}],"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/DeployHomeChain.s.sol\":\"DeployHomeChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@aave/core-v3/=lib/protocol-v3/\",\":@api3/contracts/=lib/contracts/contracts/\",\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@layerzerolabs/lz-evm-protocol-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/protocol/\",\":@layerzerolabs/oapp-evm/=lib/devtools/packages/oapp-evm/\",\":@layerzerolabs/oft-evm/=lib/devtools/packages/oft-evm/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@solidity-bytes-utils/=lib/solidity-bytes-utils/\",\":@uniswap/v3-core/=node_modules/@uniswap/v3-core/\",\":@uniswap/v3-periphery/=node_modules/@uniswap/v3-periphery/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":layerzero-v2/=lib/layerzero-v2/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationBase.sol\":{\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c53c8736dacbf8c517c63937d556c3e4873a62f509c5d84b89e32fc5c9c6c2c\",\"dweb:/ipfs/QmeR6RSce5dTDcPgbwBnG7E8U89716bqsUcv1NeWnX5RJf\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0546b2739f3989b897c5cb591d01211e2db22e1a8578f68117f1a8a692abd85c\",\"dweb:/ipfs/QmW6guw8uUk2Dq49PWdjeZeEvnDDRg3CVX2BVcVNcT6QNL\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34e35eb46dfadf12396e92dd970547209dfd99f0ae5b1ec7b5a3e81617f620a1\",\"dweb:/ipfs/Qmanoi2CDi9MwkP44HosagvewfMEvCMN1YthGRmCexVjwY\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7\",\"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"keccak256\":\"0x2450923d9bc223f53bcbbd50a17405929ce5322200e8ce053c7918030cbb7844\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53e27d2016d7c0a3006527a2f0d22662d3345f0f4acfb201b7d3dfd7b6a63a41\",\"dweb:/ipfs/QmWJFujczEBYJZkjBVeBVfm85a3MHnX5mv8DazMML3hJ4r\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"keccak256\":\"0xd5e222c5dd223490b766da8e45266101dd3635b1ba31d9b7a3a80d49f7640f85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87dd19489b055e151dd12a5a17df677f72d4591e3c8e2f7a5b50654cba425a10\",\"dweb:/ipfs/QmZcqPVHRkkijPmkkd5dAZt4a8kFx3A9Zo9XNBYbwuNZat\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9\",\"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol\":{\"keccak256\":\"0x774819d0045441fafc088add82707e22cda02ddca6c01bf049e19183ca3ed20f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb2ac2ab9d8885be6a663e82ffb0ca74e3088483ad8d8e737f01686f37ab8229\",\"dweb:/ipfs/QmPdSL9xef912VyPPCwN1nrNz3Bu51GRAFretTPqdxzcPg\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol\":{\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e1f8cf9f20a2b683a53c3883972aa0676af97a24c678f461fae08e1fb056df28\",\"dweb:/ipfs/QmPpKNqda3rgxDwnq3XiRTtT3NfWeqrCJT6LwmhYd2AoT2\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol\":{\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://606515dd9193551bd2c94ac8c304f3776fafcc70e544ebf441f334658b2fd5f0\",\"dweb:/ipfs/QmZ88ey7DdZqV5taAoebabvszX5kdPMSrQCAmTteVdDtcH\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd12bb4fe5802c53911b9a0081a2ea10639b1f99925d1e5c1b1421d1bdc17075\",\"dweb:/ipfs/QmZonarwbKiEwQ8qoASKur2bbMjusdy9pqK9RCR4P1YPtc\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol\":{\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d42b471418efadcc3577ef3fa9f8f504e8bed7db90c3b0c862038d8b29529eb2\",\"dweb:/ipfs/QmZETDQiJN4U92fmLKo8T9ZbdDf7BNBUUvo9H7M7GqAyFU\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a1deb2a6a3eb1fb83936c9578469142bff470295f403d7d07d955a76be3adbd\",\"dweb:/ipfs/QmS9bjSfBaE4YhQ1PCQ1TknbEPbNfRXzBK9E7SaPGyiZEv\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\":{\"keccak256\":\"0x339654e699043c400cad92de209aa23855ce10211c31cf4114042cc5224d3b7c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5222afde59bf086f67b39e0288ad36343f4f5ed683d250533f256a5db956f37e\",\"dweb:/ipfs/QmbEG9EMYsK3Y6Cz7QbNtkW4kHGzMuhp2y2seSoL8v1A5b\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e2eea8a93bb9fc3f629767118b362e9b4bda2443ff95eae21c6a894f3e334cc\",\"dweb:/ipfs/QmPRRNjAB4U19ke4gr3U7ZJGtdcVBxdXVBZ2BmB1riFkP7\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c236dfe386b508be33c3a1a74ae1d4fd64b8c77ae207767e9dbed0f2429518a2\",\"dweb:/ipfs/QmXVbZJjfryTRti98uN3BMh5qh4K7NuEs1RSCoBjRoYd4q\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a59dd6e3cfcc332f45a13d44585eb228588c4b9d470cbb19852df5753a4571af\",\"dweb:/ipfs/QmQJF1QU3MKhvmw42eq61u9z3bzKJJKMsEdQVYyPyYgTVS\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\":{\"keccak256\":\"0x205a0abfd8b3c9af2740769f251381b84999b8e9347f3cd50de3ef8290a17750\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9778d7d5da941af2029410b6ac212f915ea1785573ae2865b0ed8f779fcca82\",\"dweb:/ipfs/QmNkVEkfecvgubgnMuaT5fEfSExd95vz8DQHhpZtMrVRjH\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol\":{\"keccak256\":\"0x5d24db150949ea8e6437178e65a942e8c8b7f332e5daf32750f56b23b35b5bb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b1dcea0267234654126f926a1b405743606d7b5e49185b621afb7bd94d18b9a\",\"dweb:/ipfs/QmZ9BXQmbWJcrhHKuBs4yhNtbCV5WUpUY3AXSX7rkWwX6y\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol\":{\"keccak256\":\"0xc8d869f27ef8ceb2e13fdf6a70682fd4dee3f90c4924eb8e125bc1e66cb6af84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://66bf49d59c14832ea0ddddcd12d512d4f9bd0fd254a1368442587bf3e77fe73e\",\"dweb:/ipfs/QmYUAvsyuUPiSYjbL4zVo6ZtiRSLCUPDvCesqgdZWbSGDg\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/libs/Packet.sol\":{\"keccak256\":\"0xcb2fb1c5b2eb3731de78b479b9c2ab3bba326fe0b0b3a008590f18e881e457a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f70724c61d226743c2bd8ba6c09758805e4339780978949ce5b333c106be4edc\",\"dweb:/ipfs/QmX5rV9K1N7RgTz9xtf8CDG8SrYiitGAzFh9ec2tbnEec4\"]},\"lib/devtools/packages/oft-evm/contracts/OFT.sol\":{\"keccak256\":\"0xdc3582e4a20e02a79050c17058a1f1f42a4335d1a70be06c0a52a3fb05d4c89a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83c4bd42e68528246860a952a92a79e51e3a789dac79a0b62576ab2f609de9c7\",\"dweb:/ipfs/QmVj1x655j1cFTnPT8uBaM71TCSrhFVwPdoFkAkWhhadns\"]},\"lib/devtools/packages/oft-evm/contracts/OFTCore.sol\":{\"keccak256\":\"0x0a435802ad13dcaf74668923ec2716358b94bc2be1a63c85a931638defd7decc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc93e94b14b38ccd62dfa6664ccfc2e303d13d20b4799b415054c4b35f7cd03d\",\"dweb:/ipfs/QmZyCwjhuEHNGdFRYMAE6LjD81Puhstoj49HNrwtRPYPbc\"]},\"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol\":{\"keccak256\":\"0x278e7bdeb2e8aa3f528373d8a3b3fedfe2e1bec050bcaf95065a136645cf56bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43d1789ca4f5cd81986bb52682a94caf188dc8910ecd84cf98bc59221847bd12\",\"dweb:/ipfs/QmSmvKyCukcqxCUvdvNQNyshp4nYt2xxiFaB7Uji4YSrBv\"]},\"lib/devtools/packages/oft-evm/contracts/libs/OFTComposeMsgCodec.sol\":{\"keccak256\":\"0xaae73d6eb8b9561c43f1802f3c416c00ccd35f172b711f9781ccdf1b25a40db5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7beda2d895ae9e15269dd261a492ce0a29b498e5bebf088ed6f2ae6a5185719e\",\"dweb:/ipfs/QmScog2tW1YVyEPLVcUVqGGc85ub46sA28nUKNzFEZcFdK\"]},\"lib/devtools/packages/oft-evm/contracts/libs/OFTMsgCodec.sol\":{\"keccak256\":\"0x5358948017669c03e157f871d8c38e988f9004dbd0801ad3119d2487f0d40b0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7d0f1bf32a80af9b99cd93fefa373dac5c27463351cc35f62b9c2439d5b9258\",\"dweb:/ipfs/Qmb81qoxzMwV3PkPANRvnXf4fJTsZ5sjJ8r2df9V2vhh6q\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xfd9e719ff0673fdd8ff83bbe72ee8cae0273d61937d27fde5d9159d9849233f4\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://b14aaef0d76f2e5257e4e3ab33895d5260d4c7707ff4d37fea1f31d25c8684a8\",\"dweb:/ipfs/QmRd6BMh4FNDPW8Niy4TU2XrtKqAc6GRTfw8xjSwpQ42Gy\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bacc29fd3866af71e59cb0bdc1cf82c882a4a7f4e2652fd413c9f12649762083\",\"dweb:/ipfs/QmZh2toLnrQDWaNYhS5K4NoW7Vxd2GdZx9KA77vKEDLAqs\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol\":{\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77415ae0820859e0faf3fabdce683cce9fa03ea026ae0f6fe081ef1c9205f933\",\"dweb:/ipfs/QmXd7APqoCunQ2jYy73AHvi5gsZofLpm3SzM6FPo7zRPfL\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLib.sol\":{\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cae7e35007a714f007ea08045ef7c0cfa6c91fd2425b5028b2d49abad357a5f0\",\"dweb:/ipfs/QmcDBs5tsiyB35b8cwzWQWNnpkawb3uuHRaqE77Hxm2tve\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol\":{\"keccak256\":\"0xd710f9efe703982e8eabe15d19d6114af753ef42f2796551da782a0fb6633e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5c9c874871469c871004d49a1cb5304e63ea3faaf366bfed9d718abbb9cc20a\",\"dweb:/ipfs/QmarXxE4dezAa5gBe82KCrcvWcMwa3BYqkfXbDQ3rRjfEB\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol\":{\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e1b245d58221d16d8b5e0f01ef3e289a24a7df1ace3b94239e4d5b954ad5927\",\"dweb:/ipfs/Qmappsgp7PCY9rSSNE9Cdn4BTRX591WfCSEgq2HxhA3z6S\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol\":{\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b18b23a1643fc6636c4ad9d9023e2e6ca2d3c2a4a046482d4655bff09950598d\",\"dweb:/ipfs/Qma6G5SqiovwrMPfgqTrRngK1HWW373Wkf9c6YP2NhXpPk\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol\":{\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5173fc9143bea314b159ca5a9adb5626659ef763bc598e27de5fa46efe3291a6\",\"dweb:/ipfs/QmSLFeMFPmVeGxT4sxRPW28ictjAS22M8rLeYRu9TXkA6D\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ISendLib.sol\":{\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://060f10ff7afc33c1c2f2b4b5ba29231fd3c943146488084d0e4ab99fce991d97\",\"dweb:/ipfs/QmaSsefAqqEqtf8FgFUmDYMwTsAty3X1pqDb6SiFvry6B3\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/AddressCast.sol\":{\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://2d4b2cf5c3b16dc76c6767f285b57c0af917972327b2be3f7cba5825402f5fc1\",\"dweb:/ipfs/QmQQWiHE2jKEDbjzGutSoZwtApSXYfLqZt5CxEpFj8xyvT\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol\":{\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://a33245d0fdd3992bb56b31d1840108d36bb46c8d617b659ef1af8dd7ed86302d\",\"dweb:/ipfs/QmWyBqT7Tdrfn5zz9xYM3V1PBtfAZAVwwCrrKwwfi3wMQK\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/ExecutorOptions.sol\":{\"keccak256\":\"0x621c6090fc432f94a99f677a95d72b75f56db89ddc5fc870669777a313587c28\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://69086166f16d29e30c5eb9ca2f97afb27569afe619807d79736833a809a512d2\",\"dweb:/ipfs/QmcZqXjFuVdTrfbteKBF3GuEpjVFZ2YNZTa3J87dyLsqav\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/PacketV1Codec.sol\":{\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://de686666fc16fa432d4208d85cec87dc952faf3e481b683b9adf4b4610db4b09\",\"dweb:/ipfs/QmdmQeopzmxqRzi9DNB4EJDrYUXFfD7fUhnGhSni4QejUW\"]},\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80\",\"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"lib/solidity-bytes-utils/contracts/BytesLib.sol\":{\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://a38d7680aacbb18dae659876b396b73bcc8f759672213f8a0efc4129e2648535\",\"dweb:/ipfs/QmfKFnwpTEGAnbRnZxMuv3mRCG9S9WMjFhFL23bftBT2Jq\"]},\"script/DeployHomeChain.s.sol\":{\"keccak256\":\"0x68195c7bb6ab4a0e1b699b3e3d9abac156742023c3a4d6bde8e8bc445b58f0e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae82710fa85efa0ebfd35a6a1bff66455ffa95b0b8baea5338f09e4347abba68\",\"dweb:/ipfs/QmZusbwXzXCZiJfyod6mNMmSkXN5S5dPrRPDTb63v6qXuL\"]},\"script/HelperConfig.s.sol\":{\"keccak256\":\"0xe78136fefbfa1d0106b0c76c6a1d1b1104520a25ef9cd27a1926f7cd4cf50089\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1529123c3da4249cabe66256c1d0491b39dfe4eb91a6cfc37f4a983e18f2ee65\",\"dweb:/ipfs/QmTFT9KUe4B3UCVsSM4Yg8rtHHJP1W3jwpp8R2qYYouvZG\"]},\"src/AccessManager.sol\":{\"keccak256\":\"0x13b4a02fa0b95245b5cbf51fd1a95f0902593479f43e62ece6c9843bc05399f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca55300aff245b50d9138a98dbfde6734349bda8622391bf94914969368040c4\",\"dweb:/ipfs/QmUTCL9Bgod5GTT8MKHbqmgoeVZkSe3mG4ssGJipWgRahG\"]},\"src/CollateralSafekeep.sol\":{\"keccak256\":\"0x5403e628ecc04bafad19c71c4361c1ca036062b36b57ecb6afcfad903f3433d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e3939fd661d6a078f6a4022131f063560574ce24b8c95dd9c8d93afadf4362c\",\"dweb:/ipfs/QmW5K5LJQbaV2hfcB1dvRHjxqYKJqTFP22H4FkgtoG8Er2\"]},\"src/Libraries/OptionsBuilder.sol\":{\"keccak256\":\"0x9094106765f73745c8e1dee2ba64ac7f32ba4d8545ee81e41923ae7761a54f68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b9cde2051f065b07fe97fe38d9867376773cb88ba0385de1db9a3b268c7518e\",\"dweb:/ipfs/QmRCMQ8FtvvRP6KK5UUGvAFTiinSME43n5XTSEAuQFsQTq\"]},\"src/PriceFeed.sol\":{\"keccak256\":\"0xb19894c360e1d9eee40c29e44b678616de8f403928767fbbfbd442a1070cde26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38756cbd3c8c278b7c80994b198de27b8138b038433d4405acdcf5c9bdcabca9\",\"dweb:/ipfs/QmeQeHPJvEdqwEG637JQevYCFKY5AnednSJkp1gQDFd4cW\"]},\"src/Rupio.sol\":{\"keccak256\":\"0x65169842bb19b15eb8349493509c09735044a93cdf9558dba10da519e48423d0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc8d6ae8bbcb0e8b122729a957d96254b0d2f5adf85b2184b777db3747eb795c\",\"dweb:/ipfs/Qmf9kP2cRpuvWHrmcrzDLVwQWvbDa1UNJhzTbDEjUHvbqe\"]},\"src/RupioSavingsContract.sol\":{\"keccak256\":\"0xd8f6b9167dbb1ad4dc3a09ead0ab0505f9789c310e5c1b7af1e8a863ade2e006\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://090a5d866babc4a574dd020c58b93dad748b019bbf9bb3010edf7f61882a13ab\",\"dweb:/ipfs/Qmaj7H6fKFDWGJgZBRNvvv93uD7iSGB2287SDq8Xbrurs9\"]},\"src/libraries/OracleLib.sol\":{\"keccak256\":\"0x49c54f36778fcce33c6e05c1b721f02786ed7295b157096d120f26545e7326dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06bb656178a4a71bf7c3c4029e9a6aef034d556e8628291a821152bdf9e5e76f\",\"dweb:/ipfs/QmdkEqb9z5sxAFWjSg24u3gxJaPEoW1anYQTJQ28CmmyBN\"]},\"src/priceFeed.sol\":{\"keccak256\":\"0xb19894c360e1d9eee40c29e44b678616de8f403928767fbbfbd442a1070cde26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38756cbd3c8c278b7c80994b198de27b8138b038433d4405acdcf5c9bdcabca9\",\"dweb:/ipfs/QmeQeHPJvEdqwEG637JQevYCFKY5AnednSJkp1gQDFd4cW\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":2989,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"stdstore","offset":0,"slot":"0","type":"t_struct(StdStorage)10474_storage"},{"astId":5686,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"stdChainsInitialized","offset":0,"slot":"8","type":"t_bool"},{"astId":5707,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"chains","offset":0,"slot":"9","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)5702_storage)"},{"astId":5711,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"defaultRpcUrls","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":5715,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"idToAlias","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":5718,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"12","type":"t_bool"},{"astId":6521,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"gasMeteringOff","offset":1,"slot":"12","type":"t_bool"},{"astId":3040,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"IS_SCRIPT","offset":2,"slot":"12","type":"t_bool"},{"astId":47710,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"helperconfig","offset":3,"slot":"12","type":"t_contract(HelperConfig)48138"},{"astId":47713,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"accessmanager","offset":0,"slot":"13","type":"t_contract(AccessManager)48238"},{"astId":47716,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"pricefeed","offset":0,"slot":"14","type":"t_contract(PriceFeed)50715"},{"astId":47719,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"rupio","offset":0,"slot":"15","type":"t_contract(Rupio)50173"},{"astId":47722,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"csk","offset":0,"slot":"16","type":"t_contract(CollateralSafekeep)49677"},{"astId":47725,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"isr","offset":0,"slot":"17","type":"t_contract(RupioSavingsContract)50563"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(AccessManager)48238":{"encoding":"inplace","label":"contract AccessManager","numberOfBytes":"20"},"t_contract(CollateralSafekeep)49677":{"encoding":"inplace","label":"contract CollateralSafekeep","numberOfBytes":"20"},"t_contract(HelperConfig)48138":{"encoding":"inplace","label":"contract HelperConfig","numberOfBytes":"20"},"t_contract(PriceFeed)50715":{"encoding":"inplace","label":"contract PriceFeed","numberOfBytes":"20"},"t_contract(Rupio)50173":{"encoding":"inplace","label":"contract Rupio","numberOfBytes":"20"},"t_contract(RupioSavingsContract)50563":{"encoding":"inplace","label":"contract RupioSavingsContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)10449_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)10449_storage))"},"t_mapping(t_bytes32,t_struct(FindData)10449_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)10449_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)10449_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)10449_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)5702_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)5702_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Chain)5702_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":5695,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":5697,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":5699,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":5701,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)10449_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":10442,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":10444,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":10446,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":10448,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(StdStorage)10474_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":10458,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)10449_storage)))"},{"astId":10461,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":10463,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":10465,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":10467,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":10469,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":10471,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":10473,"contract":"script/DeployHomeChain.s.sol:DeployHomeChain","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"object":"$1f06ac8d622ce42796cee98ba1044ce165$__5af480156100d15760209160009161009d575b50604051908152f35b6100bf915060a03d60a0116100ca575b6100b78183610168565b8101906101b7565b505050905038610094565b503d6100ad565b6040513d6000823e3d90fd5b600080fd5b346100dd5760003660031901126100dd576001546315d0e4b560e11b82526001600160a01b0316600482015260a08160248173__$1f06ac8d622ce42796cee98ba1044ce165$__5af480156100d1576020916000916101445750604051908152f35b61015d915060a03d60a0116100ca576100b78183610168565b505050905082610094565b90601f8019910116810190811067ffffffffffffffff82111761018a57604052565b634e487b7160e01b600052604160045260246000fd5b519069ffffffffffffffffffff821682036100dd57565b908160a09103126100dd576101cb816101a0565b916020820151916040810151916101e96080606084015193016101a0565b9056fea164736f6c634300081a000aa164736f6c634300081a000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x26 JUMPI PUSH3 0x10001 PUSH3 0xFF00FF NOT PUSH1 0xC SLOAD AND OR PUSH1 0xC SSTORE PUSH2 0x7AAA SWAP1 DUP2 PUSH2 0x2C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xC0406226 EQ PUSH2 0x5F JUMPI POP PUSH4 0xF8CCBF47 EQ PUSH2 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x5C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5C JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xC SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x744 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x744 JUMPI PUSH2 0xD10 DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x720 JUMPI SWAP1 DUP3 SWAP2 PUSH2 0xDF3 DUP4 CODECOPY SUB SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0xC DUP1 SLOAD PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT AND PUSH1 0x18 SWAP3 SWAP1 SWAP3 SHL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x7FB5297F PUSH1 0xE0 SHL DUP2 MSTORE DUP2 DUP1 DUP3 PUSH1 0x4 DUP2 DUP4 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D GAS CALL DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH2 0x734 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH2 0x521 DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x720 JUMPI PUSH1 0x40 SWAP2 DUP4 SWAP2 PUSH2 0x8D2 DUP4 CODECOPY PUSH1 0x8 DUP2 MSTORE PUSH3 0x124F80 PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x40 MLOAD PUSH2 0xB60 DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x70C JUMPI SWAP1 DUP3 SWAP2 PUSH2 0x1B03 DUP4 CODECOPY SUB SWAP1 DUP4 CREATE DUP1 ISZERO PUSH2 0x5CF JUMPI PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 PUSH1 0xE0 SWAP2 DUP4 SWAP2 PUSH1 0x4 SWAP2 DUP4 SWAP2 PUSH1 0x18 SWAP2 SWAP1 SWAP2 SHR AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x6CE JUMPI DUP4 SWAP2 PUSH2 0x6ED JUMPI JUMPDEST POP PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2AE DUP1 DUP5 ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP6 DUP6 LT OR PUSH2 0x6D9 JUMPI SWAP2 PUSH1 0x40 SWAP4 SWAP2 DUP6 SWAP4 PUSH2 0x77F0 DUP6 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0xE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x18 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP2 AND SWAP1 PUSH1 0xE0 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x6CE JUMPI DUP4 SWAP2 PUSH2 0x6AF JUMPI JUMPDEST POP PUSH1 0xC0 ADD MLOAD PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP4 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH1 0xE0 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x671 JUMPI PUSH4 0xFFFFFFFF SWAP2 PUSH1 0xA0 SWAP2 DUP7 SWAP2 PUSH2 0x690 JUMPI JUMPDEST POP ADD MLOAD AND PUSH1 0x40 MLOAD SWAP3 PUSH2 0x315B SWAP3 DUP4 DUP6 ADD SWAP4 DUP6 DUP6 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT OR PUSH2 0x67C JUMPI SWAP2 DUP6 SWAP4 SWAP2 PUSH1 0x60 SWAP6 SWAP4 PUSH2 0x4695 DUP7 CODECOPY DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0xF DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x18 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP3 AND SWAP2 PUSH1 0xE0 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x40 SWAP2 DUP6 SWAP2 PUSH2 0x652 JUMPI JUMPDEST POP ADD MLOAD SWAP1 PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0xE0 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL DUP1 ISZERO PUSH2 0x62A JUMPI PUSH1 0x60 PUSH1 0xE0 SWAP2 PUSH1 0x4 SWAP4 DUP9 SWAP2 PUSH2 0x635 JUMPI JUMPDEST POP ADD MLOAD SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x62A JUMPI PUSH1 0x80 SWAP2 DUP7 SWAP2 PUSH2 0x5FB JUMPI JUMPDEST POP ADD MLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2032 DUP1 DUP9 ADD SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP7 SWAP6 SWAP4 SWAP1 SWAP5 AND SWAP4 SWAP1 DUP9 DUP9 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP10 GT OR PUSH2 0x5E7 JUMPI SWAP2 PUSH1 0xC0 SWAP8 SWAP6 SWAP4 SWAP2 DUP10 SWAP8 SWAP6 SWAP4 PUSH2 0x2663 DUP10 CODECOPY DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x10 SLOAD AND OR PUSH1 0x10 SSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x3B756E9B PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 DUP2 DUP2 PUSH1 0x4 DUP2 DUP4 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D GAS CALL DUP1 ISZERO PUSH2 0x5CF JUMPI PUSH2 0x5BA JUMPI JUMPDEST POP PUSH2 0x537 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xF SLOAD AND PUSH2 0x4D3 DUP2 PUSH1 0x40 MLOAD PUSH2 0x4B2 PUSH1 0x40 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH15 0x70726963652066656564206D6F636B PUSH1 0x88 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH2 0x512 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x4F2 SWAP1 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH14 0x30B1B1B2B9B99036B0B730B3B2B9 PUSH1 0x91 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x520 PUSH1 0x40 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0x5 DUP2 MSTORE PUSH5 0x727570696F PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x40 DUP1 MLOAD PUSH2 0x572 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x556 SWAP1 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0xA DUP2 MSTORE PUSH10 0x1C1C9A58D94819995959 PUSH1 0xB2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH2 0x5B7 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x591 SWAP1 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH20 0x636F6C6C61746572616C2073616665206B65657 PUSH1 0x64 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP2 PUSH2 0x5C4 SWAP2 PUSH2 0x748 JUMP JUMPDEST PUSH2 0x5C JUMPI DUP1 CODESIZE PUSH2 0x491 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST PUSH2 0x61D SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI JUMPDEST PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x799 JUMP JUMPDEST CODESIZE PUSH2 0x3AF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x60B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x64C SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x388 JUMP JUMPDEST PUSH2 0x66B SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH2 0x6A9 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x6C8 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH2 0x706 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x1D5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH2 0x73D SWAP2 PUSH2 0x748 JUMP JUMPDEST CODESIZE DUP2 PUSH2 0x117 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x76A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x794 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x794 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 PUSH1 0xE0 DUP4 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP5 DUP3 LT OR PUSH2 0x82B JUMPI PUSH1 0x40 MSTORE PUSH2 0x7CD DUP3 PUSH2 0x780 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x7DB PUSH1 0x20 DUP4 ADD PUSH2 0x780 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x5C JUMPI POP PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x823 SWAP1 PUSH1 0xC0 ADD PUSH2 0x780 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH4 0x319AF333 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x8BB JUMPI POP POP SWAP2 PUSH2 0x8A8 PUSH1 0x84 DUP3 DUP5 PUSH1 0x0 SWAP8 SWAP6 SWAP7 DUP9 DUP5 DUP2 SWAP10 DUP6 ADD ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x748 JUMP JUMPDEST MLOAD SWAP1 PUSH11 0x636F6E736F6C652E6C6F67 GAS STATICCALL POP JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD PUSH1 0x84 DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x865 JUMP INVALID PUSH1 0x80 CALLVALUE PUSH1 0xC8 JUMPI PUSH1 0x1F PUSH2 0x521 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0xCD JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0xC8 JUMPI DUP1 MLOAD SWAP1 PUSH1 0xFF DUP3 AND DUP1 SWAP3 SUB PUSH1 0xC8 JUMPI PUSH1 0x20 ADD MLOAD SWAP1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH1 0xB2 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD PUSH2 0x43D SWAP1 DUP2 PUSH2 0xE4 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x313CE567 EQ PUSH2 0x3F9 JUMPI POP DUP1 PUSH4 0x4AA2011F EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x7284E416 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x9A6FC8F5 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA87A20CE EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xB633620C EQ PUSH2 0x112 JUMPI PUSH4 0xFEAF968C EQ PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x3 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP7 AND DUP1 DUP8 MSTORE SWAP4 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1D0 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x1FF PUSH2 0x417 JUMP JUMPDEST PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP7 DUP2 MSTORE SWAP4 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x31B JUMPI PUSH1 0x40 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH32 0x76302E382F74657374732F4D6F636B563341676772656761746F722E736F6C00 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 MSTORE DUP2 DUP2 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x303 JUMPI POP POP DUP2 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP5 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0x40 DUP8 DUP5 ADD ADD MSTORE DUP6 SWAP4 POP ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x3A2 PUSH2 0x417 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD SWAP3 AND DUP1 PUSH1 0x3 SSTORE DUP2 PUSH1 0x1 SSTORE DUP3 PUSH1 0x2 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x0 SLOAD AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x10D JUMPI JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x35 JUMPI PUSH3 0x10001 PUSH3 0xFF00FF NOT PUSH1 0xC SLOAD AND OR PUSH1 0xC SSTORE PUSH1 0x96 PUSH1 0xD SSTORE PUSH1 0x82 PUSH1 0xE SSTORE PUSH1 0x96 PUSH1 0xF SSTORE PUSH2 0xCD5 SWAP1 DUP2 PUSH2 0x3B DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x70E88AB4 EQ PUSH2 0x5EA JUMPI POP DUP1 PUSH4 0x989E6FD9 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xA31D502A EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xADDFCAE8 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0xC28975D1 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xD1A43BDA EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0xE28C79CF EQ PUSH2 0xA2 JUMPI PUSH4 0xF8CCBF47 EQ PUSH2 0x77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xC SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0xBB PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x108 PUSH1 0x40 MLOAD PUSH2 0xCD PUSH1 0x60 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x576F726B696E67206F6E206F7074696D69736D207365706F6C6961206E6F772E PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0x171717 PUSH1 0xE9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x122 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH20 0x61EC26AA57019C486B10502285C5A3D4A4750AD7 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9D28 PUSH1 0xA0 DUP3 ADD MSTORE PUSH20 0x6EDCE65403992E310A62460808C4B910D972F10F PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x19A PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x1DB PUSH1 0x40 MLOAD PUSH2 0x1AC PUSH1 0x40 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH32 0x576F726B696E67206F6E2062617365207365706F6C6961206E6F772E2E2E2E00 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1F5 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH20 0x4ADC67696BA383F43DD60A9E78F2C97FBBFC7CB1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9D35 PUSH1 0xA0 DUP3 ADD MSTORE PUSH20 0x6EDCE65403992E310A62460808C4B910D972F10F PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x269 PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x2AA PUSH1 0x40 MLOAD PUSH2 0x27B PUSH1 0x40 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH32 0x576F726B696E67206F6E20657468207365706F6C6961206E6F772E2E2E2E0000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2C4 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH20 0x694AA1769357215DE4FAC081BF1F309ADC325306 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9CE1 PUSH1 0xA0 DUP3 ADD MSTORE PUSH20 0x6EDCE65403992E310A62460808C4B910D972F10F PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x338 PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x17D PUSH1 0x40 MLOAD PUSH2 0x348 DUP2 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x11 SLOAD DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x12 SLOAD PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x13 SLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x14 SLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x15 SLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xA0 DUP7 ADD MSTORE SWAP1 SWAP2 SHR SWAP1 SWAP2 AND PUSH1 0xC0 DUP4 ADD MSTORE MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x3BF PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x40C PUSH1 0x40 MLOAD PUSH2 0x3D1 PUSH1 0x60 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x576F746B696E67206F6E206F7074696D69736D206D61696E6E6574206E6F772E PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0x171717 PUSH1 0xE9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x426 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH20 0x5535E67D8F99C8EBE961E1FC1F6DDAE96FEC82C9 DUP5 MSTORE PUSH20 0x13E3EE699D1909E989722E753853AE30B17E08C5 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x499 PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x4EC PUSH1 0x40 MLOAD PUSH2 0x4AB PUSH1 0x60 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x29 DUP2 MSTORE PUSH32 0x6C6F63616C206E6574776F726B2064657465637465642C206465706C6F79696E PUSH1 0x20 DUP3 ADD MSTORE PUSH9 0x67206D6F636B732121 PUSH1 0xB8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x521 SWAP1 DUP2 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 DUP2 PUSH2 0x7A8 SWAP4 DUP6 DUP6 DUP4 CODECOPY PUSH1 0x8 DUP2 MSTORE PUSH3 0x124F80 PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 PUSH1 0x0 CREATE SWAP2 DUP3 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 SWAP3 DUP5 SWAP3 DUP4 CODECOPY PUSH1 0x8 DUP2 MSTORE PUSH5 0x4BDD384680 PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x5C8 JUMPI PUSH2 0x17D SWAP2 PUSH1 0xD SLOAD PUSH1 0xE SLOAD SWAP2 PUSH1 0xF SLOAD SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x588 DUP7 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x7B PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x7B PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP8 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP8 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0xA0 DUP6 ADD MSTORE SHR AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 SWAP1 RETURN JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP1 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x6FB DUP3 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH4 0x104C13EB PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x24 DUP4 ADD MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x791 JUMPI POP POP SWAP2 DUP2 PUSH2 0x77E PUSH1 0x64 DUP3 DUP7 PUSH1 0x0 DUP4 DUP2 SWAP10 DUP3 SWAP10 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x6CC JUMP JUMPDEST MLOAD SWAP1 PUSH11 0x636F6E736F6C652E6C6F67 GAS STATICCALL POP JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD PUSH1 0x64 DUP3 DUP8 ADD ADD MSTORE ADD PUSH2 0x74A JUMP INVALID PUSH1 0x80 CALLVALUE PUSH1 0xC8 JUMPI PUSH1 0x1F PUSH2 0x521 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0xCD JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0xC8 JUMPI DUP1 MLOAD SWAP1 PUSH1 0xFF DUP3 AND DUP1 SWAP3 SUB PUSH1 0xC8 JUMPI PUSH1 0x20 ADD MLOAD SWAP1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH1 0xB2 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD PUSH2 0x43D SWAP1 DUP2 PUSH2 0xE4 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x313CE567 EQ PUSH2 0x3F9 JUMPI POP DUP1 PUSH4 0x4AA2011F EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x7284E416 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x9A6FC8F5 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA87A20CE EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xB633620C EQ PUSH2 0x112 JUMPI PUSH4 0xFEAF968C EQ PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x3 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP7 AND DUP1 DUP8 MSTORE SWAP4 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1D0 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x1FF PUSH2 0x417 JUMP JUMPDEST PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP7 DUP2 MSTORE SWAP4 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x31B JUMPI PUSH1 0x40 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH32 0x76302E382F74657374732F4D6F636B563341676772656761746F722E736F6C00 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 MSTORE DUP2 DUP2 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x303 JUMPI POP POP DUP2 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP5 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0x40 DUP8 DUP5 ADD ADD MSTORE DUP6 SWAP4 POP ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x3A2 PUSH2 0x417 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD SWAP3 AND DUP1 PUSH1 0x3 SSTORE DUP2 PUSH1 0x1 SSTORE DUP3 PUSH1 0x2 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x0 SLOAD AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x10D JUMPI JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAE0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0xF179AAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC55E240E4 DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB20 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 SWAP1 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP1 DUP1 LOG4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB00 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6D DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAE0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 SWAP1 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP1 DUP1 LOG4 PUSH2 0x100 CALLER PUSH2 0x129 JUMP JUMPDEST POP PUSH2 0x10A CALLER PUSH2 0x1B5 JUMP JUMPDEST POP PUSH2 0x114 CALLER PUSH2 0x23B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7BE SWAP1 DUP2 PUSH2 0x2C2 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1AF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB20 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA80 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB40 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1AF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB40 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAE0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA80 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1AF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB00 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA80 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x400 JUMPI POP DUP1 PUSH4 0x117803E3 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x390 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x3DD1EB61 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x797669C9 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xAA232DC2 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0xEF JUMPI PUSH4 0xD547741F EQ PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH1 0x4 CALLDATALOAD PUSH2 0xC2 PUSH2 0x453 JUMP JUMPDEST SWAP1 PUSH2 0xE3 PUSH2 0xDE DUP3 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x70F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH2 0x146 PUSH2 0x469 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x16F SWAP1 PUSH1 0xFF AND PUSH2 0x47F JUMP JUMPDEST PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 MSTORE PUSH32 0xF179AAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC55E240E4 SLOAD PUSH2 0x1C3 SWAP1 PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0x1FD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH2 0x288 PUSH2 0x469 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2B1 SWAP1 PUSH1 0xFF AND PUSH2 0x47F JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6D SLOAD PUSH2 0x305 SWAP1 PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0x323 PUSH2 0x453 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x33F JUMPI PUSH2 0xE8 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x70F JUMP JUMPDEST PUSH4 0x334BD919 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH1 0x4 CALLDATALOAD PUSH2 0x36F PUSH2 0x453 JUMP JUMPDEST SWAP1 PUSH2 0x38B PUSH2 0xDE DUP3 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x684 JUMP JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH2 0x3BD PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x6270EDB7C868F86FDA4ADEDBA75108201087268EA345934DB8BAD688E1FEB91B DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0xEA JUMPI PUSH1 0x20 SWAP2 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x442 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x43B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xEA JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xEA JUMPI JUMP JUMPDEST ISZERO PUSH2 0x486 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742068617665204D4F44455241544F525F524F4C450000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4EE JUMPI POP JUMP JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5D4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6C PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5D4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x708 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x708 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID CALL PUSH26 0xAAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC SSTORE 0xE2 BLOCKHASH 0xE3 LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D0781D7CA 0xC9 0xC3 PUSH25 0xEFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6C SLT SWAP10 0xB6 LOG3 DUP16 0x4C 0xD1 LOG4 0xAA 0xDF REVERT 0xAC CODECOPY 0x26 0x2D ADDRESS 0x24 BLOBBASEFEE ADD MULMOD DUP8 MSTORE8 0xE1 CODESIZE 0xED PUSH9 0xABCFD87EE48171F3D5 PC JUMP 0xE4 SDIV DUP15 0xD0 PUSH15 0xE057D79ADA615F65CDF5F9EE88181B SWAP2 TIMESTAMP 0x25 ADDMOD DUP16 DUP4 0x4F SWAP16 0x2D CREATE INVALID 0xD2 0xC7 PUSH23 0x48DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C89 JUMP 0xA6 PUSH3 0x70EDB7 0xC8 PUSH9 0xF86FDA4ADEDBA75108 KECCAK256 LT DUP8 0x26 DUP15 LOG3 GASLIMIT SWAP4 0x4D 0xB8 0xBA 0xD6 DUP9 0xE1 INVALID 0xB9 SHL CALL PUSH26 0xAAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC SSTORE 0xE2 BLOCKHASH 0xE3 PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1F PUSH2 0x2032 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x1DC JUMPI DUP1 DUP5 SWAP3 PUSH1 0xC0 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1F2 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 PUSH2 0x5E PUSH1 0x60 DUP3 ADD PUSH2 0x1F7 JUMP JUMPDEST SWAP1 PUSH2 0x77 PUSH1 0xA0 PUSH2 0x70 PUSH1 0x80 DUP5 ADD PUSH2 0x1F7 JUMP JUMPDEST SWAP3 ADD PUSH2 0x1F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND SWAP5 DUP7 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE TIMESTAMP SWAP1 SSTORE PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x1DC JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH1 0x0 DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 PUSH1 0x0 DUP5 MSTORE PUSH1 0x7 SLOAD SWAP5 PUSH9 0x10000000000000000 DUP7 LT ISZERO PUSH2 0x1DC JUMPI PUSH1 0x1 DUP7 ADD DUP1 PUSH1 0x7 SSTORE DUP7 LT ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x5 SWAP6 PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP7 MLOAD DUP8 SSTORE PUSH1 0x1 DUP8 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD PUSH1 0x2 DUP7 ADD SSTORE MLOAD PUSH1 0x3 DUP6 ADD SSTORE MLOAD PUSH1 0x4 DUP5 ADD SSTORE MLOAD SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH2 0x1E26 SWAP1 DUP2 PUSH2 0x20C DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x5DF ADD MSTORE DUP2 DUP2 PUSH2 0xF8E ADD MSTORE DUP2 DUP2 PUSH2 0x19CD ADD MSTORE PUSH2 0x1D9E ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0xBE8 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 PUSH2 0x82B ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1F2 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x76D0815 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x188AFB74 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x194D7494 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2A8FFE80 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x310E84B5 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x314860F8 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x3F3D2A88 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x4A83CF49 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x515D22CE EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x6653B817 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x7649AEF1 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x797669C9 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x839159FB EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x9210AE64 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x9DC1B45B EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xAB845413 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0xAE0B163F EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0xB2088164 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xB603540F EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xBB828132 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xC48589CB EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xD7BF2AEF EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xEA6CFD4A EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xEAA45B42 EQ PUSH2 0x14A JUMPI PUSH4 0xFB5989A6 EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF5D JUMP JUMPDEST PUSH2 0xEBD JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST PUSH2 0xC41 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC0B JUMP JUMPDEST PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x813 JUMP JUMPDEST PUSH2 0xB4C JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x98C JUMP JUMPDEST PUSH2 0x974 JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x84E JUMP JUMPDEST PUSH2 0x551 JUMP JUMPDEST PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1E0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x1E9 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x206 SWAP1 JUMPDEST SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE DUP1 DUP1 ISZERO PUSH2 0x216 DUP2 ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x241 SWAP1 DUP4 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x237 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x1080 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x26C SWAP1 PUSH1 0x96 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x263 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x280 PUSH2 0x278 CALLER PUSH2 0x1902 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x335 JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 CALLER SWAP1 CALL ISZERO PUSH2 0x330 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2C0 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1106 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2E9 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH2 0x1A34 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x304 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x32B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE STOP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x288 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x370 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x379 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x394 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3C0 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD ISZERO ISZERO PUSH2 0x1118 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3EB SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x115B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x408 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x46E JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x483 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 PUSH2 0x808 JUMP JUMPDEST CODESIZE PUSH2 0x443 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x4B9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST POP PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x520 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI JUMPDEST POP PUSH2 0x1213 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x544 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x54A JUMPI JUMPDEST PUSH2 0x53C DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x11FB JUMP JUMPDEST CODESIZE PUSH2 0x51A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x532 JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x589 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x594 DUP3 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x59D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x5B8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x604 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x617 PUSH2 0x610 CALLER PUSH2 0x1B11 JUMP JUMPDEST DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x627 PUSH2 0x622 PUSH2 0x1BA6 JUMP JUMPDEST PUSH2 0x1BC2 JUMP JUMPDEST PUSH2 0x630 CALLER PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x643 PUSH2 0x63C DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH1 0xA SWAP1 DIV SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x65B PUSH2 0x64F PUSH2 0x13A4 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP6 AND DUP6 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x678 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x685 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH2 0x69F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x3B6F743B PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 SWAP1 DUP3 DUP1 PUSH2 0x6BF DUP5 PUSH1 0x4 DUP4 ADD PUSH2 0x1485 JUMP JUMPDEST SUB DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x7D7 JUMPI JUMPDEST POP PUSH2 0x6E1 DUP3 MLOAD CALLVALUE LT ISZERO PUSH2 0x14A2 JUMP JUMPDEST DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x75B SWAP4 PUSH1 0xC0 SWAP4 PUSH2 0x7C2 JUMPI JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x73A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP1 DUP1 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xC7C7F5B3 PUSH1 0xE0 SHL DUP5 MSTORE CALLER SWAP2 PUSH1 0x4 DUP6 ADD PUSH2 0x1554 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x794 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x7B5 SWAP1 PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x7BB JUMPI JUMPDEST PUSH2 0x7AD DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x14E3 JUMP JUMPDEST POP PUSH2 0x76A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7A3 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x7D1 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x724 JUMP JUMPDEST PUSH2 0x7FA SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x801 JUMPI JUMPDEST PUSH2 0x7F2 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1401 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x6D3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x33E JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x861 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x887 PUSH2 0x15C7 JUMP JUMPDEST POP CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x8A1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0xC0 PUSH2 0x8C3 PUSH2 0x8BD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP PUSH2 0x15F8 JUMP JUMPDEST PUSH2 0x909 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33E JUMPI DUP3 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x33E JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x33E JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x33E JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x96A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x987 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1814 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x9B9 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x9C4 DUP2 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x9CD CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x9E8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA0A SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST PUSH2 0xA13 CALLER PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0xA1E DUP2 DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0xA33 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x330 JUMPI PUSH2 0xACD SWAP4 PUSH2 0xAD1 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA94 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA9F CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xABA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0xAE0 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0xA74 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH1 0x4 CALLDATALOAD PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB17 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB07 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0xB40 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0xB5A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x40 PUSH1 0x60 MLOAD DUP1 DUP3 DUP5 ADD MSTORE PUSH2 0xB86 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x80 PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xC1E CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1902 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC57 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x2 PUSH2 0xC72 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xCAE CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1B11 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCC9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0xCF9 CALLVALUE ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xDAD JUMPI PUSH2 0xD59 PUSH2 0xD18 PUSH2 0x15C7 JUMP JUMPDEST CALLVALUE PUSH1 0x40 DUP3 ADD MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 SLOAD DUP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xD41 PUSH2 0xD3C CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x1327 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xD4F CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xD7F PUSH2 0xD7A PUSH1 0x3 SLOAD PUSH2 0x1589 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xACD SWAP1 PUSH2 0xD9B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 SWAP1 PUSH2 0xDC8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD PUSH2 0xDD5 CALLVALUE DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xDF6 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0xE11 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xE1D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xE38 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xE64 JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0x20 PUSH1 0xC0 DUP3 PUSH2 0xEB2 PUSH1 0x1 SWAP5 DUP9 MLOAD PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP3 SWAP2 ADD PUSH2 0xE57 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF58 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xEF4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL ADD DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x7 PUSH1 0x0 MSTORE PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0xF3A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xACD DUP8 DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 PUSH1 0x1 SWAP3 PUSH2 0xF4A DUP6 PUSH2 0x15F8 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST ISZERO PUSH2 0xFB8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E7420686176652061205661756C742C20637265617465206120 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7661756C7420666972737421 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1012 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x106F JUMPI JUMP JUMPDEST PUSH4 0x16670B47 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1087 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742062616C616E636520696E207661756C74000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x10D3 JUMPI JUMP JUMPDEST PUSH4 0x7F8953F7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH2 0x10F0 JUMP JUMPDEST ISZERO PUSH2 0x111F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x273790393AB834B79034B9B9BAB2B2103CB2BA17 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1162 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C65737320616D6F756E74206F6620727570696F206973737565640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x121A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742068617665204D4F44455241544F525F524F4C450000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x12C4 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI POP PUSH2 0x1213 JUMP JUMPDEST JUMP JUMPDEST ISZERO PUSH2 0x12CD JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656E74657220616D6F756E74206C657373207468616E204352502063726F7373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x9 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x9 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x64 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x3 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x3 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH5 0x2540BE400 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH5 0x2540BE400 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x138E JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12C4 PUSH1 0xE0 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x13C2 PUSH1 0x20 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE PUSH1 0x20 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH2 0x33E JUMPI PUSH2 0x1415 SWAP2 PUSH2 0x13C8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH4 0xFFFFFFFF DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xC0 PUSH2 0x1474 PUSH2 0x1462 PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xE0 PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD SWAP1 PUSH2 0xB27 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0xC0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 PUSH2 0x149D PUSH1 0x0 SWAP3 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST SWAP4 ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x14A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x696E73756666696369656E742066756E6473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 DUP2 SUB PUSH1 0xC0 DUP2 SLT PUSH2 0x33E JUMPI PUSH1 0x80 SGT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE DUP4 MLOAD DUP3 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI DUP3 PUSH1 0x80 SWAP2 PUSH1 0x20 PUSH2 0x1415 SWAP6 ADD MSTORE PUSH2 0x1548 DUP4 PUSH1 0x40 DUP9 ADD PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP5 ADD PUSH2 0x13C8 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH1 0x20 PUSH2 0x156D PUSH1 0x60 SWAP4 PUSH1 0x80 DUP7 MSTORE PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST DUP7 MLOAD DUP6 DUP4 ADD MSTORE SWAP6 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1415 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x15D4 DUP3 PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1605 DUP2 PUSH2 0x11BD JUMP JUMPDEST DUP3 SLOAD DUP2 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xF58 JUMPI DUP1 PUSH1 0x1 PUSH2 0x166D SWAP3 ADD PUSH1 0x7 SSTORE PUSH1 0x7 PUSH2 0x104C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x16C7 JUMPI PUSH1 0xA0 DUP2 PUSH1 0x5 SWAP3 MLOAD DUP5 SSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x1 DUP1 DUP5 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x16EE JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1710 PUSH2 0x861 PUSH1 0x1 PUSH2 0x1701 DUP2 SWAP6 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x171B DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x172E PUSH2 0x987 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x1739 DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x1751 PUSH2 0x174C DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x1D93 JUMP JUMPDEST POP PUSH2 0x175B DUP2 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x1765 PUSH2 0x125F JUMP JUMPDEST PUSH32 0x5C0DDC9BA6A3EE218F8B0B2E6583514FB1A2403FC52DD2ADB715D5CB41AB1A20 PUSH2 0x1793 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x179E DUP5 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x180B PUSH1 0x3 PUSH2 0x17B0 DUP7 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x4 PUSH2 0x17BE DUP8 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x5 PUSH2 0x17CC DUP9 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0xC0 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG1 ADD PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 SWAP1 PUSH2 0x1838 SWAP1 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1854 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD DUP1 PUSH2 0x1866 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1327 JUMP JUMPDEST PUSH2 0x186F SWAP2 PUSH2 0x1384 JUMP JUMPDEST PUSH1 0x64 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x188C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x796F752061726520696E206465627421 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x18CB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1E5BDD48185C99481A5B881919589D PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x1926 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x19F2 PUSH1 0x5 PUSH2 0x19C8 PUSH2 0x200 PUSH1 0x4 PUSH2 0x1956 PUSH2 0x200 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD SWAP5 PUSH2 0x19AE PUSH1 0x4 PUSH2 0x197E PUSH2 0x200 DUP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x19A5 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x1885 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x18C4 JUMP JUMPDEST DUP1 PUSH2 0x1A01 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH2 0x1A1A PUSH2 0x1A14 PUSH2 0x1A20 SWAP4 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1106 JUMP JUMPDEST PUSH2 0x1CD7 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1A49 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1AEE JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1AB0 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1ABB JUMPI JUMPDEST POP PUSH2 0x1AAB SWAP2 SWAP3 PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1384 JUMP JUMPDEST PUSH5 0x2540BE400 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x1AAB SWAP3 POP PUSH2 0x1AE1 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI JUMPDEST PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1A25 JUMP JUMPDEST SWAP2 PUSH2 0x1AA0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x4 SWAP3 POP PUSH2 0x1B0A PUSH1 0x20 SWAP2 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A70 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x96 PUSH1 0x5 PUSH2 0x1B35 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD LT PUSH2 0x1B9F JUMPI PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1B7C PUSH2 0x200 PUSH2 0x1B60 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD DUP2 PUSH1 0x1 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI PUSH2 0x1415 SWAP2 PUSH1 0x3 SWAP1 DIV PUSH2 0x1106 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x1415 PUSH1 0x22 DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1BD0 DUP4 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CCB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x1FBD PUSH1 0x83 SHL DUP2 MSTORE PUSH1 0x10 DUP4 MSTORE PUSH2 0x1BF5 PUSH1 0x30 DUP5 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1C03 DUP5 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CAA JUMPI DUP3 MLOAD PUSH2 0xFFFF DUP2 GT PUSH2 0x1C91 JUMPI PUSH2 0xFFFF PUSH1 0x1 SWAP2 AND ADD SWAP2 PUSH2 0xFFFF DUP4 GT PUSH2 0x1113 JUMPI PUSH1 0x20 PUSH1 0x4 SWAP3 PUSH2 0x1415 SWAP5 PUSH2 0x1C80 PUSH1 0x40 MLOAD SWAP8 DUP6 PUSH2 0x1C4A DUP11 SWAP8 MLOAD DUP1 SWAP3 DUP9 DUP1 DUP12 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL SWAP1 DUP8 ADD DUP7 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x23 DUP5 ADD MSTORE MLOAD SWAP3 DUP4 SWAP1 PUSH1 0x24 DUP5 ADD SWAP1 PUSH2 0xB04 JUMP JUMPDEST ADD ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH4 0x6DFCC65 PUSH1 0xE4 SHL PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xFFFF PUSH2 0x1CB6 DUP4 PUSH2 0x1DCD JUMP JUMPDEST PUSH4 0x3A51740D PUSH1 0xE0 SHL PUSH1 0x0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1CB6 PUSH2 0xFFFF SWAP2 PUSH2 0x1DCD JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1CEC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP5 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x330 JUMPI PUSH1 0x4 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1D71 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1D4D SWAP4 PUSH2 0x1AAB SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x1D52 JUMPI JUMPDEST POP PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x1D6B SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x1D47 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP3 POP PUSH2 0x1D8C SWAP1 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH2 0x1D9C SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH32 0x0 LT ISZERO PUSH2 0x1DC8 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 MLOAD LT PUSH2 0x1DDD JUMPI PUSH1 0x2 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7431365F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0xC0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x4D0 JUMPI PUSH1 0x0 SWAP1 PUSH1 0x60 DUP2 PUSH2 0x315B DUP1 CODESIZE SUB DUP1 SWAP2 PUSH2 0x22 DUP3 DUP6 PUSH2 0x4D5 JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x4CC JUMPI PUSH2 0x35 DUP2 PUSH2 0x50E JUMP JUMPDEST SWAP2 PUSH1 0x40 PUSH2 0x44 PUSH1 0x20 DUP5 ADD PUSH2 0x50E JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4C9 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x64 PUSH1 0x40 DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x5 DUP3 MSTORE PUSH5 0x527570696F PUSH1 0xD8 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP5 PUSH2 0x85 PUSH1 0x40 DUP8 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x3 DUP7 MSTORE PUSH3 0x52555 PUSH1 0xEC SHL PUSH1 0x20 DUP8 ADD MSTORE CALLER ISZERO PUSH2 0x4B5 JUMPI DUP2 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP6 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP2 SWAP1 MSTORE DUP1 EXTCODESIZE ISZERO PUSH2 0x4B1 JUMPI DUP2 PUSH1 0x24 DUP2 DUP6 DUP1 SWAP5 PUSH4 0xCA5EB5E1 PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x4A6 JUMPI PUSH2 0x496 JUMPI JUMPDEST POP PUSH1 0x64 PUSH1 0xA0 MSTORE DUP2 MLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x482 JUMPI PUSH1 0x8 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x478 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x464 JUMPI SWAP1 DUP2 PUSH1 0x1F DUP5 SWAP4 GT PUSH2 0x3F6 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x391 JUMPI DUP5 SWAP3 PUSH2 0x386 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x8 SSTORE JUMPDEST DUP4 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x372 JUMPI PUSH1 0x9 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x368 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x354 JUMPI PUSH1 0x1F DUP2 GT PUSH2 0x2F1 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x28E JUMPI SWAP5 DUP3 SWAP4 SWAP5 SWAP6 SWAP3 PUSH2 0x283 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x9 SSTORE JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x2C38 SWAP1 DUP2 PUSH2 0x523 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x796 ADD MSTORE DUP2 DUP2 PUSH2 0x8B6 ADD MSTORE DUP2 DUP2 PUSH2 0xCBF ADD MSTORE DUP2 DUP2 PUSH2 0x1039 ADD MSTORE DUP2 DUP2 PUSH2 0x18AF ADD MSTORE DUP2 DUP2 PUSH2 0x2999 ADD MSTORE PUSH2 0x2A3B ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0xC0F ADD MSTORE DUP2 DUP2 PUSH2 0x1340 ADD MSTORE DUP2 DUP2 PUSH2 0x1ED1 ADD MSTORE DUP2 DUP2 PUSH2 0x20F7 ADD MSTORE DUP2 DUP2 PUSH2 0x22DA ADD MSTORE PUSH2 0x2736 ADD MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1D0 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND PUSH1 0x9 DUP4 MSTORE DUP2 DUP4 KECCAK256 SWAP3 JUMPDEST DUP2 DUP2 LT PUSH2 0x2D9 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x2C0 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x9 SSTORE PUSH2 0x1E6 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2B2 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x29D JUMP JUMPDEST PUSH1 0x9 DUP3 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x34A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x33F JUMPI POP PUSH2 0x1B6 JUMP JUMPDEST DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x332 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x329 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x1A4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x16C JUMP JUMPDEST PUSH1 0x8 DUP6 MSTORE DUP2 DUP6 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x3DE JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x3C5 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x8 SSTORE PUSH2 0x182 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3B7 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x8 DUP6 MSTORE SWAP1 SWAP2 POP PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x45A JUMPI JUMPDEST SWAP1 PUSH1 0x1F DUP6 SWAP5 SWAP4 SWAP3 ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x44C JUMPI POP PUSH2 0x156 JUMP JUMPDEST DUP6 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x43F JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x431 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x141 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP2 PUSH2 0x4A0 SWAP2 PUSH2 0x4D5 JUMP JUMPDEST CODESIZE PUSH2 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x4F8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x4D0 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xD35B415 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x111ECDAD EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x13137D65 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x134D4F25 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x156A0D0F EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0x17442B70 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x1F5E1334 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x3400288B EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x3B6F743B EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x5167A5A8 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x52AE2879 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x5535D461 EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x5A0DFE4D EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0x5E280F11 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x6FC1B31E EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x7D25A05E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x82413EAC EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x857749B0 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x963EFCAA EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x9F68B964 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xB731EA0A EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xB98BD070 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0xBB0B6A53 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xBC70B354 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xBD815DB0 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xC7C7F5B3 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xCA5EB5E1 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0xD045A0DC EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xD4243885 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x21B JUMPI PUSH4 0xFF7BD03D EQ PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF8 JUMP JUMPDEST PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x1A6B JUMP JUMPDEST PUSH2 0x1A08 JUMP JUMPDEST PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x195D JUMP JUMPDEST PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1885 JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST PUSH2 0x15A9 JUMP JUMPDEST PUSH2 0x1555 JUMP JUMPDEST PUSH2 0x151A JUMP JUMPDEST PUSH2 0x1437 JUMP JUMPDEST PUSH2 0x13B4 JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST PUSH2 0x1363 JUMP JUMPDEST PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x123B JUMP JUMPDEST PUSH2 0x11DD JUMP JUMPDEST PUSH2 0x11B6 JUMP JUMPDEST PUSH2 0x116E JUMP JUMPDEST PUSH2 0x1115 JUMP JUMPDEST PUSH2 0x10D8 JUMP JUMPDEST PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST PUSH2 0xFDB JUMP JUMPDEST PUSH2 0xF5C JUMP JUMPDEST PUSH2 0xDCB JUMP JUMPDEST PUSH2 0xD61 JUMP JUMPDEST PUSH2 0xBAB JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0xA45 JUMP JUMPDEST PUSH2 0xA29 JUMP JUMPDEST PUSH2 0xA0B JUMP JUMPDEST PUSH2 0x9E9 JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x9A6 JUMP JUMPDEST PUSH2 0x783 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST PUSH2 0x5C7 JUMP JUMPDEST PUSH2 0x451 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x302 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x31A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x343 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x360 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x8 SLOAD PUSH2 0x385 DUP2 PUSH2 0xE2D JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x41C JUMPI POP PUSH1 0x1 EQ PUSH2 0x3BD JUMPI JUMPDEST PUSH2 0x3B9 DUP4 PUSH2 0x3AD DUP2 DUP6 SUB DUP3 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x34F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x402 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x3AD PUSH2 0x39D JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x3EA JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x3AD SWAP1 POP PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x46E DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD CALLER ISZERO PUSH2 0x502 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0x4EC JUMPI PUSH2 0x4B2 DUP3 SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH1 0x20 SWAP1 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4A1406B1 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0xE602DF05 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x302 JUMPI SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x542 DUP6 PUSH1 0xA0 DUP2 ADD SWAP3 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 DUP7 ADD MSTORE DUP2 MLOAD DUP1 SWAP2 MSTORE PUSH1 0xC0 DUP6 ADD SWAP1 PUSH1 0x20 PUSH1 0xC0 DUP3 PUSH1 0x5 SHL DUP9 ADD ADD SWAP4 ADD SWAP2 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x58B JUMPI POP POP POP POP SWAP1 PUSH1 0x60 PUSH2 0x589 SWAP3 SWAP5 ADD SWAP1 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 PUSH1 0x20 DUP1 PUSH2 0x5B9 PUSH1 0x1 SWAP4 PUSH1 0xBF NOT DUP13 DUP3 SUB ADD DUP7 MSTORE PUSH1 0x40 DUP4 DUP11 MLOAD DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 DUP2 DUP6 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP7 ADD SWAP3 ADD SWAP3 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x565 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x5F7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x518 JUMP JUMPDEST PUSH2 0x5FF PUSH2 0x1B5D JUMP JUMPDEST POP PUSH2 0x608 PUSH2 0x1B5D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x615 DUP2 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x636 DUP3 DUP6 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH1 0x1F NOT DUP3 ADD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x688 JUMPI POP POP SWAP1 PUSH2 0x66C PUSH2 0x3B9 SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0x666 PUSH1 0x60 DUP4 ADD CALLDATALOAD SWAP3 PUSH2 0x1B8D JUMP JUMPDEST POP PUSH2 0x1EC8 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x676 PUSH2 0x1B3F JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH2 0x526 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x696 DUP2 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 DUP3 ADD MSTORE DUP3 DUP3 DUP10 ADD ADD MSTORE ADD PUSH2 0x642 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x302 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x302 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x302 JUMPI JUMP JUMPDEST PUSH1 0x3 NOT DUP2 ADD PUSH1 0xE0 DUP2 SLT PUSH2 0x302 JUMPI PUSH1 0x60 PUSH1 0x0 SWAP2 SLT PUSH2 0x780 JUMPI POP PUSH1 0x4 SWAP2 DUP3 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI DUP2 PUSH2 0x750 SWAP2 DUP5 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0xA4 CALLDATALOAD PUSH2 0x760 DUP2 PUSH2 0x440 JUMP JUMPDEST SWAP3 PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x77C SWAP3 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH2 0x78C CALLDATASIZE PUSH2 0x713 JUMP JUMPDEST POP SWAP2 SWAP5 SWAP3 SWAP2 POP POP CALLER PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x991 JUMPI DUP2 CALLDATALOAD PUSH2 0x7CE DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0x7D7 DUP2 PUSH2 0x1F1C JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP5 ADD CALLDATALOAD DUP1 SWAP3 SUB PUSH2 0x96A JUMPI POP POP PUSH2 0x7FF PUSH2 0x7F3 DUP6 DUP4 PUSH2 0x2706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP4 PUSH2 0x825 PUSH2 0x815 PUSH2 0x810 DUP4 DUP6 PUSH2 0x2712 JUMP JUMPDEST PUSH2 0x2728 JUMP JUMPDEST PUSH2 0x81E DUP6 PUSH2 0x1B8D JUMP JUMPDEST POP DUP7 PUSH2 0x229A JUMP JUMPDEST SWAP2 PUSH2 0x830 DUP3 PUSH1 0x28 LT SWAP1 JUMP JUMPDEST PUSH2 0x888 JUMPI JUMPDEST POP POP PUSH2 0x861 PUSH32 0xEFED6D3500546B29533B128A29E3A94D70788727F0507505AC12EAF2E578FD9C SWAP3 PUSH2 0x1B8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP4 LOG3 STOP JUMPDEST SWAP1 DUP3 PUSH2 0x8B3 SWAP3 PUSH2 0x8AD PUSH2 0x89D PUSH1 0x40 DUP9 ADD PUSH2 0x1F50 JUMP JUMPDEST SWAP4 PUSH2 0x8A7 DUP9 PUSH2 0x1B8D JUMP JUMPDEST SWAP3 PUSH2 0x275C JUMP JUMPDEST SWAP3 PUSH2 0x277F JUMP JUMPDEST SWAP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3E5AC809 PUSH1 0xE1 SHL DUP2 MSTORE SWAP4 PUSH1 0x0 SWAP2 DUP6 SWAP2 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH2 0x90D SWAP1 DUP12 DUP14 PUSH1 0x4 DUP6 ADD PUSH2 0x1F5A JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x965 JUMPI PUSH32 0xEFED6D3500546B29533B128A29E3A94D70788727F0507505AC12EAF2E578FD9C SWAP4 PUSH2 0x861 SWAP3 PUSH2 0x94A JUMPI JUMPDEST POP SWAP3 PUSH2 0x835 JUMP JUMPDEST DUP1 PUSH2 0x959 PUSH1 0x0 PUSH2 0x95F SWAP4 PUSH2 0xF3B JUMP JUMPDEST DUP1 PUSH2 0x2F7 JUMP JUMPDEST CODESIZE PUSH2 0x943 JUMP JUMPDEST PUSH2 0x1E36 JUMP JUMPDEST DUP1 PUSH2 0x979 PUSH4 0xFFFFFFFF SWAP3 PUSH2 0xB0C JUMP JUMPDEST PUSH4 0x309AFAF3 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x91AC5E4F PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x2 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0xB9270B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xA62 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0xA6E DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 DUP5 ADD PUSH2 0xAB7 JUMPI JUMPDEST PUSH2 0xAAB SWAP4 POP PUSH2 0x1F85 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 DUP5 LT PUSH2 0xAD3 JUMPI PUSH2 0xACE DUP4 PUSH2 0xAAB SWAP6 SUB CALLER DUP4 PUSH2 0x2689 JUMP JUMPDEST PUSH2 0xAA1 JUMP JUMPDEST DUP3 DUP5 PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x8 DUP2 MSTORE RETURN JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH32 0x238399D427B947898EDB290F5FF0F9109849B1C3BA196A42E35F00C50A54B98B PUSH1 0x4 CALLDATALOAD PUSH2 0xB58 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xB64 PUSH2 0x207D JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH2 0xB9C PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH4 0xFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0xBDB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x518 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0xBE7 DUP2 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xBEF PUSH2 0x1B5D JUMP JUMPDEST POP DUP2 CALLDATALOAD SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0xC3A PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0xC0A DUP7 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0xC35 PUSH32 0x0 DUP1 SWAP3 PUSH2 0x26D3 JUMP JUMPDEST PUSH2 0x26F3 JUMP JUMPDEST SWAP2 DUP1 DUP4 LT PUSH2 0xD49 JUMPI PUSH2 0xCBB PUSH1 0x40 DUP7 PUSH2 0xCA0 DUP8 PUSH2 0xC56 DUP9 DUP9 PUSH2 0x20E0 JUMP JUMPDEST SWAP1 PUSH2 0xC60 DUP6 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0xC68 PUSH2 0x1B5D JUMP JUMPDEST POP PUSH2 0xC72 DUP6 PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0xC89 PUSH2 0xC7D PUSH2 0x1B4E JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP8 AND DUP8 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE DUP6 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE JUMP JUMPDEST DUP2 MLOAD DUP1 SWAP4 DUP2 SWAP3 PUSH4 0x1BB8518B PUSH1 0xE3 SHL DUP4 MSTORE ADDRESS SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x222C JUMP JUMPDEST SUB DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x3B9 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0xD1A JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH2 0xD3C SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0xD42 JUMPI JUMPDEST PUSH2 0xD34 DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2218 JUMP JUMPDEST DUP3 PUSH2 0xCFB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xD2A JUMP JUMPDEST DUP3 PUSH4 0x71C4EFED PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xD7E DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xDC1 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xDAB JUMPI PUSH2 0xDA9 SWAP2 PUSH2 0x27DD JUMP JUMPDEST STOP JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xDEAD SWAP2 POP PUSH2 0xD91 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH1 0xA SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD ADDRESS DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND DUP3 SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND DUP3 SUB PUSH2 0x302 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xE5D JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xE47 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP2 SLOAD SWAP2 PUSH2 0xE77 DUP4 PUSH2 0xE2D JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xECD JUMPI POP PUSH1 0x1 EQ PUSH2 0xE93 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP4 SWAP5 POP SWAP2 SWAP3 JUMPDEST DUP4 DUP4 LT PUSH2 0xEB3 JUMPI POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP5 SWAP4 SWAP5 SLOAD DUP4 DUP6 DUP8 ADD ADD MSTORE ADD SWAP2 ADD SWAP2 SWAP1 PUSH2 0xEA2 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF SWAP3 SWAP2 SWAP3 NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xF1B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xF1B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xF1B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x3B9 PUSH2 0xFC0 PUSH2 0xFC7 PUSH2 0xFB4 PUSH1 0x4 CALLDATALOAD PUSH2 0xF85 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH2 0xF92 PUSH2 0xE0D JUMP JUMPDEST SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0xFFFF AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xE67 JUMP JUMPDEST SUB DUP3 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH2 0x1019 PUSH1 0x4 CALLDATALOAD PUSH2 0xFFD DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH32 0xF0BE4F1E87349231D80C36B33F9E8639658EEAF474014DEE15A3E6A4D4414197 PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x10A8 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x10B0 PUSH2 0x207D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x10F5 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x112E PUSH2 0x207D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x118B DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x63 NOT DUP3 ADD DUP3 DUP2 GT PUSH2 0x11B1 JUMPI PUSH2 0xDA9 SWAP3 PUSH4 0xFFFFFFFF PUSH1 0xA SLOAD PUSH1 0xA0 SHR AND SWAP3 PUSH2 0x22CC JUMP JUMPDEST PUSH2 0x1B97 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x11D2 PUSH1 0x4 CALLDATALOAD PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x11F7 CALLDATASIZE PUSH2 0x6D5 JUMP JUMPDEST POP PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x1217 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x6E6 JUMP JUMPDEST POP POP PUSH1 0x20 PUSH1 0x84 CALLDATALOAD PUSH2 0x1227 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND ADDRESS EQ DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x6 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x9 SLOAD PUSH2 0x12A2 DUP2 PUSH2 0xE2D JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x41C JUMPI POP PUSH1 0x1 EQ PUSH2 0x12C9 JUMPI PUSH2 0x3B9 DUP4 PUSH2 0x3AD DUP2 DUP6 SUB DUP3 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x130E JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x3AD PUSH2 0x39D JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x12F6 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x13A9 PUSH1 0x4 CALLDATALOAD PUSH2 0x139F DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x1F85 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH1 0x4 ADD PUSH1 0x0 SWAP3 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1433 JUMPI DUP2 CALLDATALOAD SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT PUSH2 0x780 JUMPI POP PUSH1 0x20 DUP1 DUP4 ADD SWAP3 DUP6 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x302 JUMPI SWAP2 SWAP1 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH2 0x1445 CALLDATASIZE PUSH2 0x13DD JUMP JUMPDEST SWAP1 PUSH2 0x144E PUSH2 0x207D JUMP JUMPDEST PUSH2 0x1457 DUP3 PUSH2 0x1B76 JUMP JUMPDEST SWAP1 PUSH2 0x1465 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 PUSH1 0x5 SHL DUP2 ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x302 JUMPI DUP1 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x148D JUMPI PUSH2 0xDA9 DUP5 PUSH2 0x258A JUMP JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI DUP3 ADD SWAP1 PUSH1 0x60 DUP3 CALLDATASIZE SUB SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14B7 DUP4 PUSH2 0xF20 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x14C2 DUP2 PUSH2 0xB0C JUMP JUMPDEST DUP4 MSTORE PUSH2 0x14D0 PUSH1 0x20 DUP3 ADD PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI ADD SWAP1 CALLDATASIZE PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x302 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x150A DUP5 SWAP4 CALLDATASIZE SWAP1 DUP6 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x1BC8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP5 ADD SWAP4 PUSH2 0x147D JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH4 0xFFFFFFFF PUSH1 0x4 CALLDATALOAD PUSH2 0x153C DUP2 PUSH2 0xB0C JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1572 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0x157A PUSH2 0xE0D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI PUSH2 0x3B9 SWAP3 PUSH2 0x15A1 PUSH2 0xFC7 SWAP4 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x1C8B JUMP JUMPDEST PUSH2 0x15B2 CALLDATASIZE PUSH2 0x13DD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1625 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8E9E7099 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 CALLER GAS STATICCALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x15FE SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1602 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x8351EEA7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x34F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x161F SWAP2 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x1617 DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1E42 JUMP JUMPDEST DUP3 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1630 DUP2 DUP4 DUP6 PUSH2 0x1D47 JUMP JUMPDEST SWAP1 PUSH2 0x1662 PUSH2 0x165E PUSH2 0x1640 DUP5 PUSH2 0x1B8D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD EQ SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x16FC JUMPI PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH2 0x167F PUSH2 0x100 DUP4 ADD DUP4 PUSH2 0x1D6F JUMP JUMPDEST SWAP5 SWAP1 SWAP2 PUSH2 0x168E PUSH1 0xE0 DUP6 ADD PUSH2 0x1DA1 JUMP JUMPDEST SWAP4 PUSH2 0x169D PUSH2 0x120 DUP3 ADD DUP3 PUSH2 0x1D6F JUMP JUMPDEST SWAP6 SWAP1 SWAP6 ADDRESS EXTCODESIZE ISZERO PUSH2 0x302 JUMPI PUSH1 0x0 SWAP7 PUSH2 0x16CB SWAP3 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP9 DUP10 SWAP8 DUP9 SWAP8 PUSH4 0x34116837 PUSH1 0xE2 SHL DUP10 MSTORE PUSH1 0x4 DUP10 ADD PUSH2 0x1DBC JUMP JUMPDEST SUB SWAP2 ADDRESS GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x965 JUMPI PUSH1 0x1 SWAP3 PUSH2 0x16E7 JUMPI JUMPDEST POP JUMPDEST ADD PUSH2 0x15B5 JUMP JUMPDEST DUP1 PUSH2 0x959 PUSH1 0x0 PUSH2 0x16F6 SWAP4 PUSH2 0xF3B JUMP JUMPDEST CODESIZE PUSH2 0x16DF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH2 0x16E1 JUMP JUMPDEST SWAP2 PUSH1 0x80 PUSH2 0x589 SWAP3 SWAP5 SWAP4 PUSH2 0x1745 PUSH1 0x40 PUSH1 0xC0 DUP4 ADD SWAP8 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE ADD MLOAD PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x1781 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x23 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x179A DUP3 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x17A2 PUSH2 0x1EA0 JUMP JUMPDEST POP PUSH2 0x17AB PUSH2 0x1B5D JUMP JUMPDEST POP PUSH2 0x17B4 PUSH2 0x1EA0 JUMP JUMPDEST POP PUSH2 0x17BD PUSH2 0x1B5D JUMP JUMPDEST POP DUP1 CALLDATALOAD PUSH2 0x1816 PUSH2 0x17E0 DUP3 PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x17DA DUP4 PUSH2 0xB0C JUMP JUMPDEST CALLER PUSH2 0x22CC JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH2 0x17ED DUP7 DUP7 PUSH2 0x20E0 JUMP JUMPDEST SWAP1 PUSH2 0x17F7 DUP4 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1804 DUP5 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP5 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x291C JUMP JUMPDEST SWAP2 PUSH32 0x85496B760A4B7F8D66384B9DF21B381F5D1B1E79F229A47AAF4C232EDC2FE59A PUSH2 0x1840 PUSH2 0x1B3F JUMP JUMPDEST SWAP5 DUP4 DUP7 MSTORE DUP1 PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x1855 DUP6 MLOAD SWAP4 PUSH2 0x1B8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP5 ADD MSTORE CALLER SWAP3 PUSH1 0x60 SWAP1 LOG3 PUSH2 0x3B9 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x1705 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x780 JUMPI DUP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x18A5 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x18AD PUSH2 0x207D JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x1926 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCA5EB5E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x965 JUMPI DUP3 SWAP1 PUSH2 0x1918 JUMPI DUP1 RETURN JUMPDEST PUSH2 0x1921 SWAP2 PUSH2 0xF3B JUMP JUMPDEST CODESIZE DUP2 DUP1 RETURN JUMPDEST POP POP REVERT JUMPDEST PUSH2 0x1933 CALLDATASIZE PUSH2 0x713 JUMP JUMPDEST POP POP POP SWAP3 SWAP1 ADDRESS CALLER SUB PUSH2 0x194C JUMPI PUSH2 0x7FF PUSH2 0x7F3 DUP6 DUP4 PUSH2 0x2706 JUMP JUMPDEST PUSH4 0x29A949D PUSH1 0xE3 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH32 0xD48D879CEF83A1C0BDDA516F27B13DDB1B3F8BBAC1C9E1511BB2A659C2427760 PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x199D DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x19A5 PUSH2 0x207D JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH2 0x1A62 PUSH1 0x4 CALLDATALOAD PUSH2 0x1A2A DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1A37 DUP3 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x6 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1A88 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x1A90 PUSH2 0x207D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x1AE2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH2 0x1B14 CALLDATASIZE PUSH2 0x6D5 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 CALLDATALOAD PUSH2 0x1B24 DUP2 PUSH2 0xB0C JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP2 ADD CALLDATALOAD PUSH1 0x40 MLOAD SWAP2 EQ DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x589 PUSH1 0x40 DUP4 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x589 PUSH1 0xA0 DUP4 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B6A DUP3 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 DUP3 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF1B JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x360 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF1B JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x1BD4 DUP3 PUSH2 0x1BAD JUMP JUMPDEST SWAP2 PUSH2 0x1BE2 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xF3B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x302 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 DUP4 PUSH1 0x2 GT PUSH2 0x302 JUMPI DUP4 GT PUSH2 0x302 JUMPI PUSH1 0x2 ADD SWAP2 PUSH1 0x1 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP4 PUSH2 0x589 SWAP4 SWAP6 SWAP5 SWAP6 PUSH1 0x40 MLOAD SWAP7 DUP5 PUSH2 0x1C3E DUP10 SWAP7 MLOAD DUP1 SWAP3 DUP8 DUP1 DUP11 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST DUP6 ADD SWAP2 DUP5 DUP4 ADD CALLDATACOPY ADD ADD PUSH1 0x0 DUP2 MSTORE SUB PUSH1 0x1F NOT DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0xF3B JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x360 SWAP4 DUP2 DUP2 MSTORE ADD SWAP2 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0xFB4 PUSH2 0xFC0 SWAP3 PUSH4 0xFFFFFFFF PUSH2 0x1CC0 SWAP4 SWAP8 SWAP6 SWAP7 SWAP8 AND PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0xFFFF AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1D23 JUMPI DUP4 ISZERO PUSH2 0x1D1D JUMPI PUSH1 0x2 DUP5 LT ISZERO PUSH2 0x1CF4 JUMPI POP POP PUSH2 0x15FE PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH4 0x9A6D49CD PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x1C7A JUMP JUMPDEST SWAP1 SWAP3 DUP1 PUSH2 0x1D17 SWAP2 PUSH2 0x360 SWAP5 PUSH2 0x1D12 PUSH2 0x1D0D CALLDATASIZE DUP5 DUP5 PUSH2 0x1BC8 JUMP JUMPDEST PUSH2 0x2651 JUMP JUMPDEST PUSH2 0x1BFF JUMP JUMPDEST SWAP2 PUSH2 0x1C1C JUMP JUMPDEST SWAP3 POP SWAP1 POP JUMP JUMPDEST POP SWAP2 SWAP1 PUSH2 0x360 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x1BC8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1D6A JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x13E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x302 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D31 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x302 JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x302 JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x360 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SUB PUSH2 0x302 JUMPI JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH2 0x1E18 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x40 PUSH2 0x360 SWAP11 SWAP9 SWAP10 SWAP8 PUSH4 0xFFFFFFFF DUP2 CALLDATALOAD PUSH2 0x1DE4 DUP2 PUSH2 0xB0C JUMP JUMPDEST AND DUP9 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x20 DUP10 ADD MSTORE ADD CALLDATALOAD PUSH2 0x1DFC DUP2 PUSH2 0x1DAB JUMP JUMPDEST AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xE0 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD SWAP2 PUSH2 0x1C59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0xA0 DUP3 ADD MSTORE DUP1 DUP5 SUB PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE PUSH2 0x1C59 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x302 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x302 JUMPI DUP1 MLOAD PUSH2 0x1E74 DUP2 PUSH2 0x1BAD JUMP JUMPDEST SWAP3 PUSH2 0x1E82 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xF3B JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x302 JUMPI PUSH2 0x360 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1EAD DUP3 PUSH2 0xF20 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 PUSH2 0x1EC3 PUSH2 0x1B5D JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1EF7 SWAP1 PUSH2 0xC35 PUSH32 0x0 DUP1 SWAP3 PUSH2 0x26D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP1 DUP5 LT PUSH2 0x1F04 JUMPI POP JUMP JUMPDEST DUP4 PUSH4 0x71C4EFED PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH4 0xFFFFFFFF AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x1F3C JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0xF6FF4FB7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD PUSH2 0x360 DUP2 PUSH2 0x1DAB JUMP JUMPDEST PUSH2 0x360 SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0x2067 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 ISZERO PUSH2 0xDAB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 SWAP3 SWAP1 SLOAD DUP5 DUP2 LT PUSH2 0x2041 JUMPI SWAP2 PUSH2 0x202E SWAP2 PUSH2 0x2013 DUP7 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP8 SWAP7 SWAP6 SUB SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP4 ADD SWAP1 SSTORE POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE POP PUSH1 0x44 DUP3 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4B637E8F PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2091 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x302 JUMPI MLOAD PUSH2 0x360 DUP2 PUSH2 0xBA1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x20D2 PUSH2 0x360 SWAP4 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x32A JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x2145 PUSH2 0x216C SWAP4 PUSH2 0x2128 PUSH2 0x211C PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP3 PUSH32 0x0 SWAP1 PUSH2 0x26D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x213F PUSH2 0x2138 PUSH1 0xA0 DUP8 ADD DUP8 PUSH2 0x1D6F JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x1BC8 JUMP JUMPDEST SWAP2 PUSH2 0x285D JUMP JUMPDEST SWAP4 SWAP1 SWAP3 DUP4 SWAP5 PUSH1 0x0 EQ PUSH2 0x21E8 JUMPI PUSH1 0x2 SWAP1 JUMPDEST PUSH2 0x15A1 PUSH2 0x2161 DUP3 PUSH2 0x1B8D JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP2 ADD SWAP1 PUSH2 0x1D6F JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 DUP3 PUSH2 0x2188 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x43A78EB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 PUSH1 0x20 SWAP3 DUP5 SWAP3 DUP4 SWAP2 DUP3 SWAP2 PUSH2 0x21AC SWAP2 PUSH1 0x4 DUP5 ADD PUSH2 0x20BB JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x21BD JUMPI POP JUMP JUMPDEST PUSH2 0x21DE SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x21E1 JUMPI JUMPDEST PUSH2 0x21D6 DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x20A6 JUMP JUMPDEST POP JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH2 0x2155 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH2 0x2208 DUP2 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH2 0x302 JUMPI PUSH2 0x360 SWAP2 PUSH2 0x21F0 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP4 PUSH1 0x40 DUP4 MSTORE PUSH4 0xFFFFFFFF DUP2 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP2 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 PUSH2 0x2280 PUSH2 0x226A PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 DUP9 ADD MSTORE PUSH1 0xE0 DUP8 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD DUP7 DUP3 SUB PUSH1 0x3F NOT ADD PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x32A JUMP JUMPDEST SWAP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x22C3 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xDAB JUMPI DUP2 PUSH2 0x360 SWAP2 PUSH2 0x27DD JUMP JUMPDEST POP PUSH2 0xDEAD PUSH2 0x22AA JUMP JUMPDEST SWAP3 POP PUSH2 0x2300 SWAP1 SWAP4 SWAP2 SWAP4 PUSH2 0xC35 PUSH32 0x0 DUP1 SWAP3 PUSH2 0x26D3 JUMP JUMPDEST SWAP3 DUP1 DUP5 LT PUSH2 0x1F04 JUMPI POP DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP4 SWAP1 DUP3 ISZERO PUSH2 0x2067 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT PUSH2 0x23A9 JUMPI DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0x2386 PUSH1 0x0 SWAP7 SWAP6 PUSH2 0x23A4 SWAP5 SUB SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH2 0x2394 DUP2 PUSH1 0x7 SLOAD SUB PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1D6A JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT PUSH2 0x23EF JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x242A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x241E JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2413 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x240A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF1B JUMPI PUSH2 0x245B DUP2 PUSH2 0x2455 DUP5 SLOAD PUSH2 0xE2D JUMP JUMPDEST DUP5 PUSH2 0x23E2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x249C JUMPI DUP2 SWAP1 PUSH2 0x248D SWAP4 SWAP5 SWAP6 PUSH1 0x0 SWAP3 PUSH2 0x2491 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH2 0x24B1 DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x24ED JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x24D4 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x24CA JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP2 PUSH1 0x20 PUSH1 0x40 DUP4 PUSH1 0x5 SHL DUP4 ADD ADD SWAP5 ADD SWAP3 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x2538 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH1 0x20 DUP1 PUSH2 0x257B PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE PUSH1 0x60 PUSH1 0x40 DUP12 MLOAD PUSH4 0xFFFFFFFF DUP2 MLOAD AND DUP5 MSTORE PUSH2 0xFFFF DUP7 DUP3 ADD MLOAD AND DUP7 DUP6 ADD MSTORE ADD MLOAD SWAP2 DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP8 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x2529 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x261A JUMPI DUP1 PUSH2 0x25B0 PUSH1 0x40 PUSH2 0x25A8 PUSH1 0x1 SWAP5 DUP7 PUSH2 0x23CE JUMP JUMPDEST MLOAD ADD MLOAD PUSH2 0x2651 JUMP JUMPDEST PUSH2 0x2614 PUSH1 0x40 PUSH2 0x25BF DUP4 DUP7 PUSH2 0x23CE JUMP JUMPDEST MLOAD ADD MLOAD PUSH4 0xFFFFFFFF PUSH2 0x25D1 DUP5 DUP8 PUSH2 0x23CE JUMP JUMPDEST MLOAD MLOAD AND PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x260F PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x25FD PUSH1 0x20 PUSH2 0x25F3 DUP8 DUP11 PUSH2 0x23CE JUMP JUMPDEST MLOAD ADD MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2434 JUMP JUMPDEST ADD PUSH2 0x258D JUMP JUMPDEST POP PUSH2 0x264C PUSH32 0xBE4864A8E820971C0247F5992E2DA559595F7BF076A21CB5928D443D2A13B674 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2505 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH1 0x2 DUP4 ADD MLOAD AND SUB PUSH2 0x2664 JUMPI POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9A6D49CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x15FE SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x502 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x4EC JUMPI PUSH2 0x26D0 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE JUMP JUMPDEST DUP2 ISZERO PUSH2 0x26DD JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x11B1 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 GT PUSH2 0x302 JUMPI CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x28 GT PUSH2 0x780 JUMPI POP PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x360 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH32 0x0 SWAP2 AND PUSH2 0x26F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 SWAP3 DUP2 PUSH1 0x28 GT PUSH2 0x1433 JUMPI SWAP2 SWAP3 POP PUSH2 0x360 SWAP2 CALLDATASIZE SWAP2 PUSH1 0x27 NOT ADD SWAP1 PUSH1 0x28 ADD PUSH2 0x1BC8 JUMP JUMPDEST PUSH1 0x4C SWAP2 SWAP4 PUSH2 0x360 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND PUSH1 0x20 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL SWAP1 PUSH1 0xE0 SHL AND PUSH1 0x28 DUP5 ADD MSTORE PUSH1 0x2C DUP4 ADD MSTORE PUSH2 0x27CC DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST DUP2 ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xF3B JUMP JUMPDEST SWAP1 PUSH1 0x7 SLOAD SWAP1 DUP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x11B1 JUMPI PUSH1 0x20 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH1 0x0 SWAP4 PUSH1 0x7 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP5 DUP6 ISZERO DUP6 EQ PUSH2 0x283B JUMPI POP DUP1 PUSH1 0x7 SLOAD SUB PUSH1 0x7 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0x2832 JUMP JUMPDEST DUP3 MLOAD ISZERO DUP1 ISZERO SWAP4 SWAP1 PUSH2 0x28AB JUMPI PUSH2 0x28A8 SWAP2 PUSH1 0x68 SWAP2 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND PUSH1 0x40 DUP4 ADD MSTORE CALLER PUSH1 0x48 DUP4 ADD MSTORE PUSH2 0x27CC DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST SWAP2 JUMP JUMPDEST POP SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH2 0x28A8 PUSH1 0x48 DUP3 PUSH2 0xF3B JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x302 JUMPI PUSH2 0x2914 SWAP1 PUSH1 0x40 DUP1 MLOAD SWAP4 PUSH2 0x28F7 DUP6 PUSH2 0xF20 JUMP JUMPDEST DUP1 MLOAD DUP6 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x2909 DUP2 PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE ADD PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2979 PUSH1 0x80 SWAP5 SWAP3 PUSH2 0x2995 SWAP7 SWAP5 PUSH2 0x2930 PUSH2 0x1EA0 JUMP JUMPDEST POP PUSH1 0x20 PUSH2 0x293D DUP7 MLOAD PUSH2 0x2A0D JUMP JUMPDEST SWAP6 ADD SWAP2 DUP3 MLOAD DUP1 PUSH2 0x29FE JUMPI JUMPDEST POP PUSH2 0x2952 DUP6 PUSH2 0x1F1C JUMP JUMPDEST SWAP3 MLOAD ISZERO ISZERO SWAP3 PUSH2 0x2962 PUSH2 0xC7D PUSH2 0x1B4E JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO DUP6 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP5 DUP3 SWAP4 PUSH4 0x2637A45 PUSH1 0xE4 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x222C JUMP JUMPDEST SUB SWAP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x965 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x29D5 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x360 SWAP2 POP PUSH1 0x80 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x29F7 JUMPI JUMPDEST PUSH2 0x29EF DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x28DA JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x29E5 JUMP JUMPDEST PUSH2 0x2A07 SWAP1 PUSH2 0x2A2C JUMP JUMPDEST CODESIZE PUSH2 0x2948 JUMP JUMPDEST DUP1 CALLVALUE SUB PUSH2 0x2A17 JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4FB8209 PUSH1 0xE5 SHL PUSH1 0x0 MSTORE CALLVALUE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x393F8765 PUSH1 0xE2 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x965 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2AAA JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x2A99 JUMPI PUSH2 0x589 SWAP3 CALLER SWAP1 PUSH2 0x2AE5 JUMP JUMPDEST PUSH4 0x29B99A95 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x2ADD JUMPI JUMPDEST DUP2 PUSH2 0x2AC5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x302 JUMPI MLOAD PUSH2 0x2AD7 DUP2 PUSH2 0x440 JUMP JUMPDEST CODESIZE PUSH2 0x2A7D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2AB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP2 MSTORE SWAP2 PUSH2 0x2B71 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x2B32 PUSH1 0x84 DUP8 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x2BC2 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2B52 DUP3 PUSH2 0x1BAD JUMP JUMPDEST SWAP2 PUSH2 0x2B60 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xF3B JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x2BCA JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x2BA4 JUMPI JUMPDEST POP POP PUSH2 0x2B87 JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2BBB SWAP3 POP SWAP1 PUSH1 0x20 DUP1 PUSH2 0x165E SWAP4 DUP4 ADD ADD SWAP2 ADD PUSH2 0x20A6 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x2B6B JUMP JUMPDEST SWAP1 PUSH2 0x2BF0 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x2BDF JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xA12F521 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x2C22 JUMPI JUMPDEST PUSH2 0x2C01 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x9996B315 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x2BF9 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0x80 CALLVALUE PUSH1 0x86 JUMPI PUSH1 0x1F PUSH2 0x2AE CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0x8B JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0x86 JUMPI PUSH1 0x4B PUSH1 0x20 PUSH1 0x45 DUP4 PUSH1 0xA1 JUMP JUMPDEST SWAP3 ADD PUSH1 0xA1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP1 DUP2 PUSH2 0xB5 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH1 0x86 JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x9BD713CF EQ PUSH2 0xE2 JUMPI POP PUSH4 0xD279E00A EQ PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xDD JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x15D0E4B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 PUSH1 0x24 DUP2 PUSH20 0x0 GAS DELEGATECALL DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x9D JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0xBF SWAP2 POP PUSH1 0xA0 RETURNDATASIZE PUSH1 0xA0 GT PUSH2 0xCA JUMPI JUMPDEST PUSH2 0xB7 DUP2 DUP4 PUSH2 0x168 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B7 JUMP JUMPDEST POP POP POP SWAP1 POP CODESIZE PUSH2 0x94 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xAD JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xDD JUMPI PUSH1 0x1 SLOAD PUSH4 0x15D0E4B5 PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 PUSH1 0x24 DUP2 PUSH20 0x0 GAS DELEGATECALL DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x144 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x15D SWAP2 POP PUSH1 0xA0 RETURNDATASIZE PUSH1 0xA0 GT PUSH2 0xCA JUMPI PUSH2 0xB7 DUP2 DUP4 PUSH2 0x168 JUMP JUMPDEST POP POP POP SWAP1 POP DUP3 PUSH2 0x94 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xDD JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0xDD JUMPI PUSH2 0x1CB DUP2 PUSH2 0x1A0 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 PUSH1 0x40 DUP2 ADD MLOAD SWAP2 PUSH2 0x1E9 PUSH1 0x80 PUSH1 0x60 DUP5 ADD MLOAD SWAP4 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"570:1443:78:-:0;;;;;;;;;;3166:4:29;570:1443:78;;;3166:4:29;570:1443:78;;;;;;;;;;;","linkReferences":{"src/libraries/OracleLib.sol":{"OracleLib":[{"start":31039,"length":20},{"start":31207,"length":20}]}}},"deployedBytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":1920,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_struct_NetworkConfig_fromMemory":{"entryPoint":1945,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":1864,"id":null,"parameterSlots":2,"returnSlots":0},"fun_log":{"entryPoint":2111,"id":19736,"parameterSlots":2,"returnSlots":0}},"object":"$1f06ac8d622ce42796cee98ba1044ce165$__5af480156100d15760209160009161009d575b50604051908152f35b6100bf915060a03d60a0116100ca575b6100b78183610168565b8101906101b7565b505050905038610094565b503d6100ad565b6040513d6000823e3d90fd5b600080fd5b346100dd5760003660031901126100dd576001546315d0e4b560e11b82526001600160a01b0316600482015260a08160248173__$1f06ac8d622ce42796cee98ba1044ce165$__5af480156100d1576020916000916101445750604051908152f35b61015d915060a03d60a0116100ca576100b78183610168565b505050905082610094565b90601f8019910116810190811067ffffffffffffffff82111761018a57604052565b634e487b7160e01b600052604160045260246000fd5b519069ffffffffffffffffffff821682036100dd57565b908160a09103126100dd576101cb816101a0565b916020820151916040810151916101e96080606084015193016101a0565b9056fea164736f6c634300081a000aa164736f6c634300081a000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xC0406226 EQ PUSH2 0x5F JUMPI POP PUSH4 0xF8CCBF47 EQ PUSH2 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x5C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5C JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xC SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x744 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x744 JUMPI PUSH2 0xD10 DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x720 JUMPI SWAP1 DUP3 SWAP2 PUSH2 0xDF3 DUP4 CODECOPY SUB SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0xC DUP1 SLOAD PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT AND PUSH1 0x18 SWAP3 SWAP1 SWAP3 SHL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x7FB5297F PUSH1 0xE0 SHL DUP2 MSTORE DUP2 DUP1 DUP3 PUSH1 0x4 DUP2 DUP4 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D GAS CALL DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH2 0x734 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH2 0x521 DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x720 JUMPI PUSH1 0x40 SWAP2 DUP4 SWAP2 PUSH2 0x8D2 DUP4 CODECOPY PUSH1 0x8 DUP2 MSTORE PUSH3 0x124F80 PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x40 MLOAD PUSH2 0xB60 DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x70C JUMPI SWAP1 DUP3 SWAP2 PUSH2 0x1B03 DUP4 CODECOPY SUB SWAP1 DUP4 CREATE DUP1 ISZERO PUSH2 0x5CF JUMPI PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 PUSH1 0xE0 SWAP2 DUP4 SWAP2 PUSH1 0x4 SWAP2 DUP4 SWAP2 PUSH1 0x18 SWAP2 SWAP1 SWAP2 SHR AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x6CE JUMPI DUP4 SWAP2 PUSH2 0x6ED JUMPI JUMPDEST POP PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2AE DUP1 DUP5 ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP6 DUP6 LT OR PUSH2 0x6D9 JUMPI SWAP2 PUSH1 0x40 SWAP4 SWAP2 DUP6 SWAP4 PUSH2 0x77F0 DUP6 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0xE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x18 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP2 AND SWAP1 PUSH1 0xE0 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x6CE JUMPI DUP4 SWAP2 PUSH2 0x6AF JUMPI JUMPDEST POP PUSH1 0xC0 ADD MLOAD PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP4 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH1 0xE0 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x671 JUMPI PUSH4 0xFFFFFFFF SWAP2 PUSH1 0xA0 SWAP2 DUP7 SWAP2 PUSH2 0x690 JUMPI JUMPDEST POP ADD MLOAD AND PUSH1 0x40 MLOAD SWAP3 PUSH2 0x315B SWAP3 DUP4 DUP6 ADD SWAP4 DUP6 DUP6 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT OR PUSH2 0x67C JUMPI SWAP2 DUP6 SWAP4 SWAP2 PUSH1 0x60 SWAP6 SWAP4 PUSH2 0x4695 DUP7 CODECOPY DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0xF DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x18 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP3 AND SWAP2 PUSH1 0xE0 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x40 SWAP2 DUP6 SWAP2 PUSH2 0x652 JUMPI JUMPDEST POP ADD MLOAD SWAP1 PUSH1 0x40 MLOAD PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0xE0 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL DUP1 ISZERO PUSH2 0x62A JUMPI PUSH1 0x60 PUSH1 0xE0 SWAP2 PUSH1 0x4 SWAP4 DUP9 SWAP2 PUSH2 0x635 JUMPI JUMPDEST POP ADD MLOAD SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x68D21DED PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x62A JUMPI PUSH1 0x80 SWAP2 DUP7 SWAP2 PUSH2 0x5FB JUMPI JUMPDEST POP ADD MLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2032 DUP1 DUP9 ADD SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP7 SWAP6 SWAP4 SWAP1 SWAP5 AND SWAP4 SWAP1 DUP9 DUP9 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP10 GT OR PUSH2 0x5E7 JUMPI SWAP2 PUSH1 0xC0 SWAP8 SWAP6 SWAP4 SWAP2 DUP10 SWAP8 SWAP6 SWAP4 PUSH2 0x2663 DUP10 CODECOPY DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SUB ADD SWAP1 DUP3 CREATE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x10 SLOAD AND OR PUSH1 0x10 SSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x3B756E9B PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 DUP2 DUP2 PUSH1 0x4 DUP2 DUP4 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D GAS CALL DUP1 ISZERO PUSH2 0x5CF JUMPI PUSH2 0x5BA JUMPI JUMPDEST POP PUSH2 0x537 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xF SLOAD AND PUSH2 0x4D3 DUP2 PUSH1 0x40 MLOAD PUSH2 0x4B2 PUSH1 0x40 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH15 0x70726963652066656564206D6F636B PUSH1 0x88 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH2 0x512 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x4F2 SWAP1 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH14 0x30B1B1B2B9B99036B0B730B3B2B9 PUSH1 0x91 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x520 PUSH1 0x40 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0x5 DUP2 MSTORE PUSH5 0x727570696F PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x40 DUP1 MLOAD PUSH2 0x572 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x556 SWAP1 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0xA DUP2 MSTORE PUSH10 0x1C1C9A58D94819995959 PUSH1 0xB2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH2 0x5B7 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x591 SWAP1 DUP3 PUSH2 0x748 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH20 0x636F6C6C61746572616C2073616665206B65657 PUSH1 0x64 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x83F JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP2 PUSH2 0x5C4 SWAP2 PUSH2 0x748 JUMP JUMPDEST PUSH2 0x5C JUMPI DUP1 CODESIZE PUSH2 0x491 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST PUSH2 0x61D SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI JUMPDEST PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x799 JUMP JUMPDEST CODESIZE PUSH2 0x3AF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x60B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x64C SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x388 JUMP JUMPDEST PUSH2 0x66B SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH2 0x6A9 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x6C8 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH2 0x706 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x623 JUMPI PUSH2 0x615 DUP2 DUP4 PUSH2 0x748 JUMP JUMPDEST CODESIZE PUSH2 0x1D5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH2 0x73D SWAP2 PUSH2 0x748 JUMP JUMPDEST CODESIZE DUP2 PUSH2 0x117 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x76A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x794 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x794 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 PUSH1 0xE0 DUP4 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP5 DUP3 LT OR PUSH2 0x82B JUMPI PUSH1 0x40 MSTORE PUSH2 0x7CD DUP3 PUSH2 0x780 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x7DB PUSH1 0x20 DUP4 ADD PUSH2 0x780 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x5C JUMPI POP PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x823 SWAP1 PUSH1 0xC0 ADD PUSH2 0x780 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH4 0x319AF333 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x8BB JUMPI POP POP SWAP2 PUSH2 0x8A8 PUSH1 0x84 DUP3 DUP5 PUSH1 0x0 SWAP8 SWAP6 SWAP7 DUP9 DUP5 DUP2 SWAP10 DUP6 ADD ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x748 JUMP JUMPDEST MLOAD SWAP1 PUSH11 0x636F6E736F6C652E6C6F67 GAS STATICCALL POP JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD PUSH1 0x84 DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x865 JUMP INVALID PUSH1 0x80 CALLVALUE PUSH1 0xC8 JUMPI PUSH1 0x1F PUSH2 0x521 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0xCD JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0xC8 JUMPI DUP1 MLOAD SWAP1 PUSH1 0xFF DUP3 AND DUP1 SWAP3 SUB PUSH1 0xC8 JUMPI PUSH1 0x20 ADD MLOAD SWAP1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH1 0xB2 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD PUSH2 0x43D SWAP1 DUP2 PUSH2 0xE4 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x313CE567 EQ PUSH2 0x3F9 JUMPI POP DUP1 PUSH4 0x4AA2011F EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x7284E416 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x9A6FC8F5 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA87A20CE EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xB633620C EQ PUSH2 0x112 JUMPI PUSH4 0xFEAF968C EQ PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x3 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP7 AND DUP1 DUP8 MSTORE SWAP4 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1D0 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x1FF PUSH2 0x417 JUMP JUMPDEST PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP7 DUP2 MSTORE SWAP4 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x31B JUMPI PUSH1 0x40 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH32 0x76302E382F74657374732F4D6F636B563341676772656761746F722E736F6C00 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 MSTORE DUP2 DUP2 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x303 JUMPI POP POP DUP2 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP5 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0x40 DUP8 DUP5 ADD ADD MSTORE DUP6 SWAP4 POP ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x3A2 PUSH2 0x417 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD SWAP3 AND DUP1 PUSH1 0x3 SSTORE DUP2 PUSH1 0x1 SSTORE DUP3 PUSH1 0x2 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x0 SLOAD AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x10D JUMPI JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x35 JUMPI PUSH3 0x10001 PUSH3 0xFF00FF NOT PUSH1 0xC SLOAD AND OR PUSH1 0xC SSTORE PUSH1 0x96 PUSH1 0xD SSTORE PUSH1 0x82 PUSH1 0xE SSTORE PUSH1 0x96 PUSH1 0xF SSTORE PUSH2 0xCD5 SWAP1 DUP2 PUSH2 0x3B DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x70E88AB4 EQ PUSH2 0x5EA JUMPI POP DUP1 PUSH4 0x989E6FD9 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xA31D502A EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xADDFCAE8 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0xC28975D1 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xD1A43BDA EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0xE28C79CF EQ PUSH2 0xA2 JUMPI PUSH4 0xF8CCBF47 EQ PUSH2 0x77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xC SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0xBB PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x108 PUSH1 0x40 MLOAD PUSH2 0xCD PUSH1 0x60 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x576F726B696E67206F6E206F7074696D69736D207365706F6C6961206E6F772E PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0x171717 PUSH1 0xE9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x122 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH20 0x61EC26AA57019C486B10502285C5A3D4A4750AD7 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9D28 PUSH1 0xA0 DUP3 ADD MSTORE PUSH20 0x6EDCE65403992E310A62460808C4B910D972F10F PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x19A PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x1DB PUSH1 0x40 MLOAD PUSH2 0x1AC PUSH1 0x40 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH32 0x576F726B696E67206F6E2062617365207365706F6C6961206E6F772E2E2E2E00 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1F5 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH20 0x4ADC67696BA383F43DD60A9E78F2C97FBBFC7CB1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9D35 PUSH1 0xA0 DUP3 ADD MSTORE PUSH20 0x6EDCE65403992E310A62460808C4B910D972F10F PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x269 PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x2AA PUSH1 0x40 MLOAD PUSH2 0x27B PUSH1 0x40 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH32 0x576F726B696E67206F6E20657468207365706F6C6961206E6F772E2E2E2E0000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2C4 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH20 0x694AA1769357215DE4FAC081BF1F309ADC325306 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9CE1 PUSH1 0xA0 DUP3 ADD MSTORE PUSH20 0x6EDCE65403992E310A62460808C4B910D972F10F PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x338 PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x17D PUSH1 0x40 MLOAD PUSH2 0x348 DUP2 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x11 SLOAD DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x12 SLOAD PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x13 SLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x14 SLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x15 SLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0xA0 DUP7 ADD MSTORE SWAP1 SWAP2 SHR SWAP1 SWAP2 AND PUSH1 0xC0 DUP4 ADD MSTORE MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x3BF PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x40C PUSH1 0x40 MLOAD PUSH2 0x3D1 PUSH1 0x60 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x576F746B696E67206F6E206F7074696D69736D206D61696E6E6574206E6F772E PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0x171717 PUSH1 0xE9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH2 0x17D PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x426 DUP5 PUSH2 0x6B0 JUMP JUMPDEST PUSH20 0x5535E67D8F99C8EBE961E1FC1F6DDAE96FEC82C9 DUP5 MSTORE PUSH20 0x13E3EE699D1909E989722E753853AE30B17E08C5 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH2 0x499 PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x4EC PUSH1 0x40 MLOAD PUSH2 0x4AB PUSH1 0x60 DUP3 PUSH2 0x6CC JUMP JUMPDEST PUSH1 0x29 DUP2 MSTORE PUSH32 0x6C6F63616C206E6574776F726B2064657465637465642C206465706C6F79696E PUSH1 0x20 DUP3 ADD MSTORE PUSH9 0x67206D6F636B732121 PUSH1 0xB8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x725 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x521 SWAP1 DUP2 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 DUP2 PUSH2 0x7A8 SWAP4 DUP6 DUP6 DUP4 CODECOPY PUSH1 0x8 DUP2 MSTORE PUSH3 0x124F80 PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 PUSH1 0x0 CREATE SWAP2 DUP3 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 SWAP3 DUP5 SWAP3 DUP4 CODECOPY PUSH1 0x8 DUP2 MSTORE PUSH5 0x4BDD384680 PUSH1 0x20 DUP3 ADD MSTORE SUB ADD SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x5C8 JUMPI PUSH2 0x17D SWAP2 PUSH1 0xD SLOAD PUSH1 0xE SLOAD SWAP2 PUSH1 0xF SLOAD SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x588 DUP7 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x7B PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x7B PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x653 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9D JUMPI PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP8 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP8 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0xA0 DUP6 ADD MSTORE SHR AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 SWAP1 RETURN JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP1 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5D4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x6FB DUP3 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH4 0x104C13EB PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x24 DUP4 ADD MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x791 JUMPI POP POP SWAP2 DUP2 PUSH2 0x77E PUSH1 0x64 DUP3 DUP7 PUSH1 0x0 DUP4 DUP2 SWAP10 DUP3 SWAP10 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x6CC JUMP JUMPDEST MLOAD SWAP1 PUSH11 0x636F6E736F6C652E6C6F67 GAS STATICCALL POP JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD PUSH1 0x64 DUP3 DUP8 ADD ADD MSTORE ADD PUSH2 0x74A JUMP INVALID PUSH1 0x80 CALLVALUE PUSH1 0xC8 JUMPI PUSH1 0x1F PUSH2 0x521 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0xCD JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0xC8 JUMPI DUP1 MLOAD SWAP1 PUSH1 0xFF DUP3 AND DUP1 SWAP3 SUB PUSH1 0xC8 JUMPI PUSH1 0x20 ADD MLOAD SWAP1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH1 0xB2 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD PUSH2 0x43D SWAP1 DUP2 PUSH2 0xE4 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x313CE567 EQ PUSH2 0x3F9 JUMPI POP DUP1 PUSH4 0x4AA2011F EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x7284E416 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x9A6FC8F5 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA87A20CE EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xB633620C EQ PUSH2 0x112 JUMPI PUSH4 0xFEAF968C EQ PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x3 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP7 AND DUP1 DUP8 MSTORE SWAP4 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x1 SSTORE TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1D0 JUMPI PUSH1 0x1 ADD DUP1 PUSH1 0x3 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x1FF PUSH2 0x417 JUMP JUMPDEST PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD PUSH1 0x5 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP7 DUP2 MSTORE SWAP4 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x31B JUMPI PUSH1 0x40 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH32 0x76302E382F74657374732F4D6F636B563341676772656761746F722E736F6C00 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 MSTORE DUP2 DUP2 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x303 JUMPI POP POP DUP2 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP5 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0x40 DUP8 DUP5 ADD ADD MSTORE DUP6 SWAP4 POP ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH2 0x3A2 PUSH2 0x417 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD SWAP3 AND DUP1 PUSH1 0x3 SSTORE DUP2 PUSH1 0x1 SSTORE DUP3 PUSH1 0x2 SSTORE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x10D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10D JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x0 SLOAD AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x10D JUMPI JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAE0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0xF179AAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC55E240E4 DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB20 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 SWAP1 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP1 DUP1 LOG4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB00 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6D DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAE0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 SWAP1 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP1 DUP1 LOG4 PUSH2 0x100 CALLER PUSH2 0x129 JUMP JUMPDEST POP PUSH2 0x10A CALLER PUSH2 0x1B5 JUMP JUMPDEST POP PUSH2 0x114 CALLER PUSH2 0x23B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7BE SWAP1 DUP2 PUSH2 0x2C2 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1AF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAC0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB20 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA80 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB40 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1AF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB40 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAE0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA80 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1AF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB00 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA80 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x400 JUMPI POP DUP1 PUSH4 0x117803E3 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x390 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x3DD1EB61 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x797669C9 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xAA232DC2 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0xEF JUMPI PUSH4 0xD547741F EQ PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH1 0x4 CALLDATALOAD PUSH2 0xC2 PUSH2 0x453 JUMP JUMPDEST SWAP1 PUSH2 0xE3 PUSH2 0xDE DUP3 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x70F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH2 0x146 PUSH2 0x469 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x16F SWAP1 PUSH1 0xFF AND PUSH2 0x47F JUMP JUMPDEST PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 MSTORE PUSH32 0xF179AAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC55E240E4 SLOAD PUSH2 0x1C3 SWAP1 PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0x1FD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH2 0x288 PUSH2 0x469 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2B1 SWAP1 PUSH1 0xFF AND PUSH2 0x47F JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6D SLOAD PUSH2 0x305 SWAP1 PUSH2 0x4CB JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0x323 PUSH2 0x453 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x33F JUMPI PUSH2 0xE8 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x70F JUMP JUMPDEST PUSH4 0x334BD919 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH2 0xE8 PUSH1 0x4 CALLDATALOAD PUSH2 0x36F PUSH2 0x453 JUMP JUMPDEST SWAP1 PUSH2 0x38B PUSH2 0xDE DUP3 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x684 JUMP JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH2 0x3BD PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x6270EDB7C868F86FDA4ADEDBA75108201087268EA345934DB8BAD688E1FEB91B DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xEA JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0xEA JUMPI PUSH1 0x20 SWAP2 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x442 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x43B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xEA JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xEA JUMPI JUMP JUMPDEST ISZERO PUSH2 0x486 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742068617665204D4F44455241544F525F524F4C450000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4EE JUMPI POP JUMP JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5D4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x781D7CAC9C378EFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6C PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5D4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x792 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x708 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x708 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID CALL PUSH26 0xAAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC SSTORE 0xE2 BLOCKHASH 0xE3 LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D0781D7CA 0xC9 0xC3 PUSH25 0xEFA22A7481E4D4D29704A680DDF504B3BC50B517700EE11E6C SLT SWAP10 0xB6 LOG3 DUP16 0x4C 0xD1 LOG4 0xAA 0xDF REVERT 0xAC CODECOPY 0x26 0x2D ADDRESS 0x24 BLOBBASEFEE ADD MULMOD DUP8 MSTORE8 0xE1 CODESIZE 0xED PUSH9 0xABCFD87EE48171F3D5 PC JUMP 0xE4 SDIV DUP15 0xD0 PUSH15 0xE057D79ADA615F65CDF5F9EE88181B SWAP2 TIMESTAMP 0x25 ADDMOD DUP16 DUP4 0x4F SWAP16 0x2D CREATE INVALID 0xD2 0xC7 PUSH23 0x48DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C89 JUMP 0xA6 PUSH3 0x70EDB7 0xC8 PUSH9 0xF86FDA4ADEDBA75108 KECCAK256 LT DUP8 0x26 DUP15 LOG3 GASLIMIT SWAP4 0x4D 0xB8 0xBA 0xD6 DUP9 0xE1 INVALID 0xB9 SHL CALL PUSH26 0xAAFCC4FF8137FCA1EF3B9EC4D165F87016BA123E7973FBA770BC SSTORE 0xE2 BLOCKHASH 0xE3 PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1F PUSH2 0x2032 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x1DC JUMPI DUP1 DUP5 SWAP3 PUSH1 0xC0 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1F2 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 PUSH2 0x5E PUSH1 0x60 DUP3 ADD PUSH2 0x1F7 JUMP JUMPDEST SWAP1 PUSH2 0x77 PUSH1 0xA0 PUSH2 0x70 PUSH1 0x80 DUP5 ADD PUSH2 0x1F7 JUMP JUMPDEST SWAP3 ADD PUSH2 0x1F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND SWAP5 DUP7 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE TIMESTAMP SWAP1 SSTORE PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x1DC JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH1 0x0 DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 PUSH1 0x0 DUP5 MSTORE PUSH1 0x7 SLOAD SWAP5 PUSH9 0x10000000000000000 DUP7 LT ISZERO PUSH2 0x1DC JUMPI PUSH1 0x1 DUP7 ADD DUP1 PUSH1 0x7 SSTORE DUP7 LT ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x5 SWAP6 PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP7 MLOAD DUP8 SSTORE PUSH1 0x1 DUP8 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD PUSH1 0x2 DUP7 ADD SSTORE MLOAD PUSH1 0x3 DUP6 ADD SSTORE MLOAD PUSH1 0x4 DUP5 ADD SSTORE MLOAD SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH2 0x1E26 SWAP1 DUP2 PUSH2 0x20C DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x5DF ADD MSTORE DUP2 DUP2 PUSH2 0xF8E ADD MSTORE DUP2 DUP2 PUSH2 0x19CD ADD MSTORE PUSH2 0x1D9E ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0xBE8 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 PUSH2 0x82B ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1F2 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x76D0815 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x188AFB74 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x194D7494 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2A8FFE80 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x310E84B5 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x314860F8 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x3F3D2A88 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x4A83CF49 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x515D22CE EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x6653B817 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x7649AEF1 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x797669C9 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x839159FB EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x9210AE64 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x9DC1B45B EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xAB845413 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0xAE0B163F EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0xB2088164 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xB603540F EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xBB828132 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xC48589CB EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xD7BF2AEF EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xEA6CFD4A EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xEAA45B42 EQ PUSH2 0x14A JUMPI PUSH4 0xFB5989A6 EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF5D JUMP JUMPDEST PUSH2 0xEBD JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST PUSH2 0xC41 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC0B JUMP JUMPDEST PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x813 JUMP JUMPDEST PUSH2 0xB4C JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x98C JUMP JUMPDEST PUSH2 0x974 JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x84E JUMP JUMPDEST PUSH2 0x551 JUMP JUMPDEST PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1E0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x1E9 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x206 SWAP1 JUMPDEST SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE DUP1 DUP1 ISZERO PUSH2 0x216 DUP2 ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x241 SWAP1 DUP4 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x237 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x1080 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x26C SWAP1 PUSH1 0x96 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x263 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x280 PUSH2 0x278 CALLER PUSH2 0x1902 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x335 JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 CALLER SWAP1 CALL ISZERO PUSH2 0x330 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2C0 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1106 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2E9 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH2 0x1A34 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x304 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x32B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE STOP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x288 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x370 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x379 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x394 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3C0 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD ISZERO ISZERO PUSH2 0x1118 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3EB SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x115B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x408 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x46E JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x483 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 PUSH2 0x808 JUMP JUMPDEST CODESIZE PUSH2 0x443 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x4B9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST POP PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x520 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI JUMPDEST POP PUSH2 0x1213 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x544 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x54A JUMPI JUMPDEST PUSH2 0x53C DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x11FB JUMP JUMPDEST CODESIZE PUSH2 0x51A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x532 JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x589 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x594 DUP3 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x59D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x5B8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x604 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x617 PUSH2 0x610 CALLER PUSH2 0x1B11 JUMP JUMPDEST DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x627 PUSH2 0x622 PUSH2 0x1BA6 JUMP JUMPDEST PUSH2 0x1BC2 JUMP JUMPDEST PUSH2 0x630 CALLER PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x643 PUSH2 0x63C DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH1 0xA SWAP1 DIV SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x65B PUSH2 0x64F PUSH2 0x13A4 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP6 AND DUP6 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x678 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x685 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH2 0x69F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x3B6F743B PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 SWAP1 DUP3 DUP1 PUSH2 0x6BF DUP5 PUSH1 0x4 DUP4 ADD PUSH2 0x1485 JUMP JUMPDEST SUB DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x7D7 JUMPI JUMPDEST POP PUSH2 0x6E1 DUP3 MLOAD CALLVALUE LT ISZERO PUSH2 0x14A2 JUMP JUMPDEST DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x75B SWAP4 PUSH1 0xC0 SWAP4 PUSH2 0x7C2 JUMPI JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x73A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP1 DUP1 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xC7C7F5B3 PUSH1 0xE0 SHL DUP5 MSTORE CALLER SWAP2 PUSH1 0x4 DUP6 ADD PUSH2 0x1554 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x794 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x7B5 SWAP1 PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x7BB JUMPI JUMPDEST PUSH2 0x7AD DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x14E3 JUMP JUMPDEST POP PUSH2 0x76A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7A3 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x7D1 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x724 JUMP JUMPDEST PUSH2 0x7FA SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x801 JUMPI JUMPDEST PUSH2 0x7F2 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1401 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x6D3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x33E JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x861 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x887 PUSH2 0x15C7 JUMP JUMPDEST POP CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x8A1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0xC0 PUSH2 0x8C3 PUSH2 0x8BD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP PUSH2 0x15F8 JUMP JUMPDEST PUSH2 0x909 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33E JUMPI DUP3 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x33E JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x33E JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x33E JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x96A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x987 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1814 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x9B9 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x9C4 DUP2 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x9CD CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x9E8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA0A SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST PUSH2 0xA13 CALLER PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0xA1E DUP2 DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0xA33 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x330 JUMPI PUSH2 0xACD SWAP4 PUSH2 0xAD1 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA94 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA9F CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xABA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0xAE0 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0xA74 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH1 0x4 CALLDATALOAD PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB17 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB07 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0xB40 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0xB5A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x40 PUSH1 0x60 MLOAD DUP1 DUP3 DUP5 ADD MSTORE PUSH2 0xB86 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x80 PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xC1E CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1902 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC57 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x2 PUSH2 0xC72 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xCAE CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1B11 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCC9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0xCF9 CALLVALUE ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xDAD JUMPI PUSH2 0xD59 PUSH2 0xD18 PUSH2 0x15C7 JUMP JUMPDEST CALLVALUE PUSH1 0x40 DUP3 ADD MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 SLOAD DUP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xD41 PUSH2 0xD3C CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x1327 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xD4F CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xD7F PUSH2 0xD7A PUSH1 0x3 SLOAD PUSH2 0x1589 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xACD SWAP1 PUSH2 0xD9B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 SWAP1 PUSH2 0xDC8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD PUSH2 0xDD5 CALLVALUE DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xDF6 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0xE11 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xE1D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xE38 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xE64 JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0x20 PUSH1 0xC0 DUP3 PUSH2 0xEB2 PUSH1 0x1 SWAP5 DUP9 MLOAD PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP3 SWAP2 ADD PUSH2 0xE57 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF58 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xEF4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL ADD DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x7 PUSH1 0x0 MSTORE PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0xF3A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xACD DUP8 DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 PUSH1 0x1 SWAP3 PUSH2 0xF4A DUP6 PUSH2 0x15F8 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST ISZERO PUSH2 0xFB8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E7420686176652061205661756C742C20637265617465206120 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7661756C7420666972737421 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1012 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x106F JUMPI JUMP JUMPDEST PUSH4 0x16670B47 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1087 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742062616C616E636520696E207661756C74000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x10D3 JUMPI JUMP JUMPDEST PUSH4 0x7F8953F7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH2 0x10F0 JUMP JUMPDEST ISZERO PUSH2 0x111F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x273790393AB834B79034B9B9BAB2B2103CB2BA17 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1162 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C65737320616D6F756E74206F6620727570696F206973737565640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x121A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742068617665204D4F44455241544F525F524F4C450000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x12C4 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI POP PUSH2 0x1213 JUMP JUMPDEST JUMP JUMPDEST ISZERO PUSH2 0x12CD JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656E74657220616D6F756E74206C657373207468616E204352502063726F7373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x9 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x9 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x64 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x3 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x3 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH5 0x2540BE400 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH5 0x2540BE400 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x138E JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12C4 PUSH1 0xE0 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x13C2 PUSH1 0x20 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE PUSH1 0x20 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH2 0x33E JUMPI PUSH2 0x1415 SWAP2 PUSH2 0x13C8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH4 0xFFFFFFFF DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xC0 PUSH2 0x1474 PUSH2 0x1462 PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xE0 PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD SWAP1 PUSH2 0xB27 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0xC0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 PUSH2 0x149D PUSH1 0x0 SWAP3 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST SWAP4 ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x14A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x696E73756666696369656E742066756E6473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 DUP2 SUB PUSH1 0xC0 DUP2 SLT PUSH2 0x33E JUMPI PUSH1 0x80 SGT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE DUP4 MLOAD DUP3 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI DUP3 PUSH1 0x80 SWAP2 PUSH1 0x20 PUSH2 0x1415 SWAP6 ADD MSTORE PUSH2 0x1548 DUP4 PUSH1 0x40 DUP9 ADD PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP5 ADD PUSH2 0x13C8 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH1 0x20 PUSH2 0x156D PUSH1 0x60 SWAP4 PUSH1 0x80 DUP7 MSTORE PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST DUP7 MLOAD DUP6 DUP4 ADD MSTORE SWAP6 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1415 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x15D4 DUP3 PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1605 DUP2 PUSH2 0x11BD JUMP JUMPDEST DUP3 SLOAD DUP2 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xF58 JUMPI DUP1 PUSH1 0x1 PUSH2 0x166D SWAP3 ADD PUSH1 0x7 SSTORE PUSH1 0x7 PUSH2 0x104C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x16C7 JUMPI PUSH1 0xA0 DUP2 PUSH1 0x5 SWAP3 MLOAD DUP5 SSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x1 DUP1 DUP5 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x16EE JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1710 PUSH2 0x861 PUSH1 0x1 PUSH2 0x1701 DUP2 SWAP6 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x171B DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x172E PUSH2 0x987 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x1739 DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x1751 PUSH2 0x174C DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x1D93 JUMP JUMPDEST POP PUSH2 0x175B DUP2 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x1765 PUSH2 0x125F JUMP JUMPDEST PUSH32 0x5C0DDC9BA6A3EE218F8B0B2E6583514FB1A2403FC52DD2ADB715D5CB41AB1A20 PUSH2 0x1793 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x179E DUP5 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x180B PUSH1 0x3 PUSH2 0x17B0 DUP7 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x4 PUSH2 0x17BE DUP8 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x5 PUSH2 0x17CC DUP9 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0xC0 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG1 ADD PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 SWAP1 PUSH2 0x1838 SWAP1 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1854 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD DUP1 PUSH2 0x1866 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1327 JUMP JUMPDEST PUSH2 0x186F SWAP2 PUSH2 0x1384 JUMP JUMPDEST PUSH1 0x64 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x188C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x796F752061726520696E206465627421 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x18CB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1E5BDD48185C99481A5B881919589D PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x1926 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x19F2 PUSH1 0x5 PUSH2 0x19C8 PUSH2 0x200 PUSH1 0x4 PUSH2 0x1956 PUSH2 0x200 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD SWAP5 PUSH2 0x19AE PUSH1 0x4 PUSH2 0x197E PUSH2 0x200 DUP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x19A5 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x1885 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x18C4 JUMP JUMPDEST DUP1 PUSH2 0x1A01 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH2 0x1A1A PUSH2 0x1A14 PUSH2 0x1A20 SWAP4 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1106 JUMP JUMPDEST PUSH2 0x1CD7 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1A49 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1AEE JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1AB0 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1ABB JUMPI JUMPDEST POP PUSH2 0x1AAB SWAP2 SWAP3 PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1384 JUMP JUMPDEST PUSH5 0x2540BE400 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x1AAB SWAP3 POP PUSH2 0x1AE1 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI JUMPDEST PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1A25 JUMP JUMPDEST SWAP2 PUSH2 0x1AA0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x4 SWAP3 POP PUSH2 0x1B0A PUSH1 0x20 SWAP2 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A70 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x96 PUSH1 0x5 PUSH2 0x1B35 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD LT PUSH2 0x1B9F JUMPI PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1B7C PUSH2 0x200 PUSH2 0x1B60 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD DUP2 PUSH1 0x1 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI PUSH2 0x1415 SWAP2 PUSH1 0x3 SWAP1 DIV PUSH2 0x1106 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x1415 PUSH1 0x22 DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1BD0 DUP4 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CCB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x1FBD PUSH1 0x83 SHL DUP2 MSTORE PUSH1 0x10 DUP4 MSTORE PUSH2 0x1BF5 PUSH1 0x30 DUP5 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1C03 DUP5 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CAA JUMPI DUP3 MLOAD PUSH2 0xFFFF DUP2 GT PUSH2 0x1C91 JUMPI PUSH2 0xFFFF PUSH1 0x1 SWAP2 AND ADD SWAP2 PUSH2 0xFFFF DUP4 GT PUSH2 0x1113 JUMPI PUSH1 0x20 PUSH1 0x4 SWAP3 PUSH2 0x1415 SWAP5 PUSH2 0x1C80 PUSH1 0x40 MLOAD SWAP8 DUP6 PUSH2 0x1C4A DUP11 SWAP8 MLOAD DUP1 SWAP3 DUP9 DUP1 DUP12 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL SWAP1 DUP8 ADD DUP7 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x23 DUP5 ADD MSTORE MLOAD SWAP3 DUP4 SWAP1 PUSH1 0x24 DUP5 ADD SWAP1 PUSH2 0xB04 JUMP JUMPDEST ADD ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH4 0x6DFCC65 PUSH1 0xE4 SHL PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xFFFF PUSH2 0x1CB6 DUP4 PUSH2 0x1DCD JUMP JUMPDEST PUSH4 0x3A51740D PUSH1 0xE0 SHL PUSH1 0x0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1CB6 PUSH2 0xFFFF SWAP2 PUSH2 0x1DCD JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1CEC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP5 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x330 JUMPI PUSH1 0x4 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1D71 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1D4D SWAP4 PUSH2 0x1AAB SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x1D52 JUMPI JUMPDEST POP PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x1D6B SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x1D47 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP3 POP PUSH2 0x1D8C SWAP1 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH2 0x1D9C SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH32 0x0 LT ISZERO PUSH2 0x1DC8 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 MLOAD LT PUSH2 0x1DDD JUMPI PUSH1 0x2 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7431365F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0xC0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x4D0 JUMPI PUSH1 0x0 SWAP1 PUSH1 0x60 DUP2 PUSH2 0x315B DUP1 CODESIZE SUB DUP1 SWAP2 PUSH2 0x22 DUP3 DUP6 PUSH2 0x4D5 JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x4CC JUMPI PUSH2 0x35 DUP2 PUSH2 0x50E JUMP JUMPDEST SWAP2 PUSH1 0x40 PUSH2 0x44 PUSH1 0x20 DUP5 ADD PUSH2 0x50E JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4C9 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x64 PUSH1 0x40 DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x5 DUP3 MSTORE PUSH5 0x527570696F PUSH1 0xD8 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP5 PUSH2 0x85 PUSH1 0x40 DUP8 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x3 DUP7 MSTORE PUSH3 0x52555 PUSH1 0xEC SHL PUSH1 0x20 DUP8 ADD MSTORE CALLER ISZERO PUSH2 0x4B5 JUMPI DUP2 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP6 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP2 SWAP1 MSTORE DUP1 EXTCODESIZE ISZERO PUSH2 0x4B1 JUMPI DUP2 PUSH1 0x24 DUP2 DUP6 DUP1 SWAP5 PUSH4 0xCA5EB5E1 PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x4A6 JUMPI PUSH2 0x496 JUMPI JUMPDEST POP PUSH1 0x64 PUSH1 0xA0 MSTORE DUP2 MLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x482 JUMPI PUSH1 0x8 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x478 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x464 JUMPI SWAP1 DUP2 PUSH1 0x1F DUP5 SWAP4 GT PUSH2 0x3F6 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x391 JUMPI DUP5 SWAP3 PUSH2 0x386 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x8 SSTORE JUMPDEST DUP4 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x372 JUMPI PUSH1 0x9 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x368 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x354 JUMPI PUSH1 0x1F DUP2 GT PUSH2 0x2F1 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x28E JUMPI SWAP5 DUP3 SWAP4 SWAP5 SWAP6 SWAP3 PUSH2 0x283 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x9 SSTORE JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x2C38 SWAP1 DUP2 PUSH2 0x523 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x796 ADD MSTORE DUP2 DUP2 PUSH2 0x8B6 ADD MSTORE DUP2 DUP2 PUSH2 0xCBF ADD MSTORE DUP2 DUP2 PUSH2 0x1039 ADD MSTORE DUP2 DUP2 PUSH2 0x18AF ADD MSTORE DUP2 DUP2 PUSH2 0x2999 ADD MSTORE PUSH2 0x2A3B ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0xC0F ADD MSTORE DUP2 DUP2 PUSH2 0x1340 ADD MSTORE DUP2 DUP2 PUSH2 0x1ED1 ADD MSTORE DUP2 DUP2 PUSH2 0x20F7 ADD MSTORE DUP2 DUP2 PUSH2 0x22DA ADD MSTORE PUSH2 0x2736 ADD MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1D0 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND PUSH1 0x9 DUP4 MSTORE DUP2 DUP4 KECCAK256 SWAP3 JUMPDEST DUP2 DUP2 LT PUSH2 0x2D9 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x2C0 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x9 SSTORE PUSH2 0x1E6 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2B2 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x29D JUMP JUMPDEST PUSH1 0x9 DUP3 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x34A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x33F JUMPI POP PUSH2 0x1B6 JUMP JUMPDEST DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x332 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x329 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x1A4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x16C JUMP JUMPDEST PUSH1 0x8 DUP6 MSTORE DUP2 DUP6 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x3DE JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x3C5 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x8 SSTORE PUSH2 0x182 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3B7 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x8 DUP6 MSTORE SWAP1 SWAP2 POP PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x45A JUMPI JUMPDEST SWAP1 PUSH1 0x1F DUP6 SWAP5 SWAP4 SWAP3 ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x44C JUMPI POP PUSH2 0x156 JUMP JUMPDEST DUP6 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x43F JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x431 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x141 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP2 PUSH2 0x4A0 SWAP2 PUSH2 0x4D5 JUMP JUMPDEST CODESIZE PUSH2 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x4F8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x4D0 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xD35B415 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x111ECDAD EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x13137D65 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x134D4F25 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x156A0D0F EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0x17442B70 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x1F5E1334 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x3400288B EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x3B6F743B EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x5167A5A8 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x52AE2879 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x5535D461 EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x5A0DFE4D EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0x5E280F11 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x6FC1B31E EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x7D25A05E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x82413EAC EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x857749B0 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x963EFCAA EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x9F68B964 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xB731EA0A EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xB98BD070 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0xBB0B6A53 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xBC70B354 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xBD815DB0 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xC7C7F5B3 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xCA5EB5E1 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0xD045A0DC EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xD4243885 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x21B JUMPI PUSH4 0xFF7BD03D EQ PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF8 JUMP JUMPDEST PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x1A6B JUMP JUMPDEST PUSH2 0x1A08 JUMP JUMPDEST PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x195D JUMP JUMPDEST PUSH2 0x192A JUMP JUMPDEST PUSH2 0x1885 JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST PUSH2 0x15A9 JUMP JUMPDEST PUSH2 0x1555 JUMP JUMPDEST PUSH2 0x151A JUMP JUMPDEST PUSH2 0x1437 JUMP JUMPDEST PUSH2 0x13B4 JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST PUSH2 0x1363 JUMP JUMPDEST PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x123B JUMP JUMPDEST PUSH2 0x11DD JUMP JUMPDEST PUSH2 0x11B6 JUMP JUMPDEST PUSH2 0x116E JUMP JUMPDEST PUSH2 0x1115 JUMP JUMPDEST PUSH2 0x10D8 JUMP JUMPDEST PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST PUSH2 0xFDB JUMP JUMPDEST PUSH2 0xF5C JUMP JUMPDEST PUSH2 0xDCB JUMP JUMPDEST PUSH2 0xD61 JUMP JUMPDEST PUSH2 0xBAB JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0xA45 JUMP JUMPDEST PUSH2 0xA29 JUMP JUMPDEST PUSH2 0xA0B JUMP JUMPDEST PUSH2 0x9E9 JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x9A6 JUMP JUMPDEST PUSH2 0x783 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST PUSH2 0x5C7 JUMP JUMPDEST PUSH2 0x451 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x302 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x31A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x343 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x360 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x8 SLOAD PUSH2 0x385 DUP2 PUSH2 0xE2D JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x41C JUMPI POP PUSH1 0x1 EQ PUSH2 0x3BD JUMPI JUMPDEST PUSH2 0x3B9 DUP4 PUSH2 0x3AD DUP2 DUP6 SUB DUP3 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x34F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x402 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x3AD PUSH2 0x39D JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x3EA JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x3AD SWAP1 POP PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x46E DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD CALLER ISZERO PUSH2 0x502 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0x4EC JUMPI PUSH2 0x4B2 DUP3 SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH1 0x20 SWAP1 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4A1406B1 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0xE602DF05 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x302 JUMPI SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x542 DUP6 PUSH1 0xA0 DUP2 ADD SWAP3 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 DUP7 ADD MSTORE DUP2 MLOAD DUP1 SWAP2 MSTORE PUSH1 0xC0 DUP6 ADD SWAP1 PUSH1 0x20 PUSH1 0xC0 DUP3 PUSH1 0x5 SHL DUP9 ADD ADD SWAP4 ADD SWAP2 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x58B JUMPI POP POP POP POP SWAP1 PUSH1 0x60 PUSH2 0x589 SWAP3 SWAP5 ADD SWAP1 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 PUSH1 0x20 DUP1 PUSH2 0x5B9 PUSH1 0x1 SWAP4 PUSH1 0xBF NOT DUP13 DUP3 SUB ADD DUP7 MSTORE PUSH1 0x40 DUP4 DUP11 MLOAD DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 DUP2 DUP6 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP7 ADD SWAP3 ADD SWAP3 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x565 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x5F7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x518 JUMP JUMPDEST PUSH2 0x5FF PUSH2 0x1B5D JUMP JUMPDEST POP PUSH2 0x608 PUSH2 0x1B5D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x615 DUP2 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x636 DUP3 DUP6 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH1 0x1F NOT DUP3 ADD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x688 JUMPI POP POP SWAP1 PUSH2 0x66C PUSH2 0x3B9 SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0x666 PUSH1 0x60 DUP4 ADD CALLDATALOAD SWAP3 PUSH2 0x1B8D JUMP JUMPDEST POP PUSH2 0x1EC8 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x676 PUSH2 0x1B3F JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH2 0x526 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x696 DUP2 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 DUP3 ADD MSTORE DUP3 DUP3 DUP10 ADD ADD MSTORE ADD PUSH2 0x642 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x302 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x302 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x302 JUMPI JUMP JUMPDEST PUSH1 0x3 NOT DUP2 ADD PUSH1 0xE0 DUP2 SLT PUSH2 0x302 JUMPI PUSH1 0x60 PUSH1 0x0 SWAP2 SLT PUSH2 0x780 JUMPI POP PUSH1 0x4 SWAP2 DUP3 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI DUP2 PUSH2 0x750 SWAP2 DUP5 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0xA4 CALLDATALOAD PUSH2 0x760 DUP2 PUSH2 0x440 JUMP JUMPDEST SWAP3 PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x77C SWAP3 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH2 0x78C CALLDATASIZE PUSH2 0x713 JUMP JUMPDEST POP SWAP2 SWAP5 SWAP3 SWAP2 POP POP CALLER PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x991 JUMPI DUP2 CALLDATALOAD PUSH2 0x7CE DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0x7D7 DUP2 PUSH2 0x1F1C JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP5 ADD CALLDATALOAD DUP1 SWAP3 SUB PUSH2 0x96A JUMPI POP POP PUSH2 0x7FF PUSH2 0x7F3 DUP6 DUP4 PUSH2 0x2706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP4 PUSH2 0x825 PUSH2 0x815 PUSH2 0x810 DUP4 DUP6 PUSH2 0x2712 JUMP JUMPDEST PUSH2 0x2728 JUMP JUMPDEST PUSH2 0x81E DUP6 PUSH2 0x1B8D JUMP JUMPDEST POP DUP7 PUSH2 0x229A JUMP JUMPDEST SWAP2 PUSH2 0x830 DUP3 PUSH1 0x28 LT SWAP1 JUMP JUMPDEST PUSH2 0x888 JUMPI JUMPDEST POP POP PUSH2 0x861 PUSH32 0xEFED6D3500546B29533B128A29E3A94D70788727F0507505AC12EAF2E578FD9C SWAP3 PUSH2 0x1B8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP4 LOG3 STOP JUMPDEST SWAP1 DUP3 PUSH2 0x8B3 SWAP3 PUSH2 0x8AD PUSH2 0x89D PUSH1 0x40 DUP9 ADD PUSH2 0x1F50 JUMP JUMPDEST SWAP4 PUSH2 0x8A7 DUP9 PUSH2 0x1B8D JUMP JUMPDEST SWAP3 PUSH2 0x275C JUMP JUMPDEST SWAP3 PUSH2 0x277F JUMP JUMPDEST SWAP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3E5AC809 PUSH1 0xE1 SHL DUP2 MSTORE SWAP4 PUSH1 0x0 SWAP2 DUP6 SWAP2 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH2 0x90D SWAP1 DUP12 DUP14 PUSH1 0x4 DUP6 ADD PUSH2 0x1F5A JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x965 JUMPI PUSH32 0xEFED6D3500546B29533B128A29E3A94D70788727F0507505AC12EAF2E578FD9C SWAP4 PUSH2 0x861 SWAP3 PUSH2 0x94A JUMPI JUMPDEST POP SWAP3 PUSH2 0x835 JUMP JUMPDEST DUP1 PUSH2 0x959 PUSH1 0x0 PUSH2 0x95F SWAP4 PUSH2 0xF3B JUMP JUMPDEST DUP1 PUSH2 0x2F7 JUMP JUMPDEST CODESIZE PUSH2 0x943 JUMP JUMPDEST PUSH2 0x1E36 JUMP JUMPDEST DUP1 PUSH2 0x979 PUSH4 0xFFFFFFFF SWAP3 PUSH2 0xB0C JUMP JUMPDEST PUSH4 0x309AFAF3 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x91AC5E4F PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x2 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0xB9270B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xA62 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0xA6E DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 DUP5 ADD PUSH2 0xAB7 JUMPI JUMPDEST PUSH2 0xAAB SWAP4 POP PUSH2 0x1F85 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 DUP5 LT PUSH2 0xAD3 JUMPI PUSH2 0xACE DUP4 PUSH2 0xAAB SWAP6 SUB CALLER DUP4 PUSH2 0x2689 JUMP JUMPDEST PUSH2 0xAA1 JUMP JUMPDEST DUP3 DUP5 PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x8 DUP2 MSTORE RETURN JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH32 0x238399D427B947898EDB290F5FF0F9109849B1C3BA196A42E35F00C50A54B98B PUSH1 0x4 CALLDATALOAD PUSH2 0xB58 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xB64 PUSH2 0x207D JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH2 0xB9C PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH4 0xFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0xBDB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x518 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0xBE7 DUP2 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xBEF PUSH2 0x1B5D JUMP JUMPDEST POP DUP2 CALLDATALOAD SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0xC3A PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0xC0A DUP7 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0xC35 PUSH32 0x0 DUP1 SWAP3 PUSH2 0x26D3 JUMP JUMPDEST PUSH2 0x26F3 JUMP JUMPDEST SWAP2 DUP1 DUP4 LT PUSH2 0xD49 JUMPI PUSH2 0xCBB PUSH1 0x40 DUP7 PUSH2 0xCA0 DUP8 PUSH2 0xC56 DUP9 DUP9 PUSH2 0x20E0 JUMP JUMPDEST SWAP1 PUSH2 0xC60 DUP6 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0xC68 PUSH2 0x1B5D JUMP JUMPDEST POP PUSH2 0xC72 DUP6 PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0xC89 PUSH2 0xC7D PUSH2 0x1B4E JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP8 AND DUP8 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE DUP6 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE JUMP JUMPDEST DUP2 MLOAD DUP1 SWAP4 DUP2 SWAP3 PUSH4 0x1BB8518B PUSH1 0xE3 SHL DUP4 MSTORE ADDRESS SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x222C JUMP JUMPDEST SUB DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x3B9 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0xD1A JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH2 0xD3C SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0xD42 JUMPI JUMPDEST PUSH2 0xD34 DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2218 JUMP JUMPDEST DUP3 PUSH2 0xCFB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xD2A JUMP JUMPDEST DUP3 PUSH4 0x71C4EFED PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xD7E DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xDC1 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xDAB JUMPI PUSH2 0xDA9 SWAP2 PUSH2 0x27DD JUMP JUMPDEST STOP JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xDEAD SWAP2 POP PUSH2 0xD91 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH1 0xA SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD ADDRESS DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND DUP3 SUB PUSH2 0x302 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND DUP3 SUB PUSH2 0x302 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xE5D JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xE47 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP2 SLOAD SWAP2 PUSH2 0xE77 DUP4 PUSH2 0xE2D JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xECD JUMPI POP PUSH1 0x1 EQ PUSH2 0xE93 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP4 SWAP5 POP SWAP2 SWAP3 JUMPDEST DUP4 DUP4 LT PUSH2 0xEB3 JUMPI POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP5 SWAP4 SWAP5 SLOAD DUP4 DUP6 DUP8 ADD ADD MSTORE ADD SWAP2 ADD SWAP2 SWAP1 PUSH2 0xEA2 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF SWAP3 SWAP2 SWAP3 NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xF1B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xF1B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xF1B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x3B9 PUSH2 0xFC0 PUSH2 0xFC7 PUSH2 0xFB4 PUSH1 0x4 CALLDATALOAD PUSH2 0xF85 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH2 0xF92 PUSH2 0xE0D JUMP JUMPDEST SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0xFFFF AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xE67 JUMP JUMPDEST SUB DUP3 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH2 0x1019 PUSH1 0x4 CALLDATALOAD PUSH2 0xFFD DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH32 0xF0BE4F1E87349231D80C36B33F9E8639658EEAF474014DEE15A3E6A4D4414197 PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x10A8 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x10B0 PUSH2 0x207D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x10F5 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x112E PUSH2 0x207D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x118B DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x63 NOT DUP3 ADD DUP3 DUP2 GT PUSH2 0x11B1 JUMPI PUSH2 0xDA9 SWAP3 PUSH4 0xFFFFFFFF PUSH1 0xA SLOAD PUSH1 0xA0 SHR AND SWAP3 PUSH2 0x22CC JUMP JUMPDEST PUSH2 0x1B97 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x11D2 PUSH1 0x4 CALLDATALOAD PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x11F7 CALLDATASIZE PUSH2 0x6D5 JUMP JUMPDEST POP PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x1217 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x6E6 JUMP JUMPDEST POP POP PUSH1 0x20 PUSH1 0x84 CALLDATALOAD PUSH2 0x1227 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND ADDRESS EQ DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x6 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x9 SLOAD PUSH2 0x12A2 DUP2 PUSH2 0xE2D JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x41C JUMPI POP PUSH1 0x1 EQ PUSH2 0x12C9 JUMPI PUSH2 0x3B9 DUP4 PUSH2 0x3AD DUP2 DUP6 SUB DUP3 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x130E JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x3AD PUSH2 0x39D JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x12F6 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH2 0x13A9 PUSH1 0x4 CALLDATALOAD PUSH2 0x139F DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x1F85 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH1 0x4 ADD PUSH1 0x0 SWAP3 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1433 JUMPI DUP2 CALLDATALOAD SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT PUSH2 0x780 JUMPI POP PUSH1 0x20 DUP1 DUP4 ADD SWAP3 DUP6 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x302 JUMPI SWAP2 SWAP1 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH2 0x1445 CALLDATASIZE PUSH2 0x13DD JUMP JUMPDEST SWAP1 PUSH2 0x144E PUSH2 0x207D JUMP JUMPDEST PUSH2 0x1457 DUP3 PUSH2 0x1B76 JUMP JUMPDEST SWAP1 PUSH2 0x1465 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 PUSH1 0x5 SHL DUP2 ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x302 JUMPI DUP1 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x148D JUMPI PUSH2 0xDA9 DUP5 PUSH2 0x258A JUMP JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI DUP3 ADD SWAP1 PUSH1 0x60 DUP3 CALLDATASIZE SUB SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14B7 DUP4 PUSH2 0xF20 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x14C2 DUP2 PUSH2 0xB0C JUMP JUMPDEST DUP4 MSTORE PUSH2 0x14D0 PUSH1 0x20 DUP3 ADD PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI ADD SWAP1 CALLDATASIZE PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x302 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x150A DUP5 SWAP4 CALLDATASIZE SWAP1 DUP6 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x1BC8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP5 ADD SWAP4 PUSH2 0x147D JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH4 0xFFFFFFFF PUSH1 0x4 CALLDATALOAD PUSH2 0x153C DUP2 PUSH2 0xB0C JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1572 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH2 0x157A PUSH2 0xE0D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI PUSH2 0x3B9 SWAP3 PUSH2 0x15A1 PUSH2 0xFC7 SWAP4 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x1C8B JUMP JUMPDEST PUSH2 0x15B2 CALLDATASIZE PUSH2 0x13DD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1625 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8E9E7099 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 CALLER GAS STATICCALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x15FE SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1602 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x8351EEA7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x34F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x161F SWAP2 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x1617 DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1E42 JUMP JUMPDEST DUP3 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1630 DUP2 DUP4 DUP6 PUSH2 0x1D47 JUMP JUMPDEST SWAP1 PUSH2 0x1662 PUSH2 0x165E PUSH2 0x1640 DUP5 PUSH2 0x1B8D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD EQ SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x16FC JUMPI PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH2 0x167F PUSH2 0x100 DUP4 ADD DUP4 PUSH2 0x1D6F JUMP JUMPDEST SWAP5 SWAP1 SWAP2 PUSH2 0x168E PUSH1 0xE0 DUP6 ADD PUSH2 0x1DA1 JUMP JUMPDEST SWAP4 PUSH2 0x169D PUSH2 0x120 DUP3 ADD DUP3 PUSH2 0x1D6F JUMP JUMPDEST SWAP6 SWAP1 SWAP6 ADDRESS EXTCODESIZE ISZERO PUSH2 0x302 JUMPI PUSH1 0x0 SWAP7 PUSH2 0x16CB SWAP3 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP9 DUP10 SWAP8 DUP9 SWAP8 PUSH4 0x34116837 PUSH1 0xE2 SHL DUP10 MSTORE PUSH1 0x4 DUP10 ADD PUSH2 0x1DBC JUMP JUMPDEST SUB SWAP2 ADDRESS GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x965 JUMPI PUSH1 0x1 SWAP3 PUSH2 0x16E7 JUMPI JUMPDEST POP JUMPDEST ADD PUSH2 0x15B5 JUMP JUMPDEST DUP1 PUSH2 0x959 PUSH1 0x0 PUSH2 0x16F6 SWAP4 PUSH2 0xF3B JUMP JUMPDEST CODESIZE PUSH2 0x16DF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH2 0x16E1 JUMP JUMPDEST SWAP2 PUSH1 0x80 PUSH2 0x589 SWAP3 SWAP5 SWAP4 PUSH2 0x1745 PUSH1 0x40 PUSH1 0xC0 DUP4 ADD SWAP8 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE ADD MLOAD PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x302 JUMPI PUSH2 0x1781 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x23 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x179A DUP3 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x17A2 PUSH2 0x1EA0 JUMP JUMPDEST POP PUSH2 0x17AB PUSH2 0x1B5D JUMP JUMPDEST POP PUSH2 0x17B4 PUSH2 0x1EA0 JUMP JUMPDEST POP PUSH2 0x17BD PUSH2 0x1B5D JUMP JUMPDEST POP DUP1 CALLDATALOAD PUSH2 0x1816 PUSH2 0x17E0 DUP3 PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x17DA DUP4 PUSH2 0xB0C JUMP JUMPDEST CALLER PUSH2 0x22CC JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH2 0x17ED DUP7 DUP7 PUSH2 0x20E0 JUMP JUMPDEST SWAP1 PUSH2 0x17F7 DUP4 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1804 DUP5 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP5 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x291C JUMP JUMPDEST SWAP2 PUSH32 0x85496B760A4B7F8D66384B9DF21B381F5D1B1E79F229A47AAF4C232EDC2FE59A PUSH2 0x1840 PUSH2 0x1B3F JUMP JUMPDEST SWAP5 DUP4 DUP7 MSTORE DUP1 PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x1855 DUP6 MLOAD SWAP4 PUSH2 0x1B8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP5 ADD MSTORE CALLER SWAP3 PUSH1 0x60 SWAP1 LOG3 PUSH2 0x3B9 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x1705 JUMP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x780 JUMPI DUP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x18A5 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x18AD PUSH2 0x207D JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x1926 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCA5EB5E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x965 JUMPI DUP3 SWAP1 PUSH2 0x1918 JUMPI DUP1 RETURN JUMPDEST PUSH2 0x1921 SWAP2 PUSH2 0xF3B JUMP JUMPDEST CODESIZE DUP2 DUP1 RETURN JUMPDEST POP POP REVERT JUMPDEST PUSH2 0x1933 CALLDATASIZE PUSH2 0x713 JUMP JUMPDEST POP POP POP SWAP3 SWAP1 ADDRESS CALLER SUB PUSH2 0x194C JUMPI PUSH2 0x7FF PUSH2 0x7F3 DUP6 DUP4 PUSH2 0x2706 JUMP JUMPDEST PUSH4 0x29A949D PUSH1 0xE3 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH32 0xD48D879CEF83A1C0BDDA516F27B13DDB1B3F8BBAC1C9E1511BB2A659C2427760 PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x199D DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x19A5 PUSH2 0x207D JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH2 0x1A62 PUSH1 0x4 CALLDATALOAD PUSH2 0x1A2A DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1A37 DUP3 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x6 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1A88 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x1A90 PUSH2 0x207D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x1AE2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x302 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x302 JUMPI PUSH1 0x20 PUSH2 0x1B14 CALLDATASIZE PUSH2 0x6D5 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 CALLDATALOAD PUSH2 0x1B24 DUP2 PUSH2 0xB0C JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP2 ADD CALLDATALOAD PUSH1 0x40 MLOAD SWAP2 EQ DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x589 PUSH1 0x40 DUP4 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x589 PUSH1 0xA0 DUP4 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B6A DUP3 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 DUP3 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF1B JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x360 DUP2 PUSH2 0xB0C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF1B JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x1BD4 DUP3 PUSH2 0x1BAD JUMP JUMPDEST SWAP2 PUSH2 0x1BE2 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xF3B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x302 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 DUP4 PUSH1 0x2 GT PUSH2 0x302 JUMPI DUP4 GT PUSH2 0x302 JUMPI PUSH1 0x2 ADD SWAP2 PUSH1 0x1 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP4 PUSH2 0x589 SWAP4 SWAP6 SWAP5 SWAP6 PUSH1 0x40 MLOAD SWAP7 DUP5 PUSH2 0x1C3E DUP10 SWAP7 MLOAD DUP1 SWAP3 DUP8 DUP1 DUP11 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST DUP6 ADD SWAP2 DUP5 DUP4 ADD CALLDATACOPY ADD ADD PUSH1 0x0 DUP2 MSTORE SUB PUSH1 0x1F NOT DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0xF3B JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x360 SWAP4 DUP2 DUP2 MSTORE ADD SWAP2 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0xFB4 PUSH2 0xFC0 SWAP3 PUSH4 0xFFFFFFFF PUSH2 0x1CC0 SWAP4 SWAP8 SWAP6 SWAP7 SWAP8 AND PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0xFFFF AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1D23 JUMPI DUP4 ISZERO PUSH2 0x1D1D JUMPI PUSH1 0x2 DUP5 LT ISZERO PUSH2 0x1CF4 JUMPI POP POP PUSH2 0x15FE PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH4 0x9A6D49CD PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x1C7A JUMP JUMPDEST SWAP1 SWAP3 DUP1 PUSH2 0x1D17 SWAP2 PUSH2 0x360 SWAP5 PUSH2 0x1D12 PUSH2 0x1D0D CALLDATASIZE DUP5 DUP5 PUSH2 0x1BC8 JUMP JUMPDEST PUSH2 0x2651 JUMP JUMPDEST PUSH2 0x1BFF JUMP JUMPDEST SWAP2 PUSH2 0x1C1C JUMP JUMPDEST SWAP3 POP SWAP1 POP JUMP JUMPDEST POP SWAP2 SWAP1 PUSH2 0x360 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x1BC8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1D6A JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x13E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x302 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D31 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x302 JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x302 JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x360 DUP2 PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SUB PUSH2 0x302 JUMPI JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH2 0x1E18 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x40 PUSH2 0x360 SWAP11 SWAP9 SWAP10 SWAP8 PUSH4 0xFFFFFFFF DUP2 CALLDATALOAD PUSH2 0x1DE4 DUP2 PUSH2 0xB0C JUMP JUMPDEST AND DUP9 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x20 DUP10 ADD MSTORE ADD CALLDATALOAD PUSH2 0x1DFC DUP2 PUSH2 0x1DAB JUMP JUMPDEST AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xE0 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD SWAP2 PUSH2 0x1C59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0xA0 DUP3 ADD MSTORE DUP1 DUP5 SUB PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE PUSH2 0x1C59 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x302 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x302 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x302 JUMPI DUP1 MLOAD PUSH2 0x1E74 DUP2 PUSH2 0x1BAD JUMP JUMPDEST SWAP3 PUSH2 0x1E82 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xF3B JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x302 JUMPI PUSH2 0x360 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1EAD DUP3 PUSH2 0xF20 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 PUSH2 0x1EC3 PUSH2 0x1B5D JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1EF7 SWAP1 PUSH2 0xC35 PUSH32 0x0 DUP1 SWAP3 PUSH2 0x26D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP1 DUP5 LT PUSH2 0x1F04 JUMPI POP JUMP JUMPDEST DUP4 PUSH4 0x71C4EFED PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH4 0xFFFFFFFF AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x1F3C JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0xF6FF4FB7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD PUSH2 0x360 DUP2 PUSH2 0x1DAB JUMP JUMPDEST PUSH2 0x360 SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0x2067 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 ISZERO PUSH2 0xDAB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 SWAP3 SWAP1 SLOAD DUP5 DUP2 LT PUSH2 0x2041 JUMPI SWAP2 PUSH2 0x202E SWAP2 PUSH2 0x2013 DUP7 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP8 SWAP7 SWAP6 SUB SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP4 ADD SWAP1 SSTORE POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE POP PUSH1 0x44 DUP3 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4B637E8F PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2091 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x302 JUMPI MLOAD PUSH2 0x360 DUP2 PUSH2 0xBA1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x20D2 PUSH2 0x360 SWAP4 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x32A JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x2145 PUSH2 0x216C SWAP4 PUSH2 0x2128 PUSH2 0x211C PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP3 PUSH32 0x0 SWAP1 PUSH2 0x26D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x213F PUSH2 0x2138 PUSH1 0xA0 DUP8 ADD DUP8 PUSH2 0x1D6F JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x1BC8 JUMP JUMPDEST SWAP2 PUSH2 0x285D JUMP JUMPDEST SWAP4 SWAP1 SWAP3 DUP4 SWAP5 PUSH1 0x0 EQ PUSH2 0x21E8 JUMPI PUSH1 0x2 SWAP1 JUMPDEST PUSH2 0x15A1 PUSH2 0x2161 DUP3 PUSH2 0x1B8D JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP2 ADD SWAP1 PUSH2 0x1D6F JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 DUP3 PUSH2 0x2188 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x43A78EB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 PUSH1 0x20 SWAP3 DUP5 SWAP3 DUP4 SWAP2 DUP3 SWAP2 PUSH2 0x21AC SWAP2 PUSH1 0x4 DUP5 ADD PUSH2 0x20BB JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x21BD JUMPI POP JUMP JUMPDEST PUSH2 0x21DE SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x21E1 JUMPI JUMPDEST PUSH2 0x21D6 DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x20A6 JUMP JUMPDEST POP JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH2 0x2155 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH2 0x2208 DUP2 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH2 0x302 JUMPI PUSH2 0x360 SWAP2 PUSH2 0x21F0 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP4 PUSH1 0x40 DUP4 MSTORE PUSH4 0xFFFFFFFF DUP2 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP2 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 PUSH2 0x2280 PUSH2 0x226A PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 DUP9 ADD MSTORE PUSH1 0xE0 DUP8 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD DUP7 DUP3 SUB PUSH1 0x3F NOT ADD PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x32A JUMP JUMPDEST SWAP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x22C3 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xDAB JUMPI DUP2 PUSH2 0x360 SWAP2 PUSH2 0x27DD JUMP JUMPDEST POP PUSH2 0xDEAD PUSH2 0x22AA JUMP JUMPDEST SWAP3 POP PUSH2 0x2300 SWAP1 SWAP4 SWAP2 SWAP4 PUSH2 0xC35 PUSH32 0x0 DUP1 SWAP3 PUSH2 0x26D3 JUMP JUMPDEST SWAP3 DUP1 DUP5 LT PUSH2 0x1F04 JUMPI POP DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP4 SWAP1 DUP3 ISZERO PUSH2 0x2067 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT PUSH2 0x23A9 JUMPI DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0x2386 PUSH1 0x0 SWAP7 SWAP6 PUSH2 0x23A4 SWAP5 SUB SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH2 0x2394 DUP2 PUSH1 0x7 SLOAD SUB PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1D6A JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT PUSH2 0x23EF JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x242A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x241E JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2413 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x240A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF1B JUMPI PUSH2 0x245B DUP2 PUSH2 0x2455 DUP5 SLOAD PUSH2 0xE2D JUMP JUMPDEST DUP5 PUSH2 0x23E2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x249C JUMPI DUP2 SWAP1 PUSH2 0x248D SWAP4 SWAP5 SWAP6 PUSH1 0x0 SWAP3 PUSH2 0x2491 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH2 0x24B1 DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x24ED JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x24D4 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x24CA JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP2 PUSH1 0x20 PUSH1 0x40 DUP4 PUSH1 0x5 SHL DUP4 ADD ADD SWAP5 ADD SWAP3 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x2538 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH1 0x20 DUP1 PUSH2 0x257B PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE PUSH1 0x60 PUSH1 0x40 DUP12 MLOAD PUSH4 0xFFFFFFFF DUP2 MLOAD AND DUP5 MSTORE PUSH2 0xFFFF DUP7 DUP3 ADD MLOAD AND DUP7 DUP6 ADD MSTORE ADD MLOAD SWAP2 DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST SWAP8 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x2529 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x261A JUMPI DUP1 PUSH2 0x25B0 PUSH1 0x40 PUSH2 0x25A8 PUSH1 0x1 SWAP5 DUP7 PUSH2 0x23CE JUMP JUMPDEST MLOAD ADD MLOAD PUSH2 0x2651 JUMP JUMPDEST PUSH2 0x2614 PUSH1 0x40 PUSH2 0x25BF DUP4 DUP7 PUSH2 0x23CE JUMP JUMPDEST MLOAD ADD MLOAD PUSH4 0xFFFFFFFF PUSH2 0x25D1 DUP5 DUP8 PUSH2 0x23CE JUMP JUMPDEST MLOAD MLOAD AND PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x260F PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x25FD PUSH1 0x20 PUSH2 0x25F3 DUP8 DUP11 PUSH2 0x23CE JUMP JUMPDEST MLOAD ADD MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2434 JUMP JUMPDEST ADD PUSH2 0x258D JUMP JUMPDEST POP PUSH2 0x264C PUSH32 0xBE4864A8E820971C0247F5992E2DA559595F7BF076A21CB5928D443D2A13B674 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2505 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH1 0x2 DUP4 ADD MLOAD AND SUB PUSH2 0x2664 JUMPI POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9A6D49CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x15FE SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x502 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x4EC JUMPI PUSH2 0x26D0 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE JUMP JUMPDEST DUP2 ISZERO PUSH2 0x26DD JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x11B1 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 GT PUSH2 0x302 JUMPI CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x28 GT PUSH2 0x780 JUMPI POP PUSH1 0x20 ADD CALLDATALOAD PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x360 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH32 0x0 SWAP2 AND PUSH2 0x26F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 SWAP3 DUP2 PUSH1 0x28 GT PUSH2 0x1433 JUMPI SWAP2 SWAP3 POP PUSH2 0x360 SWAP2 CALLDATASIZE SWAP2 PUSH1 0x27 NOT ADD SWAP1 PUSH1 0x28 ADD PUSH2 0x1BC8 JUMP JUMPDEST PUSH1 0x4C SWAP2 SWAP4 PUSH2 0x360 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND PUSH1 0x20 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL SWAP1 PUSH1 0xE0 SHL AND PUSH1 0x28 DUP5 ADD MSTORE PUSH1 0x2C DUP4 ADD MSTORE PUSH2 0x27CC DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST DUP2 ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xF3B JUMP JUMPDEST SWAP1 PUSH1 0x7 SLOAD SWAP1 DUP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x11B1 JUMPI PUSH1 0x20 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH1 0x0 SWAP4 PUSH1 0x7 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP5 DUP6 ISZERO DUP6 EQ PUSH2 0x283B JUMPI POP DUP1 PUSH1 0x7 SLOAD SUB PUSH1 0x7 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0x2832 JUMP JUMPDEST DUP3 MLOAD ISZERO DUP1 ISZERO SWAP4 SWAP1 PUSH2 0x28AB JUMPI PUSH2 0x28A8 SWAP2 PUSH1 0x68 SWAP2 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND PUSH1 0x40 DUP4 ADD MSTORE CALLER PUSH1 0x48 DUP4 ADD MSTORE PUSH2 0x27CC DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x307 JUMP JUMPDEST SWAP2 JUMP JUMPDEST POP SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC0 SHL SWAP1 PUSH1 0xC0 SHL AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH2 0x28A8 PUSH1 0x48 DUP3 PUSH2 0xF3B JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x302 JUMPI PUSH2 0x2914 SWAP1 PUSH1 0x40 DUP1 MLOAD SWAP4 PUSH2 0x28F7 DUP6 PUSH2 0xF20 JUMP JUMPDEST DUP1 MLOAD DUP6 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x2909 DUP2 PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE ADD PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2979 PUSH1 0x80 SWAP5 SWAP3 PUSH2 0x2995 SWAP7 SWAP5 PUSH2 0x2930 PUSH2 0x1EA0 JUMP JUMPDEST POP PUSH1 0x20 PUSH2 0x293D DUP7 MLOAD PUSH2 0x2A0D JUMP JUMPDEST SWAP6 ADD SWAP2 DUP3 MLOAD DUP1 PUSH2 0x29FE JUMPI JUMPDEST POP PUSH2 0x2952 DUP6 PUSH2 0x1F1C JUMP JUMPDEST SWAP3 MLOAD ISZERO ISZERO SWAP3 PUSH2 0x2962 PUSH2 0xC7D PUSH2 0x1B4E JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO DUP6 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP5 DUP3 SWAP4 PUSH4 0x2637A45 PUSH1 0xE4 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x222C JUMP JUMPDEST SUB SWAP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x965 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x29D5 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x360 SWAP2 POP PUSH1 0x80 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x29F7 JUMPI JUMPDEST PUSH2 0x29EF DUP2 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x28DA JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x29E5 JUMP JUMPDEST PUSH2 0x2A07 SWAP1 PUSH2 0x2A2C JUMP JUMPDEST CODESIZE PUSH2 0x2948 JUMP JUMPDEST DUP1 CALLVALUE SUB PUSH2 0x2A17 JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4FB8209 PUSH1 0xE5 SHL PUSH1 0x0 MSTORE CALLVALUE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x393F8765 PUSH1 0xE2 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x965 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2AAA JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x2A99 JUMPI PUSH2 0x589 SWAP3 CALLER SWAP1 PUSH2 0x2AE5 JUMP JUMPDEST PUSH4 0x29B99A95 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x2ADD JUMPI JUMPDEST DUP2 PUSH2 0x2AC5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xF3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x302 JUMPI MLOAD PUSH2 0x2AD7 DUP2 PUSH2 0x440 JUMP JUMPDEST CODESIZE PUSH2 0x2A7D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2AB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP2 MSTORE SWAP2 PUSH2 0x2B71 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x2B32 PUSH1 0x84 DUP8 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x2BC2 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2B52 DUP3 PUSH2 0x1BAD JUMP JUMPDEST SWAP2 PUSH2 0x2B60 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xF3B JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x2BCA JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x2BA4 JUMPI JUMPDEST POP POP PUSH2 0x2B87 JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2BBB SWAP3 POP SWAP1 PUSH1 0x20 DUP1 PUSH2 0x165E SWAP4 DUP4 ADD ADD SWAP2 ADD PUSH2 0x20A6 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x2B6B JUMP JUMPDEST SWAP1 PUSH2 0x2BF0 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x2BDF JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xA12F521 PUSH1 0xE1 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x2C22 JUMPI JUMPDEST PUSH2 0x2C01 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x9996B315 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x2BF9 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP PUSH1 0x80 CALLVALUE PUSH1 0x86 JUMPI PUSH1 0x1F PUSH2 0x2AE CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0x8B JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0x86 JUMPI PUSH1 0x4B PUSH1 0x20 PUSH1 0x45 DUP4 PUSH1 0xA1 JUMP JUMPDEST SWAP3 ADD PUSH1 0xA1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP1 DUP2 PUSH2 0xB5 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH1 0x86 JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x9BD713CF EQ PUSH2 0xE2 JUMPI POP PUSH4 0xD279E00A EQ PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xDD JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x15D0E4B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 PUSH1 0x24 DUP2 PUSH20 0x0 GAS DELEGATECALL DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x9D JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0xBF SWAP2 POP PUSH1 0xA0 RETURNDATASIZE PUSH1 0xA0 GT PUSH2 0xCA JUMPI JUMPDEST PUSH2 0xB7 DUP2 DUP4 PUSH2 0x168 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B7 JUMP JUMPDEST POP POP POP SWAP1 POP CODESIZE PUSH2 0x94 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xAD JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xDD JUMPI PUSH1 0x1 SLOAD PUSH4 0x15D0E4B5 PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 PUSH1 0x24 DUP2 PUSH20 0x0 GAS DELEGATECALL DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x144 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x15D SWAP2 POP PUSH1 0xA0 RETURNDATASIZE PUSH1 0xA0 GT PUSH2 0xCA JUMPI PUSH2 0xB7 DUP2 DUP4 PUSH2 0x168 JUMP JUMPDEST POP POP POP SWAP1 POP DUP3 PUSH2 0x94 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xDD JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0xDD JUMPI PUSH2 0x1CB DUP2 PUSH2 0x1A0 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 PUSH1 0x40 DUP2 ADD MLOAD SWAP2 PUSH2 0x1E9 PUSH1 0x80 PUSH1 0x60 DUP5 ADD MLOAD SWAP4 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"570:1443:78:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;800:28:27;570:1443:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;825:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;810:33;570:1443;;-1:-1:-1;;;;;;570:1443:78;;;;;;-1:-1:-1;;;;;570:1443:78;;;;;;;;853:19;;;;570:1443;;-1:-1:-1;;;853:19:78;;;;570:1443;;;853:19;570:1443;853:19;;;;;;;;570:1443;;;;;914:81;;;;;;;;825:18;914:81;;;;;570:1443;914:81;;;;;;954:1;1590:14:26;;977:7:78;1590:14:26;;;;914:81:78;;;;;;;;;570:1443;;1021:19;;;;;;;;825:18;1021:19;;;;;;;;;;;;;;;;;;;1005:35;1590:14:26;;-1:-1:-1;;;;;;1590:14:26;-1:-1:-1;;;;;570:1443:78;;;1590:14:26;;;810:33:78;1590:14:26;570:1443:78;;-1:-1:-1;;;1124:35:78;;570:1443;;;;;;;;;;1590:14:26;;;;570:1443:78;1124:35;;;;;;;;;;;570:1443;-1:-1:-1;1590:14:26;1124:48:78;1590:14:26;570:1443:78;;;1062:120;;;;;-1:-1:-1;;;;;570:1443:78;;;825:18;1062:120;;;;;;;;;570:1443;1062:120;;;;;;;-1:-1:-1;;;;;570:1443:78;1590:14:26;;;;;;1062:120:78;;;;;;;;;1050:132;1590:14:26;;-1:-1:-1;;;;;;1590:14:26;-1:-1:-1;;;;;570:1443:78;;;1590:14:26;;;810:33:78;1590:14:26;570:1443:78;;-1:-1:-1;;;1223:35:78;;570:1443;1590:14:26;;;;570:1443:78;;;;;;;;;1223:35;;;;;;;;;;;570:1443;-1:-1:-1;1223:46:78;;1590:14:26;1005:35:78;1590:14:26;570:1443:78;;-1:-1:-1;;;1319:35:78;;-1:-1:-1;;;;;570:1443:78;;;;;;;;;;;;;;;;;1319:35;;;;;;;1590:14:26;1319:35:78;:44;:35;;;;;570:1443;1319:44;;1590:14:26;;570:1443:78;;1200:173;;;;;;;;;;825:18;1200:173;;;;;;;;;1590:14:26;1200:173:78;;;;;1590:14:26;;;;;;570:1443:78;1590:14:26;;;1200:173:78;;;;;;;;;1192:181;1590:14:26;;-1:-1:-1;;;;;;1590:14:26;-1:-1:-1;;;;;570:1443:78;;;1590:14:26;;;;;;810:33:78;1590:14:26;570:1443:78;;-1:-1:-1;;;1425:35:78;;570:1443;1590:14:26;;;;570:1443:78;;;;;;;;;1425:35;;;;;;570:1443;1425:35;;;;;570:1443;1425:39;;1590:14:26;570:1443:78;;;1590:14:26;;;1478:35:78;;570:1443;1478:35;570:1443;1478:35;;;;;;;;1590:14:26;570:1443:78;1478:35;570:1443;1478:35;;;;;570:1443;1478:48;;1590:14:26;570:1443:78;;;1590:14:26;;;;;;;1540:35:78;;;;;;;;:51;:35;;;;;570:1443;-1:-1:-1;1540:51:78;1590:14:26;1005:35:78;1590:14:26;1050:132:78;1590:14:26;570:1443:78;;;1389:308;;;;;-1:-1:-1;;;;;570:1443:78;;;;;;;;;;1389:308;;;;825:18;1389:308;;;;;;1223:46;1389:308;;;;;;;;;;;1590:14:26;;;;;;570:1443:78;1590:14:26;;;;;;;1540:51:78;1590:14:26;;;1319:44:78;1590:14:26;;;1389:308:78;;;;;;;;;825:18;570:1443;;;;;1590:14:26;;;1383:314:78;1590:14:26;;;1383:314:78;1590:14:26;570:1443:78;1707:18;;;;570:1443;;-1:-1:-1;;;1707:18:78;;570:1443;;;;;;;;1707:18;;;;;;;;570:1443;;1854:36;825:18;570:1443;;;;1192:181;1590:14:26;570:1443:78;1735:46;570:1443;;;1590:14:26;570:1443:78;1590:14:26;;:::i;:::-;1192:181:78;1590:14:26;;-1:-1:-1;;;1590:14:26;;;;1735:46:78;:::i;:::-;1005:35;1590:14:26;570:1443:78;;;1791:53;;-1:-1:-1;;;;;570:1443:78;;1590:14:26;;570:1443:78;1590:14:26;:::i;:::-;1050:132:78;1590:14:26;;-1:-1:-1;;;1590:14:26;;;;1791:53:78;:::i;:::-;570:1443;;1590:14:26;570:1443:78;1590:14:26;;:::i;:::-;;;;-1:-1:-1;;;1590:14:26;;;;1854:36:78;:::i;:::-;1050:132;1590:14:26;570:1443:78;;;1900:45;;-1:-1:-1;;;;;570:1443:78;;1590:14:26;;570:1443:78;1590:14:26;:::i;:::-;;;;-1:-1:-1;;;1590:14:26;;;;1900:45:78;:::i;:::-;1383:314;1590:14:26;570:1443:78;;;1955:49;;-1:-1:-1;;;;;570:1443:78;;1590:14:26;;570:1443:78;1590:14:26;:::i;:::-;;;;-1:-1:-1;;;1590:14:26;;;;1955:49:78;:::i;:::-;570:1443;;1707:18;;;;;:::i;:::-;570:1443;;1707:18;;;;;570:1443;;;;;;;;;1389:308;570:1443;;;;;;;;;;;1389:308;-1:-1:-1;;;570:1443:78;;;;;;;;1540:35;;;;570:1443;1540:35;570:1443;1540:35;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;570:1443;;;;;;;;;1478:35;;;;;;;;;;;;;;:::i;:::-;;;;1425;;;;570:1443;1425:35;570:1443;1425:35;;;;;;;:::i;:::-;;;;;570:1443;;;;;;;;;1200:173;-1:-1:-1;;;570:1443:78;;;;;;;;1319:35;;;;570:1443;1319:35;570:1443;1319:35;;;;;;;:::i;:::-;;;;1223;;;;570:1443;1223:35;570:1443;1223:35;;;;;;;:::i;:::-;;;;;570:1443;;;;;;;;;1062:120;-1:-1:-1;;;570:1443:78;;;;;;;;1124:35;;;;570:1443;1124:35;570:1443;1124:35;;;;;;;:::i;:::-;;;;1021:19;-1:-1:-1;;;570:1443:78;;;;;;;;914:81;-1:-1:-1;;;570:1443:78;;;;;;;;853:19;;;;:::i;:::-;;;;;570:1443;;;;1590:14:26;;;;;;;;;;;;;;;;;;;;;:::o;:::-;570:1443:78;;;-1:-1:-1;570:1443:78;;;;;-1:-1:-1;570:1443:78;1590:14:26;;;-1:-1:-1;;;;;570:1443:78;;1590:14:26;;;;:::o;:::-;;;;;;;;;;;;;570:1443:78;;;-1:-1:-1;1590:14:26;;;;;;;;;;;;570:1443:78;1590:14:26;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;570:1443:78;1590:14:26;;;570:1443:78;1590:14:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1590:14:26;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;-1:-1:-1;;;570:1443:78;;;;;;;;7621:145:41;570:1443:78;;7704:54:41;;;;;;;;;;570:1443:78;7704:54:41;;;570:1443:78;;;;;;;;;-1:-1:-1;570:1443:78;;;;;;;;;7704:54:41;570:1443:78;;;-1:-1:-1;570:1443:78;;;;;;;;;;;825:18;570:1443;;;;;;;;1590:14:26;;;;;;;570:1443:78;;7704:54:41;;1590:14:26;;7704:54:41;;;;;;:::i;:::-;570:1443:78;762:159:41;131:42;762:159;;;7621:145::o;570:1443:78:-;;7704:54:41;570:1443:78;;;;;;;;;;;;;;","linkReferences":{"src/libraries/OracleLib.sol":{"OracleLib":[{"start":30995,"length":20},{"start":31163,"length":20}]}}},"methodIdentifiers":{"IS_SCRIPT()":"f8ccbf47","run()":"c0406226"}}}},"src/CollateralSafekeep.sol":{"CollateralSafekeep":{"abi":[{"type":"constructor","inputs":[{"name":"_CRP","type":"uint256","internalType":"uint256"},{"name":"_BASE_RISK_RATE","type":"uint256","internalType":"uint256"},{"name":"_RISK_PREMIUM_RATE","type":"uint256","internalType":"uint256"},{"name":"_accessManager","type":"address","internalType":"address"},{"name":"_rupio","type":"address","internalType":"address"},{"name":"_priceContract","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"BASE_RISK_RATE","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"CRP","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"MODERATOR_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"RISK_PREMIUM_RATE","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"burnRupioAndRelieveCollateral","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"checkUpkeep","inputs":[{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"upkeepNeeded","type":"bool","internalType":"bool"},{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"createOrUpdateVault","inputs":[],"outputs":[{"name":"vaultId","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"getAmountINRToETH","inputs":[{"name":"amountINR","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBASE_RISK_RATE","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCRP","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentVaultId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaxMintableRupio","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaxWithdrawableCollateral","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRISK_PREMIUM_RATE","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTotalCollateralPrice","inputs":[],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"getTotalVaultDetails","inputs":[],"outputs":[{"name":"","type":"tuple[]","internalType":"struct CollateralSafekeep.vault[]","components":[{"name":"vaultId","type":"uint256","internalType":"uint256"},{"name":"userAddress","type":"address","internalType":"address"},{"name":"balance","type":"uint256","internalType":"uint256"},{"name":"balanceInINR","type":"uint256","internalType":"uint256"},{"name":"rupioIssued","type":"uint256","internalType":"uint256"},{"name":"vaultHealth","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getUserBalanceInINR","inputs":[{"name":"_address","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUserCollateralBalance","inputs":[{"name":"_address","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getVaultDetailsForTheUser","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct CollateralSafekeep.vault","components":[{"name":"vaultId","type":"uint256","internalType":"uint256"},{"name":"userAddress","type":"address","internalType":"address"},{"name":"balance","type":"uint256","internalType":"uint256"},{"name":"balanceInINR","type":"uint256","internalType":"uint256"},{"name":"rupioIssued","type":"uint256","internalType":"uint256"},{"name":"vaultHealth","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getVaultHealth","inputs":[{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"liquidateVault","inputs":[{"name":"_vaultAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"mintRupioOnDifferentChain","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"chainEid","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"mintRupioOnHomeChain","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"performUpkeep","inputs":[{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"scanVaults","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"userIndexes","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdrawFromVault","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"thisIsARiskyVault","inputs":[{"name":"vaultId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"userAddress","type":"address","indexed":false,"internalType":"address"},{"name":"balance","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"balanceInINR","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"rupioIssued","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"vaultHealth","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero","inputs":[]},{"type":"error","name":"CollateralSafekeep__UpkeepNotNeeded","inputs":[]},{"type":"error","name":"CollateralSafekeep__UserInDebt","inputs":[]},{"type":"error","name":"InvalidOptionType","inputs":[{"name":"optionType","type":"uint16","internalType":"uint16"}]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"SafeCastOverflowedUintDowncast","inputs":[{"name":"bits","type":"uint8","internalType":"uint8"},{"name":"value","type":"uint256","internalType":"uint256"}]}],"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_CRP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BASE_RISK_RATE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RISK_PREMIUM_RATE\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rupio\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralSafekeep__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralSafekeep__UserInDebt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"optionType\",\"type\":\"uint16\"}],\"name\":\"InvalidOptionType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceInINR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rupioIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultHealth\",\"type\":\"uint256\"}],\"name\":\"thisIsARiskyVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_RISK_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RISK_PREMIUM_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnRupioAndRelieveCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createOrUpdateVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountINR\",\"type\":\"uint256\"}],\"name\":\"getAmountINRToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBASE_RISK_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCRP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentVaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxMintableRupio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRISK_PREMIUM_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCollateralPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVaultDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInINR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rupioIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultHealth\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralSafekeep.vault[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserBalanceInINR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultDetailsForTheUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInINR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rupioIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultHealth\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralSafekeep.vault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVaultHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"liquidateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chainEid\",\"type\":\"uint32\"}],\"name\":\"mintRupioOnDifferentChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintRupioOnHomeChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scanVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jaskaran Singh.\",\"details\":\"This contract works in RupioDao core, integrating with RupioDao price feed, access manager and token contract.\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{\"burnRupioAndRelieveCollateral(uint256)\":{\"params\":{\"amount\":\"Amount of rupio to burn.\"}},\"checkUpkeep(bytes)\":{\"returns\":{\"upkeepNeeded\":\"Bool indicating if upkeep is needed, based on specific conditions.\"}},\"constructor\":{\"params\":{\"_BASE_RISK_RATE\":\"Base rate debt on a vault.\",\"_CRP\":\"Initial collateral to Rupio token percentage (threshold).\",\"_RISK_PREMIUM_RATE\":\"Currently only for ethereum, the rate associated with debt in a vault, with increasing time.\",\"_accessManager\":\"Address of RupioDao AccessManager.\",\"_priceContract\":\"Address of RupioDao PriceFeed.\",\"_rupio\":\"Address of Rupio token contract.\"}},\"createOrUpdateVault()\":{\"details\":\"Msg.value must be in native decimals, in this case 1e18.\",\"returns\":{\"vaultId\":\"Vault id of the user.\"}},\"getAmountINRToETH(uint256)\":{\"params\":{\"amountINR\":\"Amount of INR to be converted to ETH, in native decimals in this case 1e8.\"},\"returns\":{\"_0\":\"uint256 Amount of ETH converted to INR, in native decimals in this case 1e18.\"}},\"getBASE_RISK_RATE()\":{\"returns\":{\"_0\":\"uint256 Base Risk Rate on all collateral types defined by the DAO.\"}},\"getCRP()\":{\"returns\":{\"_0\":\"uint256 Collateral to rupio percentage threshold defined by the DAO.\"}},\"getCurrentVaultId()\":{\"details\":\"Can be used to get total number of vaults in the system.Vault Id starts from 1.\",\"returns\":{\"_0\":\"uint256 Current global counter of vault ids.\"}},\"getMaxMintableRupio(address)\":{\"params\":{\"user\":\"Address of the user.\"},\"returns\":{\"_0\":\"uint256 Maximum amount of rupio that can be minted by a user at current state in no decimals.\"}},\"getMaxWithdrawableCollateral(address)\":{\"params\":{\"user\":\"Address of the user.\"},\"returns\":{\"_0\":\"uint256 Max amount of collateral that can be withdrawn by a user at current state in native decimals, in this case 1e18.\"}},\"getRISK_PREMIUM_RATE()\":{\"returns\":{\"_0\":\"uint256 Risk Premium Rate on specific collateral type defined by the DAO.\"}},\"getTotalCollateralPrice()\":{\"returns\":{\"_0\":\"int256 Total collateral balance of the whole contract in ETH in native decimals, in this case 1e18\"}},\"getTotalVaultDetails()\":{\"returns\":{\"_0\":\"vault[] Total database of vaults in array of structs userVaults.\"}},\"getUserBalanceInINR(address)\":{\"params\":{\"_address\":\"Address of the user.\"},\"returns\":{\"_0\":\"uint256 User's current collateral balance in INR in native decimals, in this case 1e8.\"}},\"getUserCollateralBalance(address)\":{\"params\":{\"_address\":\"Address of the user\"},\"returns\":{\"_0\":\"uint256 Collateral balance in ETH in native decimals, in this case 1e18.\"}},\"getVaultDetailsForTheUser()\":{\"returns\":{\"_0\":\"vault Struct indicating user's vault details.\"}},\"getVaultHealth(address)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"_0\":\"uint256 Vault health.\"}},\"liquidateVault(address)\":{\"details\":\"Moderator only funciton.\"},\"mintRupioOnHomeChain(uint256)\":{\"params\":{\"amount\":\"Amount of rupio to be minted, in no decimals, example 50, should be less than CRP cross.\"},\"returns\":{\"_0\":\"max Max amount of rupio that can be minted.\"}},\"performUpkeep(bytes)\":{\"details\":\"In this case, it is scanning all the vaults in database and updating vault health for them.Needed because we cannot tranditionally loop over all the vaults to update vault health.\"},\"scanVaults()\":{\"details\":\"Needed because we cannot tranditionally loop over all the vaults to update vault health due to gas costs.Called by chainlink automation or can be called by moderators or good keepers of this protocol.\"},\"withdrawFromVault(uint256)\":{\"params\":{\"amount\":\"Amount of ETH to withdraw from vault.\"}}},\"title\":\"CollateralSafekeep.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burnRupioAndRelieveCollateral(uint256)\":{\"notice\":\"Burn Rupio and relieve collateral in ETH from the vault.Public function.User must have a vault first.\"},\"checkUpkeep(bytes)\":{\"notice\":\"Chainlink automation function to check if the conditions are met to perform upkeep.Public function.\"},\"createOrUpdateVault()\":{\"notice\":\"Create a new vault or add funds in an existing vault.Public function.User needs to send a msg.value with the functions, in ETH currently.\"},\"getAmountINRToETH(uint256)\":{\"notice\":\"Moderator only getter function.\"},\"getBASE_RISK_RATE()\":{\"notice\":\"Public getter function.\"},\"getCRP()\":{\"notice\":\"Public getter function.\"},\"getCurrentVaultId()\":{\"notice\":\"Moderator only getter function.\"},\"getMaxMintableRupio(address)\":{\"notice\":\"Moderator only getter function.\"},\"getMaxWithdrawableCollateral(address)\":{\"notice\":\"Moderator only getter function.\"},\"getRISK_PREMIUM_RATE()\":{\"notice\":\"Public getter function.\"},\"getTotalCollateralPrice()\":{\"notice\":\"Moderator only getter function.\"},\"getTotalVaultDetails()\":{\"notice\":\"Moderator only getter function.\"},\"getUserBalanceInINR(address)\":{\"notice\":\"Moderator only getter function.\"},\"getUserCollateralBalance(address)\":{\"notice\":\"Moderator only getter function.\"},\"getVaultDetailsForTheUser()\":{\"notice\":\"Public getter function.User must have a vault first.\"},\"getVaultHealth(address)\":{\"notice\":\"Calculates the vault health of an address based on current collateral and rupio issued.Moderator only getter function.\"},\"liquidateVault(address)\":{\"notice\":\"Liquidates vaults that get too risky.\"},\"mintRupioOnHomeChain(uint256)\":{\"notice\":\"Mint rupio based on collateral provided.MINTS ON HOME-CHAIN CURRENTLY BASE SEPOLIA.Public function.User needs to have a vault first.One rupio is issued for every ruppee of collateral(in ETH, converted to INR).User cannot mint if vault health is lower than 150 percent of CRP.\"},\"performUpkeep(bytes)\":{\"notice\":\"Chainlink automation function to perform upkeep.Public function.\"},\"scanVaults()\":{\"notice\":\"Scans all the vaults in database and updates vault health for them.Public function.\"},\"userIndexes(address)\":{\"notice\":\"Mapping of user's address to their vault index.\"},\"withdrawFromVault(uint256)\":{\"notice\":\"User can withdraw if any excess collateral than 150 percent of rupio issued.Public function.\"}},\"notice\":\"An algorithmic stablecoin just like DAI, but pegged to INR.This contract integrates with chainlink pricefeeds and automation, to fetch INR conversion rates and to automate the process of checking the vault health for all users.This contract is integrated with RupioDao access manager to manage access.This contract is integrated with Rupio token contract to mint and burn tokens.This contract is integrated with RupioDao price feed to fetch INR conversion rates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CollateralSafekeep.sol\":\"CollateralSafekeep\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@aave/core-v3/=lib/protocol-v3/\",\":@api3/contracts/=lib/contracts/contracts/\",\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@layerzerolabs/lz-evm-protocol-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/protocol/\",\":@layerzerolabs/oapp-evm/=lib/devtools/packages/oapp-evm/\",\":@layerzerolabs/oft-evm/=lib/devtools/packages/oft-evm/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@solidity-bytes-utils/=lib/solidity-bytes-utils/\",\":@uniswap/v3-core/=node_modules/@uniswap/v3-core/\",\":@uniswap/v3-periphery/=node_modules/@uniswap/v3-periphery/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":layerzero-v2/=lib/layerzero-v2/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationBase.sol\":{\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c53c8736dacbf8c517c63937d556c3e4873a62f509c5d84b89e32fc5c9c6c2c\",\"dweb:/ipfs/QmeR6RSce5dTDcPgbwBnG7E8U89716bqsUcv1NeWnX5RJf\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0546b2739f3989b897c5cb591d01211e2db22e1a8578f68117f1a8a692abd85c\",\"dweb:/ipfs/QmW6guw8uUk2Dq49PWdjeZeEvnDDRg3CVX2BVcVNcT6QNL\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34e35eb46dfadf12396e92dd970547209dfd99f0ae5b1ec7b5a3e81617f620a1\",\"dweb:/ipfs/Qmanoi2CDi9MwkP44HosagvewfMEvCMN1YthGRmCexVjwY\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7\",\"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol\":{\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e1f8cf9f20a2b683a53c3883972aa0676af97a24c678f461fae08e1fb056df28\",\"dweb:/ipfs/QmPpKNqda3rgxDwnq3XiRTtT3NfWeqrCJT6LwmhYd2AoT2\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol\":{\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://606515dd9193551bd2c94ac8c304f3776fafcc70e544ebf441f334658b2fd5f0\",\"dweb:/ipfs/QmZ88ey7DdZqV5taAoebabvszX5kdPMSrQCAmTteVdDtcH\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd12bb4fe5802c53911b9a0081a2ea10639b1f99925d1e5c1b1421d1bdc17075\",\"dweb:/ipfs/QmZonarwbKiEwQ8qoASKur2bbMjusdy9pqK9RCR4P1YPtc\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol\":{\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d42b471418efadcc3577ef3fa9f8f504e8bed7db90c3b0c862038d8b29529eb2\",\"dweb:/ipfs/QmZETDQiJN4U92fmLKo8T9ZbdDf7BNBUUvo9H7M7GqAyFU\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a1deb2a6a3eb1fb83936c9578469142bff470295f403d7d07d955a76be3adbd\",\"dweb:/ipfs/QmS9bjSfBaE4YhQ1PCQ1TknbEPbNfRXzBK9E7SaPGyiZEv\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\":{\"keccak256\":\"0x339654e699043c400cad92de209aa23855ce10211c31cf4114042cc5224d3b7c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5222afde59bf086f67b39e0288ad36343f4f5ed683d250533f256a5db956f37e\",\"dweb:/ipfs/QmbEG9EMYsK3Y6Cz7QbNtkW4kHGzMuhp2y2seSoL8v1A5b\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e2eea8a93bb9fc3f629767118b362e9b4bda2443ff95eae21c6a894f3e334cc\",\"dweb:/ipfs/QmPRRNjAB4U19ke4gr3U7ZJGtdcVBxdXVBZ2BmB1riFkP7\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c236dfe386b508be33c3a1a74ae1d4fd64b8c77ae207767e9dbed0f2429518a2\",\"dweb:/ipfs/QmXVbZJjfryTRti98uN3BMh5qh4K7NuEs1RSCoBjRoYd4q\"]},\"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a59dd6e3cfcc332f45a13d44585eb228588c4b9d470cbb19852df5753a4571af\",\"dweb:/ipfs/QmQJF1QU3MKhvmw42eq61u9z3bzKJJKMsEdQVYyPyYgTVS\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\":{\"keccak256\":\"0x205a0abfd8b3c9af2740769f251381b84999b8e9347f3cd50de3ef8290a17750\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9778d7d5da941af2029410b6ac212f915ea1785573ae2865b0ed8f779fcca82\",\"dweb:/ipfs/QmNkVEkfecvgubgnMuaT5fEfSExd95vz8DQHhpZtMrVRjH\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol\":{\"keccak256\":\"0x5d24db150949ea8e6437178e65a942e8c8b7f332e5daf32750f56b23b35b5bb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b1dcea0267234654126f926a1b405743606d7b5e49185b621afb7bd94d18b9a\",\"dweb:/ipfs/QmZ9BXQmbWJcrhHKuBs4yhNtbCV5WUpUY3AXSX7rkWwX6y\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol\":{\"keccak256\":\"0xc8d869f27ef8ceb2e13fdf6a70682fd4dee3f90c4924eb8e125bc1e66cb6af84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://66bf49d59c14832ea0ddddcd12d512d4f9bd0fd254a1368442587bf3e77fe73e\",\"dweb:/ipfs/QmYUAvsyuUPiSYjbL4zVo6ZtiRSLCUPDvCesqgdZWbSGDg\"]},\"lib/devtools/packages/oapp-evm/contracts/precrime/libs/Packet.sol\":{\"keccak256\":\"0xcb2fb1c5b2eb3731de78b479b9c2ab3bba326fe0b0b3a008590f18e881e457a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f70724c61d226743c2bd8ba6c09758805e4339780978949ce5b333c106be4edc\",\"dweb:/ipfs/QmX5rV9K1N7RgTz9xtf8CDG8SrYiitGAzFh9ec2tbnEec4\"]},\"lib/devtools/packages/oft-evm/contracts/OFT.sol\":{\"keccak256\":\"0xdc3582e4a20e02a79050c17058a1f1f42a4335d1a70be06c0a52a3fb05d4c89a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83c4bd42e68528246860a952a92a79e51e3a789dac79a0b62576ab2f609de9c7\",\"dweb:/ipfs/QmVj1x655j1cFTnPT8uBaM71TCSrhFVwPdoFkAkWhhadns\"]},\"lib/devtools/packages/oft-evm/contracts/OFTCore.sol\":{\"keccak256\":\"0x0a435802ad13dcaf74668923ec2716358b94bc2be1a63c85a931638defd7decc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc93e94b14b38ccd62dfa6664ccfc2e303d13d20b4799b415054c4b35f7cd03d\",\"dweb:/ipfs/QmZyCwjhuEHNGdFRYMAE6LjD81Puhstoj49HNrwtRPYPbc\"]},\"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol\":{\"keccak256\":\"0x278e7bdeb2e8aa3f528373d8a3b3fedfe2e1bec050bcaf95065a136645cf56bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43d1789ca4f5cd81986bb52682a94caf188dc8910ecd84cf98bc59221847bd12\",\"dweb:/ipfs/QmSmvKyCukcqxCUvdvNQNyshp4nYt2xxiFaB7Uji4YSrBv\"]},\"lib/devtools/packages/oft-evm/contracts/libs/OFTComposeMsgCodec.sol\":{\"keccak256\":\"0xaae73d6eb8b9561c43f1802f3c416c00ccd35f172b711f9781ccdf1b25a40db5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7beda2d895ae9e15269dd261a492ce0a29b498e5bebf088ed6f2ae6a5185719e\",\"dweb:/ipfs/QmScog2tW1YVyEPLVcUVqGGc85ub46sA28nUKNzFEZcFdK\"]},\"lib/devtools/packages/oft-evm/contracts/libs/OFTMsgCodec.sol\":{\"keccak256\":\"0x5358948017669c03e157f871d8c38e988f9004dbd0801ad3119d2487f0d40b0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7d0f1bf32a80af9b99cd93fefa373dac5c27463351cc35f62b9c2439d5b9258\",\"dweb:/ipfs/Qmb81qoxzMwV3PkPANRvnXf4fJTsZ5sjJ8r2df9V2vhh6q\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bacc29fd3866af71e59cb0bdc1cf82c882a4a7f4e2652fd413c9f12649762083\",\"dweb:/ipfs/QmZh2toLnrQDWaNYhS5K4NoW7Vxd2GdZx9KA77vKEDLAqs\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol\":{\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77415ae0820859e0faf3fabdce683cce9fa03ea026ae0f6fe081ef1c9205f933\",\"dweb:/ipfs/QmXd7APqoCunQ2jYy73AHvi5gsZofLpm3SzM6FPo7zRPfL\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLib.sol\":{\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cae7e35007a714f007ea08045ef7c0cfa6c91fd2425b5028b2d49abad357a5f0\",\"dweb:/ipfs/QmcDBs5tsiyB35b8cwzWQWNnpkawb3uuHRaqE77Hxm2tve\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol\":{\"keccak256\":\"0xd710f9efe703982e8eabe15d19d6114af753ef42f2796551da782a0fb6633e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5c9c874871469c871004d49a1cb5304e63ea3faaf366bfed9d718abbb9cc20a\",\"dweb:/ipfs/QmarXxE4dezAa5gBe82KCrcvWcMwa3BYqkfXbDQ3rRjfEB\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol\":{\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e1b245d58221d16d8b5e0f01ef3e289a24a7df1ace3b94239e4d5b954ad5927\",\"dweb:/ipfs/Qmappsgp7PCY9rSSNE9Cdn4BTRX591WfCSEgq2HxhA3z6S\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol\":{\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b18b23a1643fc6636c4ad9d9023e2e6ca2d3c2a4a046482d4655bff09950598d\",\"dweb:/ipfs/Qma6G5SqiovwrMPfgqTrRngK1HWW373Wkf9c6YP2NhXpPk\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol\":{\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5173fc9143bea314b159ca5a9adb5626659ef763bc598e27de5fa46efe3291a6\",\"dweb:/ipfs/QmSLFeMFPmVeGxT4sxRPW28ictjAS22M8rLeYRu9TXkA6D\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ISendLib.sol\":{\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://060f10ff7afc33c1c2f2b4b5ba29231fd3c943146488084d0e4ab99fce991d97\",\"dweb:/ipfs/QmaSsefAqqEqtf8FgFUmDYMwTsAty3X1pqDb6SiFvry6B3\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/AddressCast.sol\":{\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://2d4b2cf5c3b16dc76c6767f285b57c0af917972327b2be3f7cba5825402f5fc1\",\"dweb:/ipfs/QmQQWiHE2jKEDbjzGutSoZwtApSXYfLqZt5CxEpFj8xyvT\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol\":{\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://a33245d0fdd3992bb56b31d1840108d36bb46c8d617b659ef1af8dd7ed86302d\",\"dweb:/ipfs/QmWyBqT7Tdrfn5zz9xYM3V1PBtfAZAVwwCrrKwwfi3wMQK\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/ExecutorOptions.sol\":{\"keccak256\":\"0x621c6090fc432f94a99f677a95d72b75f56db89ddc5fc870669777a313587c28\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://69086166f16d29e30c5eb9ca2f97afb27569afe619807d79736833a809a512d2\",\"dweb:/ipfs/QmcZqXjFuVdTrfbteKBF3GuEpjVFZ2YNZTa3J87dyLsqav\"]},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/PacketV1Codec.sol\":{\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\",\"urls\":[\"bzz-raw://de686666fc16fa432d4208d85cec87dc952faf3e481b683b9adf4b4610db4b09\",\"dweb:/ipfs/QmdmQeopzmxqRzi9DNB4EJDrYUXFfD7fUhnGhSni4QejUW\"]},\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80\",\"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"lib/solidity-bytes-utils/contracts/BytesLib.sol\":{\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://a38d7680aacbb18dae659876b396b73bcc8f759672213f8a0efc4129e2648535\",\"dweb:/ipfs/QmfKFnwpTEGAnbRnZxMuv3mRCG9S9WMjFhFL23bftBT2Jq\"]},\"src/AccessManager.sol\":{\"keccak256\":\"0x13b4a02fa0b95245b5cbf51fd1a95f0902593479f43e62ece6c9843bc05399f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca55300aff245b50d9138a98dbfde6734349bda8622391bf94914969368040c4\",\"dweb:/ipfs/QmUTCL9Bgod5GTT8MKHbqmgoeVZkSe3mG4ssGJipWgRahG\"]},\"src/CollateralSafekeep.sol\":{\"keccak256\":\"0x5403e628ecc04bafad19c71c4361c1ca036062b36b57ecb6afcfad903f3433d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e3939fd661d6a078f6a4022131f063560574ce24b8c95dd9c8d93afadf4362c\",\"dweb:/ipfs/QmW5K5LJQbaV2hfcB1dvRHjxqYKJqTFP22H4FkgtoG8Er2\"]},\"src/Libraries/OptionsBuilder.sol\":{\"keccak256\":\"0x9094106765f73745c8e1dee2ba64ac7f32ba4d8545ee81e41923ae7761a54f68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b9cde2051f065b07fe97fe38d9867376773cb88ba0385de1db9a3b268c7518e\",\"dweb:/ipfs/QmRCMQ8FtvvRP6KK5UUGvAFTiinSME43n5XTSEAuQFsQTq\"]},\"src/PriceFeed.sol\":{\"keccak256\":\"0xb19894c360e1d9eee40c29e44b678616de8f403928767fbbfbd442a1070cde26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38756cbd3c8c278b7c80994b198de27b8138b038433d4405acdcf5c9bdcabca9\",\"dweb:/ipfs/QmeQeHPJvEdqwEG637JQevYCFKY5AnednSJkp1gQDFd4cW\"]},\"src/Rupio.sol\":{\"keccak256\":\"0x65169842bb19b15eb8349493509c09735044a93cdf9558dba10da519e48423d0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc8d6ae8bbcb0e8b122729a957d96254b0d2f5adf85b2184b777db3747eb795c\",\"dweb:/ipfs/Qmf9kP2cRpuvWHrmcrzDLVwQWvbDa1UNJhzTbDEjUHvbqe\"]},\"src/libraries/OracleLib.sol\":{\"keccak256\":\"0x49c54f36778fcce33c6e05c1b721f02786ed7295b157096d120f26545e7326dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06bb656178a4a71bf7c3c4029e9a6aef034d556e8628291a821152bdf9e5e76f\",\"dweb:/ipfs/QmdkEqb9z5sxAFWjSg24u3gxJaPEoW1anYQTJQ28CmmyBN\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":45486,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":48280,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"lastTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":48282,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"currentCollateralBalance","offset":0,"slot":"2","type":"t_int256"},{"astId":48284,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"VAULT_ID","offset":0,"slot":"3","type":"t_uint256"},{"astId":48287,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"accessManager","offset":0,"slot":"4","type":"t_contract(AccessManager)48238"},{"astId":48290,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"token","offset":0,"slot":"5","type":"t_contract(Rupio)50173"},{"astId":48293,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"priceContract","offset":0,"slot":"6","type":"t_contract(PriceFeed)50060"},{"astId":48312,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"userVaults","offset":0,"slot":"7","type":"t_array(t_struct(vault)48307_storage)dyn_storage"},{"astId":48331,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"userIndexes","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(vault)48307_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct CollateralSafekeep.vault[]","numberOfBytes":"32","base":"t_struct(vault)48307_storage"},"t_contract(AccessManager)48238":{"encoding":"inplace","label":"contract AccessManager","numberOfBytes":"20"},"t_contract(PriceFeed)50060":{"encoding":"inplace","label":"contract PriceFeed","numberOfBytes":"20"},"t_contract(Rupio)50173":{"encoding":"inplace","label":"contract Rupio","numberOfBytes":"20"},"t_int256":{"encoding":"inplace","label":"int256","numberOfBytes":"32"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(vault)48307_storage":{"encoding":"inplace","label":"struct CollateralSafekeep.vault","numberOfBytes":"192","members":[{"astId":48296,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"vaultId","offset":0,"slot":"0","type":"t_uint256"},{"astId":48298,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"userAddress","offset":0,"slot":"1","type":"t_address"},{"astId":48300,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"balance","offset":0,"slot":"2","type":"t_uint256"},{"astId":48302,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"balanceInINR","offset":0,"slot":"3","type":"t_uint256"},{"astId":48304,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"rupioIssued","offset":0,"slot":"4","type":"t_uint256"},{"astId":48306,"contract":"src/CollateralSafekeep.sol:CollateralSafekeep","label":"vaultHealth","offset":0,"slot":"5","type":"t_uint256"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":503,"id":null,"parameterSlots":1,"returnSlots":1}},"object":"60e0604052346101f257604051601f61203238819003918201601f19168301916001600160401b038311848410176101dc5780849260c0946040528339810103126101f257805160208201519060408301519261005e606082016101f7565b9061007760a0610070608084016101f7565b92016101f7565b600160008190556003819055600480546001600160a01b03199081166001600160a01b039687161790915560058054821694861694909417909355600680549093169390911692909217905542905560805260a05260c09081526040519081016001600160401b038111828210176101dc576040526000815260208101600081526040820160008152606083016000815260808401906000825260a08501926000845260075494680100000000000000008610156101dc5760018601806007558610156101c65760059560076000526006602060002091020196518755600187019060018060a01b0390511660018060a01b031982541617905551600286015551600385015551600484015551910155604051611e26908161020c82396080518181816105df01528181610f8e015281816119cd0152611d9e015260a05181610be8015260c0518161082b0152f35b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b03821682036101f25756fe6080604052600436101561001257600080fd5b60003560e01c8063076d0815146101b8578063188afb74146101b3578063194d7494146101ae5780632a8ffe80146101a9578063310e84b514610181578063314860f8146101a45780633f3d2a881461019f5780634585e33b1461019a5780634a83cf4914610195578063515d22ce146101905780636653b8171461018b5780636e04ff0d146101865780637649aef114610181578063797669c91461017c578063839159fb146101455780639210ae64146101775780639dc1b45b14610172578063ab8454131461016d578063ae0b163f14610168578063b208816414610163578063b603540f1461015e578063bb82813214610159578063c48589cb14610154578063d7bf2aef1461014f578063ea6cfd4a1461014a578063eaa45b421461014a5763fb5989a61461014557600080fd5b610bd0565b610f76565b610f5d565b610ebd565b610ce2565b610cb3565b610c9b565b610c7d565b610c41565b610c23565b610c0b565b610b95565b610813565b610b4c565b610ae6565b61098c565b610974565b61095c565b61086e565b61084e565b610551565b6104ab565b610343565b602036600319011261033e576004353360005260086020526101e06040600020541515610fb1565b6101e933611814565b336000908152600860205260409020600590610206905b54611028565b5001558080156102168115611068565b33600090815260086020526040902061024190839060029061023790610200565b5001541015611080565b33600090815260086020526040902061026c9060969060059061026390610200565b500154116110cc565b61028061027833611902565b8311156110cc565b600090610335575b600080809381933390f115610330573360009081526008602052604090206102c0906002906102b690610200565b5001918254611106565b90553360009081526008602052604090206102e9906002906102e190610200565b500154611a34565b33600090815260086020526040902060039061030490610200565b50015561031033611814565b33600090815260086020526040902060059061032b90610200565b500155005b6110e4565b506108fc610288565b600080fd5b3461033e57602036600319011261033e576004353360005260086020526103706040600020541515610fb1565b61037933611814565b33600090815260086020526040902060059061039490610200565b5001553360009081526008602052604090206103c0906004906103b690610200565b5001541515611118565b3360009081526008602052604090206103eb9082906004906103e190610200565b500154101561115b565b600554610408906001600160a01b03165b6001600160a01b031690565b803b1561033e5760405163079cc67960e41b815233600482015260248101839052906000908290604490829084905af180156103305761046e575b50336000908152600860205260409020610463906004906102b690610200565b905561031033611814565b8061047d6000610483936111d9565b80610808565b38610443565b602090600319011261033e576004356001600160a01b038116810361033e5790565b3461033e576104b936610489565b506044602060018060a01b036004541660405192838092632474521560e21b82527f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f60048301523360248301525afa80156103305761052091600091610522575b50611213565b005b610544915060203d60201161054a575b61053c81836111d9565b8101906111fb565b3861051a565b503d610532565b604036600319011261033e5760043560243563ffffffff8116810361033e573360005260086020526105896040600020541515610fb1565b610594821515611068565b61059d33611814565b3360009081526008602052604090206005906105b890610200565b500155336000908152600860205260409020610604906005906105da90610200565b5001547f0000000000000000000000000000000000000000000000000000000000000000106110cc565b61061761061033611b11565b83106112c6565b610627610622611ba6565b611bc2565b610630336103fc565b61064361063c85611311565b600a900490565b9061065b61064f6113a4565b63ffffffff9095168552565b6020840152836040840152606083015260808201526106786113b3565b60a08201526106856113b3565b60c082015260055461069f906001600160a01b03166103fc565b60408051633b6f743b60e01b815291929082806106bf8460048301611485565b0381865afa918215610330576000926107d7575b506106e182513410156114a2565b823b1561033e576040516340c10f1960e01b815230600482015260248101859052926000908490604490829084905af19182156103305761075b9360c0936107c2575b5060055461073a906001600160a01b03166103fc565b90805160405180968195829463c7c7f5b360e01b8452339160048501611554565b03925af1801561033057610794575b503360009081526008602052604090206104639060049061078a90610200565b5001918254611597565b6107b59060c03d60c0116107bb575b6107ad81836111d9565b8101906114e3565b5061076a565b503d6107a3565b8061047d60006107d1936111d9565b38610724565b6107fa91925060403d604011610801575b6107f281836111d9565b810190611401565b90386106d3565b503d6107e8565b600091031261033e57565b3461033e57600036600319011261033e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461033e57602061086661086136610489565b6115a4565b604051908152f35b3461033e57600036600319011261033e576108876115c7565b503360005260086020526108a16040600020541515610fb1565b33600052600860205260c06108c36108bd604060002054611028565b506115f8565b610909604051809260a0809180518452600180831b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b90602060031983011261033e5760043567ffffffffffffffff811161033e578260238201121561033e5780600401359267ffffffffffffffff841161033e576024848301011161033e576024019190565b3461033e5761096a3661090b565b50506105206116dd565b3461033e57602061086661098736610489565b611814565b3461033e57602036600319011261033e576004353360005260086020526109b96040600020541515610fb1565b6109c4811515611068565b6109cd33611814565b3360009081526008602052604090206005906109e890610200565b500155336000908152600860205260409020610a0a906005906105da90610200565b610a1333611b11565b610a1e8183106112c6565b600554610a33906001600160a01b03166103fc565b91823b1561033e576040516340c10f1960e01b815233600482015260248101829052926000908490604490829084905af192831561033057610acd93610ad1575b50336000908152600860205260409020610a949060049061078a90610200565b9055610a9f33611814565b336000908152600860205260409020600590610aba90610200565b5001556040519081529081906020820190565b0390f35b8061047d6000610ae0936111d9565b38610a74565b3461033e57602036600319011261033e576020610866600435611cd7565b60005b838110610b175750506000910152565b8181015183820152602001610b07565b90602091610b4081518092818552858086019101610b04565b601f01601f1916010190565b3461033e57610b5a3661090b565b5050604051600181526040602082015260208160406060518082840152610b8681606085016080610b04565b601f01601f1916820101030190f35b3461033e57600036600319011261033e5760206040517f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f8152f35b3461033e57600036600319011261033e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461033e576020610866610c1e36610489565b611902565b3461033e57600036600319011261033e576020600254604051908152f35b3461033e576001600160a01b03610c5736610489565b16600052600860205260206002610c72604060002054611028565b500154604051908152f35b3461033e57600036600319011261033e576020600354604051908152f35b3461033e576020610866610cae36610489565b611b11565b3461033e576001600160a01b03610cc936610489565b1660005260086020526020604060002054604051908152f35b600036600319011261033e57610cf9341515611068565b33600090815260086020526040902054610dad57610d59610d186115c7565b346040820152336020820152600354815260006080820152610d41610d3c34611a34565b611327565b60a0820152610d4f34611a34565b6060820152611647565b60035433600090815260086020526040902055610d7f610d7a600354611589565b600355565b336000908152600860205260409020610acd90610d9b90610200565b50546040519081529081906020820190565b336000908152600860205260409020600290610dc890610200565b5001610dd5348254611597565b9055336000908152600860205260409020610df6906002906102e190610200565b336000908152600860205260409020600390610e1190610200565b500155610e1d33611814565b336000908152600860205260409020600590610e3890610200565b500155610d7f565b602060408183019282815284518094520192019060005b818110610e645750505090565b909192602060c082610eb2600194885160a0809180518452600180831b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151910152565b019401929101610e57565b3461033e57600036600319011261033e5760075467ffffffffffffffff8111610f585760405190610ef460208260051b01836111d9565b8082526020820160076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6886000915b838310610f3a5760405180610acd8782610e40565b60066020600192610f4a856115f8565b815201920192019190610f25565b6111a7565b3461033e57600036600319011261033e576105206116dd565b3461033e57600036600319011261033e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b15610fb857565b60405162461bcd60e51b815260206004820152602c60248201527f596f7520646f6e7420686176652061205661756c742c2063726561746520612060448201526b7661756c742066697273742160a01b6064820152608490fd5b634e487b7160e01b600052603260045260246000fd5b6007548110156110475760076000526006602060002091020190600090565b611012565b8054821015611047576000526006602060002091020190600090565b1561106f57565b6316670b4760e21b60005260046000fd5b1561108757565b60405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e742062616c616e636520696e207661756c740000006044820152606490fd5b156110d357565b637f8953f760e01b60005260046000fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b9190820391821161111357565b6110f0565b1561111f57565b60405162461bcd60e51b8152602060048201526014602482015273273790393ab834b79034b9b9bab2b2103cb2ba1760611b6044820152606490fd5b1561116257565b60405162461bcd60e51b815260206004820152601b60248201527f4c65737320616d6f756e74206f6620727570696f2069737375656400000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff821117610f5857604052565b90601f8019910116810190811067ffffffffffffffff821117610f5857604052565b9081602091031261033e5751801515810361033e5790565b1561121a57565b60405162461bcd60e51b815260206004820152601860248201527f4d7573742068617665204d4f44455241544f525f524f4c4500000000000000006044820152606490fd5b6044602060018060a01b036004541660405192838092632474521560e21b82527f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f60048301523360248301525afa8015610330576112c4916000916105225750611213565b565b156112cd57565b606460405162461bcd60e51b815260206004820152602060248201527f656e74657220616d6f756e74206c657373207468616e204352502063726f73736044820152fd5b9060098202918083046009149015171561111357565b9060648202918083046064149015171561111357565b9060038202918083046003149015171561111357565b906402540be4008202918083046402540be400149015171561111357565b8181029291811591840414171561111357565b811561138e570490565b634e487b7160e01b600052601260045260246000fd5b604051906112c460e0836111d9565b604051906113c26020836111d9565b60008252565b919082604091031261033e576040516040810181811067ffffffffffffffff821117610f58576040526020808294805184520151910152565b9060408282031261033e57611415916113c8565b90565b6114159163ffffffff825116815260208201516020820152604082015160408201526060820151606082015260c0611474611462608085015160e0608086015260e0850190610b27565b60a085015184820360a0860152610b27565b9201519060c0818403910152610b27565b9190602061149d600092604086526040860190611418565b930152565b156114a957565b60405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b6044820152606490fd5b919082810360c0811261033e5760801361033e57604051906060820182811067ffffffffffffffff821117610f585760405283518252602084015167ffffffffffffffff8116810361033e5782608091602061141595015261154883604088016113c8565b604082015294016113c8565b919392602061156d606093608086526080860190611418565b86518583015295015160408401526001600160a01b0316910152565b906001820180921161111357565b9190820180921161111357565b60018060a01b0316600052600860205261141560026102e1604060002054611028565b604051906115d4826111bd565b600060a0838281528260208201528260408201528260608201528260808201520152565b90604051611605816111bd565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460608201526004830154608082015260059092015460a0830152565b60075468010000000000000000811015610f585780600161166d9201600755600761104c565b9190916116c75760a08160059251845560018401600180841b036020830151166bffffffffffffffffffffffff841b8254161790556040810151600285015560608101516003850155608081015160048501550151910155565b634e487b7160e01b600052600060045260246000fd5b60075460005b8181106116ee575050565b8061171061086160016117018195611028565b5001546001600160a01b031690565b600361171b83611028565b50015561172e6109878361170184611028565b600561173983611028565b50015561175161174c8361170184611028565b611d93565b5061175b81611028565b505061176561125f565b7f5c0ddc9ba6a3ee218f8b0b2e6583514fb1a2403fc52dd2adb715d5cb41ab1a206117938361170184611028565b600261179e84611028565b5001549061180b60036117b086611028565b50015460046117be87611028565b50015460056117cc88611028565b500154604080518981526001600160a01b0390961660208701528501959095526060840191909152608083015260a082019290925290819060c0820190565b0390a1016116e3565b6001600160a01b031660008181526008602052604090205460039061183890611028565b5001549060005260086020526004611854604060002054611028565b50015480611866575061141590611327565b61186f91611384565b6064810290808204606414901517156111135790565b1561188c57565b60405162461bcd60e51b815260206004820152601060248201526f796f752061726520696e20646562742160801b6044820152606490fd5b156118cb57565b60405162461bcd60e51b815260206004820152600f60248201526e1e5bdd48185c99481a5b881919589d608a1b6044820152606490fd5b6001600160a01b038116600090815260086020526040902060039061192690610200565b500154906119f260056119c861020060046119566102008760018060a01b03166000526008602052604060002090565b500154946119ae600461197e6102008460018060a01b03166000526008602052604060002090565b5001546001600160a01b03831660009081526008602052604090206003906119a590610200565b50015411611885565b6001600160a01b0316600090815260086020526040902090565b5001547f0000000000000000000000000000000000000000000000000000000000000000106118c4565b80611a01575061141590611cd7565b61141591611a1a611a14611a209361133d565b60011c90565b90611106565b611cd7565b9081602091031261033e575190565b600654611a49906001600160a01b03166103fc565b604051639bd713cf60e01b81529091602082600481865afa91821561033057600092611aee575b506020600492936040519384809263693cf00560e11b82525afa80156103305761141593611ab093600092611abb575b50611aab9192611371565b611384565b6402540be400900490565b611aab9250611ae19060203d602011611ae7575b611ad981836111d9565b810190611a25565b91611aa0565b503d611acf565b60049250611b0a602091823d8411611ae757611ad981836111d9565b9250611a70565b60018060a01b03811680600052600860205260966005611b35604060002054611028565b50015410611b9f5760005260086020526004611b7c610200611b6060026102e1604060002054611028565b6001600160a01b03909416600090815260086020526040902090565b5001548160011b9180830460021490151715611113576114159160039004611106565b5050600090565b604051600360f01b6020820152600281526114156022826111d9565b600361ffff611bd083611dcd565b1603611ccb576040519060208201611fbd60831b815260108352611bf56030846111d9565b600361ffff611c0384611dcd565b1603611caa57825161ffff8111611c915761ffff60019116019161ffff831161111357602060049261141594611c806040519785611c4a8a9751809288808b019101610b04565b600160f81b90870186810182905260f09490941b6001600160f01b03191660218501526023840152519283906024840190610b04565b01010301601f1981018352826111d9565b6306dfcc6560e41b600052601060045260245260446000fd5b61ffff611cb683611dcd565b633a51740d60e01b6000521660045260246000fd5b611cb661ffff91611dcd565b600654611cec906001600160a01b03166103fc565b604051639bd713cf60e01b815290602082600481845afa90811561033057600492600092611d71575b506020906040519384809263693cf00560e11b82525afa9182156103305761141593611d4d93611aab92600091611d52575b50611371565b611353565b611d6b915060203d602011611ae757611ad981836111d9565b38611d47565b6020919250611d8c90823d8411611ae757611ad981836111d9565b9190611d15565b611d9c90611814565b7f00000000000000000000000000000000000000000000000000000000000000001015611dc857600090565b600190565b6002815110611ddd576002015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fdfea164736f6c634300081a000a","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1F PUSH2 0x2032 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x1DC JUMPI DUP1 DUP5 SWAP3 PUSH1 0xC0 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1F2 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 PUSH2 0x5E PUSH1 0x60 DUP3 ADD PUSH2 0x1F7 JUMP JUMPDEST SWAP1 PUSH2 0x77 PUSH1 0xA0 PUSH2 0x70 PUSH1 0x80 DUP5 ADD PUSH2 0x1F7 JUMP JUMPDEST SWAP3 ADD PUSH2 0x1F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND SWAP5 DUP7 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE TIMESTAMP SWAP1 SSTORE PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x1DC JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH1 0x0 DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 PUSH1 0x0 DUP5 MSTORE PUSH1 0x7 SLOAD SWAP5 PUSH9 0x10000000000000000 DUP7 LT ISZERO PUSH2 0x1DC JUMPI PUSH1 0x1 DUP7 ADD DUP1 PUSH1 0x7 SSTORE DUP7 LT ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x5 SWAP6 PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP7 MLOAD DUP8 SSTORE PUSH1 0x1 DUP8 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD PUSH1 0x2 DUP7 ADD SSTORE MLOAD PUSH1 0x3 DUP6 ADD SSTORE MLOAD PUSH1 0x4 DUP5 ADD SSTORE MLOAD SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH2 0x1E26 SWAP1 DUP2 PUSH2 0x20C DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x5DF ADD MSTORE DUP2 DUP2 PUSH2 0xF8E ADD MSTORE DUP2 DUP2 PUSH2 0x19CD ADD MSTORE PUSH2 0x1D9E ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0xBE8 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 PUSH2 0x82B ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1F2 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x76D0815 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x188AFB74 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x194D7494 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2A8FFE80 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x310E84B5 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x314860F8 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x3F3D2A88 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x4A83CF49 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x515D22CE EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x6653B817 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x7649AEF1 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x797669C9 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x839159FB EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x9210AE64 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x9DC1B45B EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xAB845413 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0xAE0B163F EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0xB2088164 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xB603540F EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xBB828132 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xC48589CB EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xD7BF2AEF EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xEA6CFD4A EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xEAA45B42 EQ PUSH2 0x14A JUMPI PUSH4 0xFB5989A6 EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF5D JUMP JUMPDEST PUSH2 0xEBD JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST PUSH2 0xC41 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC0B JUMP JUMPDEST PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x813 JUMP JUMPDEST PUSH2 0xB4C JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x98C JUMP JUMPDEST PUSH2 0x974 JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x84E JUMP JUMPDEST PUSH2 0x551 JUMP JUMPDEST PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1E0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x1E9 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x206 SWAP1 JUMPDEST SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE DUP1 DUP1 ISZERO PUSH2 0x216 DUP2 ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x241 SWAP1 DUP4 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x237 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x1080 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x26C SWAP1 PUSH1 0x96 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x263 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x280 PUSH2 0x278 CALLER PUSH2 0x1902 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x335 JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 CALLER SWAP1 CALL ISZERO PUSH2 0x330 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2C0 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1106 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2E9 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH2 0x1A34 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x304 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x32B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE STOP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x288 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x370 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x379 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x394 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3C0 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD ISZERO ISZERO PUSH2 0x1118 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3EB SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x115B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x408 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x46E JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x483 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 PUSH2 0x808 JUMP JUMPDEST CODESIZE PUSH2 0x443 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x4B9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST POP PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x520 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI JUMPDEST POP PUSH2 0x1213 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x544 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x54A JUMPI JUMPDEST PUSH2 0x53C DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x11FB JUMP JUMPDEST CODESIZE PUSH2 0x51A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x532 JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x589 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x594 DUP3 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x59D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x5B8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x604 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x617 PUSH2 0x610 CALLER PUSH2 0x1B11 JUMP JUMPDEST DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x627 PUSH2 0x622 PUSH2 0x1BA6 JUMP JUMPDEST PUSH2 0x1BC2 JUMP JUMPDEST PUSH2 0x630 CALLER PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x643 PUSH2 0x63C DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH1 0xA SWAP1 DIV SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x65B PUSH2 0x64F PUSH2 0x13A4 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP6 AND DUP6 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x678 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x685 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH2 0x69F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x3B6F743B PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 SWAP1 DUP3 DUP1 PUSH2 0x6BF DUP5 PUSH1 0x4 DUP4 ADD PUSH2 0x1485 JUMP JUMPDEST SUB DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x7D7 JUMPI JUMPDEST POP PUSH2 0x6E1 DUP3 MLOAD CALLVALUE LT ISZERO PUSH2 0x14A2 JUMP JUMPDEST DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x75B SWAP4 PUSH1 0xC0 SWAP4 PUSH2 0x7C2 JUMPI JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x73A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP1 DUP1 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xC7C7F5B3 PUSH1 0xE0 SHL DUP5 MSTORE CALLER SWAP2 PUSH1 0x4 DUP6 ADD PUSH2 0x1554 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x794 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x7B5 SWAP1 PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x7BB JUMPI JUMPDEST PUSH2 0x7AD DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x14E3 JUMP JUMPDEST POP PUSH2 0x76A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7A3 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x7D1 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x724 JUMP JUMPDEST PUSH2 0x7FA SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x801 JUMPI JUMPDEST PUSH2 0x7F2 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1401 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x6D3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x33E JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x861 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x887 PUSH2 0x15C7 JUMP JUMPDEST POP CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x8A1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0xC0 PUSH2 0x8C3 PUSH2 0x8BD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP PUSH2 0x15F8 JUMP JUMPDEST PUSH2 0x909 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33E JUMPI DUP3 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x33E JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x33E JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x33E JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x96A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x987 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1814 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x9B9 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x9C4 DUP2 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x9CD CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x9E8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA0A SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST PUSH2 0xA13 CALLER PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0xA1E DUP2 DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0xA33 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x330 JUMPI PUSH2 0xACD SWAP4 PUSH2 0xAD1 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA94 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA9F CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xABA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0xAE0 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0xA74 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH1 0x4 CALLDATALOAD PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB17 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB07 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0xB40 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0xB5A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x40 PUSH1 0x60 MLOAD DUP1 DUP3 DUP5 ADD MSTORE PUSH2 0xB86 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x80 PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xC1E CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1902 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC57 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x2 PUSH2 0xC72 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xCAE CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1B11 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCC9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0xCF9 CALLVALUE ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xDAD JUMPI PUSH2 0xD59 PUSH2 0xD18 PUSH2 0x15C7 JUMP JUMPDEST CALLVALUE PUSH1 0x40 DUP3 ADD MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 SLOAD DUP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xD41 PUSH2 0xD3C CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x1327 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xD4F CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xD7F PUSH2 0xD7A PUSH1 0x3 SLOAD PUSH2 0x1589 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xACD SWAP1 PUSH2 0xD9B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 SWAP1 PUSH2 0xDC8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD PUSH2 0xDD5 CALLVALUE DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xDF6 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0xE11 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xE1D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xE38 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xE64 JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0x20 PUSH1 0xC0 DUP3 PUSH2 0xEB2 PUSH1 0x1 SWAP5 DUP9 MLOAD PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP3 SWAP2 ADD PUSH2 0xE57 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF58 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xEF4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL ADD DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x7 PUSH1 0x0 MSTORE PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0xF3A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xACD DUP8 DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 PUSH1 0x1 SWAP3 PUSH2 0xF4A DUP6 PUSH2 0x15F8 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST ISZERO PUSH2 0xFB8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E7420686176652061205661756C742C20637265617465206120 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7661756C7420666972737421 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1012 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x106F JUMPI JUMP JUMPDEST PUSH4 0x16670B47 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1087 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742062616C616E636520696E207661756C74000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x10D3 JUMPI JUMP JUMPDEST PUSH4 0x7F8953F7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH2 0x10F0 JUMP JUMPDEST ISZERO PUSH2 0x111F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x273790393AB834B79034B9B9BAB2B2103CB2BA17 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1162 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C65737320616D6F756E74206F6620727570696F206973737565640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x121A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742068617665204D4F44455241544F525F524F4C450000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x12C4 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI POP PUSH2 0x1213 JUMP JUMPDEST JUMP JUMPDEST ISZERO PUSH2 0x12CD JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656E74657220616D6F756E74206C657373207468616E204352502063726F7373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x9 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x9 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x64 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x3 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x3 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH5 0x2540BE400 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH5 0x2540BE400 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x138E JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12C4 PUSH1 0xE0 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x13C2 PUSH1 0x20 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE PUSH1 0x20 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH2 0x33E JUMPI PUSH2 0x1415 SWAP2 PUSH2 0x13C8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH4 0xFFFFFFFF DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xC0 PUSH2 0x1474 PUSH2 0x1462 PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xE0 PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD SWAP1 PUSH2 0xB27 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0xC0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 PUSH2 0x149D PUSH1 0x0 SWAP3 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST SWAP4 ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x14A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x696E73756666696369656E742066756E6473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 DUP2 SUB PUSH1 0xC0 DUP2 SLT PUSH2 0x33E JUMPI PUSH1 0x80 SGT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE DUP4 MLOAD DUP3 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI DUP3 PUSH1 0x80 SWAP2 PUSH1 0x20 PUSH2 0x1415 SWAP6 ADD MSTORE PUSH2 0x1548 DUP4 PUSH1 0x40 DUP9 ADD PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP5 ADD PUSH2 0x13C8 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH1 0x20 PUSH2 0x156D PUSH1 0x60 SWAP4 PUSH1 0x80 DUP7 MSTORE PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST DUP7 MLOAD DUP6 DUP4 ADD MSTORE SWAP6 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1415 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x15D4 DUP3 PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1605 DUP2 PUSH2 0x11BD JUMP JUMPDEST DUP3 SLOAD DUP2 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xF58 JUMPI DUP1 PUSH1 0x1 PUSH2 0x166D SWAP3 ADD PUSH1 0x7 SSTORE PUSH1 0x7 PUSH2 0x104C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x16C7 JUMPI PUSH1 0xA0 DUP2 PUSH1 0x5 SWAP3 MLOAD DUP5 SSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x1 DUP1 DUP5 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x16EE JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1710 PUSH2 0x861 PUSH1 0x1 PUSH2 0x1701 DUP2 SWAP6 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x171B DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x172E PUSH2 0x987 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x1739 DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x1751 PUSH2 0x174C DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x1D93 JUMP JUMPDEST POP PUSH2 0x175B DUP2 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x1765 PUSH2 0x125F JUMP JUMPDEST PUSH32 0x5C0DDC9BA6A3EE218F8B0B2E6583514FB1A2403FC52DD2ADB715D5CB41AB1A20 PUSH2 0x1793 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x179E DUP5 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x180B PUSH1 0x3 PUSH2 0x17B0 DUP7 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x4 PUSH2 0x17BE DUP8 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x5 PUSH2 0x17CC DUP9 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0xC0 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG1 ADD PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 SWAP1 PUSH2 0x1838 SWAP1 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1854 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD DUP1 PUSH2 0x1866 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1327 JUMP JUMPDEST PUSH2 0x186F SWAP2 PUSH2 0x1384 JUMP JUMPDEST PUSH1 0x64 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x188C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x796F752061726520696E206465627421 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x18CB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1E5BDD48185C99481A5B881919589D PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x1926 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x19F2 PUSH1 0x5 PUSH2 0x19C8 PUSH2 0x200 PUSH1 0x4 PUSH2 0x1956 PUSH2 0x200 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD SWAP5 PUSH2 0x19AE PUSH1 0x4 PUSH2 0x197E PUSH2 0x200 DUP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x19A5 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x1885 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x18C4 JUMP JUMPDEST DUP1 PUSH2 0x1A01 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH2 0x1A1A PUSH2 0x1A14 PUSH2 0x1A20 SWAP4 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1106 JUMP JUMPDEST PUSH2 0x1CD7 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1A49 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1AEE JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1AB0 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1ABB JUMPI JUMPDEST POP PUSH2 0x1AAB SWAP2 SWAP3 PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1384 JUMP JUMPDEST PUSH5 0x2540BE400 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x1AAB SWAP3 POP PUSH2 0x1AE1 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI JUMPDEST PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1A25 JUMP JUMPDEST SWAP2 PUSH2 0x1AA0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x4 SWAP3 POP PUSH2 0x1B0A PUSH1 0x20 SWAP2 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A70 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x96 PUSH1 0x5 PUSH2 0x1B35 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD LT PUSH2 0x1B9F JUMPI PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1B7C PUSH2 0x200 PUSH2 0x1B60 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD DUP2 PUSH1 0x1 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI PUSH2 0x1415 SWAP2 PUSH1 0x3 SWAP1 DIV PUSH2 0x1106 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x1415 PUSH1 0x22 DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1BD0 DUP4 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CCB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x1FBD PUSH1 0x83 SHL DUP2 MSTORE PUSH1 0x10 DUP4 MSTORE PUSH2 0x1BF5 PUSH1 0x30 DUP5 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1C03 DUP5 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CAA JUMPI DUP3 MLOAD PUSH2 0xFFFF DUP2 GT PUSH2 0x1C91 JUMPI PUSH2 0xFFFF PUSH1 0x1 SWAP2 AND ADD SWAP2 PUSH2 0xFFFF DUP4 GT PUSH2 0x1113 JUMPI PUSH1 0x20 PUSH1 0x4 SWAP3 PUSH2 0x1415 SWAP5 PUSH2 0x1C80 PUSH1 0x40 MLOAD SWAP8 DUP6 PUSH2 0x1C4A DUP11 SWAP8 MLOAD DUP1 SWAP3 DUP9 DUP1 DUP12 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL SWAP1 DUP8 ADD DUP7 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x23 DUP5 ADD MSTORE MLOAD SWAP3 DUP4 SWAP1 PUSH1 0x24 DUP5 ADD SWAP1 PUSH2 0xB04 JUMP JUMPDEST ADD ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH4 0x6DFCC65 PUSH1 0xE4 SHL PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xFFFF PUSH2 0x1CB6 DUP4 PUSH2 0x1DCD JUMP JUMPDEST PUSH4 0x3A51740D PUSH1 0xE0 SHL PUSH1 0x0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1CB6 PUSH2 0xFFFF SWAP2 PUSH2 0x1DCD JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1CEC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP5 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x330 JUMPI PUSH1 0x4 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1D71 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1D4D SWAP4 PUSH2 0x1AAB SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x1D52 JUMPI JUMPDEST POP PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x1D6B SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x1D47 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP3 POP PUSH2 0x1D8C SWAP1 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH2 0x1D9C SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH32 0x0 LT ISZERO PUSH2 0x1DC8 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 MLOAD LT PUSH2 0x1DDD JUMPI PUSH1 0x2 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7431365F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"1397:23032:81:-:0;;;;;;;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;-1:-1:-1;;;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;;-1:-1:-1;1397:23032:81;;;4283:12;1397:23032;;;4305:45;1397:23032;;-1:-1:-1;;;;;;1397:23032:81;;;-1:-1:-1;;;;;1397:23032:81;;;;;;;4360:21;1397:23032;;;;;;;;;;;;;;4391:41;1397:23032;;;;;;;;;;;;;;;4458:15;1397:23032;;;4524:10;1397:23032;4544:32;1397:23032;4586:38;;;1397:23032;;;;;-1:-1:-1;;;;;1397:23032:81;;;;;;;;;;-1:-1:-1;1397:23032:81;;;4719:187;;-1:-1:-1;1397:23032:81;;;4719:187;;-1:-1:-1;1397:23032:81;;;4719:187;;-1:-1:-1;1397:23032:81;;;4719:187;;1397:23032;-1:-1:-1;1397:23032:81;;;4719:187;;1397:23032;-1:-1:-1;1397:23032:81;;4916:10;1397:23032;;;;;;;;;;;;4916:10;1397:23032;;;;;;4360:21;1397:23032;4916:10;-1:-1:-1;1397:23032:81;4391:41;1397:23032;-1:-1:-1;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4283:12;1397:23032;;;;4305:45;1397:23032;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1397:23032:81;;4305:45;1397:23032;;-1:-1:-1;1397:23032:81;;;;;-1:-1:-1;1397:23032:81;;4305:45;1397:23032;;-1:-1:-1;1397:23032:81;;-1:-1:-1;1397:23032:81;;;;;-1:-1:-1;;;;;1397:23032:81;;;;;;:::o","linkReferences":{}},"deployedBytecode":{"functionDebugData":{"abi_decode":{"entryPoint":2056,"id":null,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":1161,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":4603,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":2315,"id":null,"parameterSlots":1,"returnSlots":2},"abi_decode_int256_fromMemory":{"entryPoint":6693,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_MessagingFee_fromMemory":{"entryPoint":5064,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_MessagingFee_memory_ptr_fromMemory":{"entryPoint":5121,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_MessagingReceiptt_struct_OFTReceipt_fromMemory":{"entryPoint":5347,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint256":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_struct_vault_dyn":{"entryPoint":3648,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_SendParam":{"entryPoint":5144,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_SendParam_bool":{"entryPoint":5253,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_SendParam_struct_MessagingFee_address":{"entryPoint":5460,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_struct_vault":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_address_uint256_uint256_uint256_uint256":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"allocate_and_zero_memory_struct_struct_vault":{"entryPoint":5575,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":5028,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_array_string":{"entryPoint":5043,"id":null,"parameterSlots":0,"returnSlots":1},"array_push_from_struct_vault_to_array_struct_vault_storage_dyn_ptr":{"entryPoint":5703,"id":null,"parameterSlots":1,"returnSlots":0},"checked_add_uint256":{"entryPoint":5527,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256_11427":{"entryPoint":5513,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256":{"entryPoint":4996,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint256_11385":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256_11622":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256_11623":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256_11629":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":4977,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256_11384":{"entryPoint":4881,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_11424":{"entryPoint":4903,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_11621":{"entryPoint":4925,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_11634":{"entryPoint":4947,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256":{"entryPoint":4358,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2820,"id":null,"parameterSlots":3,"returnSlots":0},"external_fun_BASE_RISK_RATE":{"entryPoint":3024,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_CRP":{"entryPoint":3958,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_MODERATOR_ROLE":{"entryPoint":2965,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_RISK_PREMIUM_RATE":{"entryPoint":2067,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_burnRupioAndRelieveCollateral":{"entryPoint":835,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_checkUpkeep":{"entryPoint":2892,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_createOrUpdateVault":{"entryPoint":3298,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getAmountINRToETH":{"entryPoint":2790,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getCurrentVaultId":{"entryPoint":3197,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getMaxMintableRupio":{"entryPoint":3227,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getMaxWithdrawableCollateral":{"entryPoint":3083,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getTotalCollateralPrice":{"entryPoint":3107,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getTotalVaultDetails":{"entryPoint":3773,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getUserBalanceInINR":{"entryPoint":2126,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getUserCollateralBalance":{"entryPoint":3137,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getVaultDetailsForTheUser":{"entryPoint":2158,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getVaultHealth":{"entryPoint":2420,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_liquidateVault":{"entryPoint":1195,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_mintRupioOnDifferentChain":{"entryPoint":1361,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_mintRupioOnHomeChain":{"entryPoint":2444,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_performUpkeep":{"entryPoint":2396,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_scanVaults":{"entryPoint":3933,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_userIndexes":{"entryPoint":3251,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_withdrawFromVault":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation":{"entryPoint":4569,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_11552":{"entryPoint":4541,"id":null,"parameterSlots":1,"returnSlots":0},"fun_getAmountETHToINR":{"entryPoint":6708,"id":49460,"parameterSlots":1,"returnSlots":1},"fun_getAmountINRToETH":{"entryPoint":7383,"id":49504,"parameterSlots":1,"returnSlots":1},"fun_getIsLiquidationCondition":{"entryPoint":7571,"id":49415,"parameterSlots":1,"returnSlots":1},"fun_getMaxMintableRupio":{"entryPoint":6929,"id":49567,"parameterSlots":1,"returnSlots":1},"fun_getMaxWithdrawableCollateral":{"entryPoint":6402,"id":49656,"parameterSlots":1,"returnSlots":1},"fun_getUserBalanceInINR":{"entryPoint":5540,"id":49301,"parameterSlots":1,"returnSlots":1},"fun_getVaultHealth":{"entryPoint":6164,"id":49390,"parameterSlots":1,"returnSlots":1},"fun_newOptions":{"entryPoint":7078,"id":49744,"parameterSlots":0,"returnSlots":1},"fun_scanVaults":{"entryPoint":5853,"id":49168,"parameterSlots":0,"returnSlots":0},"fun_toUint16":{"entryPoint":7629,"id":47477,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_uint256_of_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"modifier_onlyModerator":{"entryPoint":4703,"id":48376,"parameterSlots":0,"returnSlots":0},"modifier_onlyType3":{"entryPoint":7106,"id":49732,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4336,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4114,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4519,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_storage_reference_type_struct_vault":{"entryPoint":5624,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_error_CollateralSafeKeep_ETHAmountMustBeGreaterThanZero":{"entryPoint":4200,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_error_CollateralSafekeep_UserInDebt":{"entryPoint":4300,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral":{"entryPoint":6340,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_37c6":{"entryPoint":4224,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_6dae":{"entryPoint":4806,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_7190":{"entryPoint":4627,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_77b1":{"entryPoint":6277,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_90f5":{"entryPoint":4017,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_96c4":{"entryPoint":4376,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_97ad":{"entryPoint":4443,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_c6bc":{"entryPoint":5282,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":4324,"id":null,"parameterSlots":0,"returnSlots":0},"storage_array_index_access_struct_vault__dyn":{"entryPoint":4172,"id":null,"parameterSlots":2,"returnSlots":2},"storage_array_index_access_struct_vault__dyn_11353":{"entryPoint":4136,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_offsett_uint256_to_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"object":"6080604052600436101561001257600080fd5b60003560e01c8063076d0815146101b8578063188afb74146101b3578063194d7494146101ae5780632a8ffe80146101a9578063310e84b514610181578063314860f8146101a45780633f3d2a881461019f5780634585e33b1461019a5780634a83cf4914610195578063515d22ce146101905780636653b8171461018b5780636e04ff0d146101865780637649aef114610181578063797669c91461017c578063839159fb146101455780639210ae64146101775780639dc1b45b14610172578063ab8454131461016d578063ae0b163f14610168578063b208816414610163578063b603540f1461015e578063bb82813214610159578063c48589cb14610154578063d7bf2aef1461014f578063ea6cfd4a1461014a578063eaa45b421461014a5763fb5989a61461014557600080fd5b610bd0565b610f76565b610f5d565b610ebd565b610ce2565b610cb3565b610c9b565b610c7d565b610c41565b610c23565b610c0b565b610b95565b610813565b610b4c565b610ae6565b61098c565b610974565b61095c565b61086e565b61084e565b610551565b6104ab565b610343565b602036600319011261033e576004353360005260086020526101e06040600020541515610fb1565b6101e933611814565b336000908152600860205260409020600590610206905b54611028565b5001558080156102168115611068565b33600090815260086020526040902061024190839060029061023790610200565b5001541015611080565b33600090815260086020526040902061026c9060969060059061026390610200565b500154116110cc565b61028061027833611902565b8311156110cc565b600090610335575b600080809381933390f115610330573360009081526008602052604090206102c0906002906102b690610200565b5001918254611106565b90553360009081526008602052604090206102e9906002906102e190610200565b500154611a34565b33600090815260086020526040902060039061030490610200565b50015561031033611814565b33600090815260086020526040902060059061032b90610200565b500155005b6110e4565b506108fc610288565b600080fd5b3461033e57602036600319011261033e576004353360005260086020526103706040600020541515610fb1565b61037933611814565b33600090815260086020526040902060059061039490610200565b5001553360009081526008602052604090206103c0906004906103b690610200565b5001541515611118565b3360009081526008602052604090206103eb9082906004906103e190610200565b500154101561115b565b600554610408906001600160a01b03165b6001600160a01b031690565b803b1561033e5760405163079cc67960e41b815233600482015260248101839052906000908290604490829084905af180156103305761046e575b50336000908152600860205260409020610463906004906102b690610200565b905561031033611814565b8061047d6000610483936111d9565b80610808565b38610443565b602090600319011261033e576004356001600160a01b038116810361033e5790565b3461033e576104b936610489565b506044602060018060a01b036004541660405192838092632474521560e21b82527f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f60048301523360248301525afa80156103305761052091600091610522575b50611213565b005b610544915060203d60201161054a575b61053c81836111d9565b8101906111fb565b3861051a565b503d610532565b604036600319011261033e5760043560243563ffffffff8116810361033e573360005260086020526105896040600020541515610fb1565b610594821515611068565b61059d33611814565b3360009081526008602052604090206005906105b890610200565b500155336000908152600860205260409020610604906005906105da90610200565b5001547f0000000000000000000000000000000000000000000000000000000000000000106110cc565b61061761061033611b11565b83106112c6565b610627610622611ba6565b611bc2565b610630336103fc565b61064361063c85611311565b600a900490565b9061065b61064f6113a4565b63ffffffff9095168552565b6020840152836040840152606083015260808201526106786113b3565b60a08201526106856113b3565b60c082015260055461069f906001600160a01b03166103fc565b60408051633b6f743b60e01b815291929082806106bf8460048301611485565b0381865afa918215610330576000926107d7575b506106e182513410156114a2565b823b1561033e576040516340c10f1960e01b815230600482015260248101859052926000908490604490829084905af19182156103305761075b9360c0936107c2575b5060055461073a906001600160a01b03166103fc565b90805160405180968195829463c7c7f5b360e01b8452339160048501611554565b03925af1801561033057610794575b503360009081526008602052604090206104639060049061078a90610200565b5001918254611597565b6107b59060c03d60c0116107bb575b6107ad81836111d9565b8101906114e3565b5061076a565b503d6107a3565b8061047d60006107d1936111d9565b38610724565b6107fa91925060403d604011610801575b6107f281836111d9565b810190611401565b90386106d3565b503d6107e8565b600091031261033e57565b3461033e57600036600319011261033e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461033e57602061086661086136610489565b6115a4565b604051908152f35b3461033e57600036600319011261033e576108876115c7565b503360005260086020526108a16040600020541515610fb1565b33600052600860205260c06108c36108bd604060002054611028565b506115f8565b610909604051809260a0809180518452600180831b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151910152565bf35b90602060031983011261033e5760043567ffffffffffffffff811161033e578260238201121561033e5780600401359267ffffffffffffffff841161033e576024848301011161033e576024019190565b3461033e5761096a3661090b565b50506105206116dd565b3461033e57602061086661098736610489565b611814565b3461033e57602036600319011261033e576004353360005260086020526109b96040600020541515610fb1565b6109c4811515611068565b6109cd33611814565b3360009081526008602052604090206005906109e890610200565b500155336000908152600860205260409020610a0a906005906105da90610200565b610a1333611b11565b610a1e8183106112c6565b600554610a33906001600160a01b03166103fc565b91823b1561033e576040516340c10f1960e01b815233600482015260248101829052926000908490604490829084905af192831561033057610acd93610ad1575b50336000908152600860205260409020610a949060049061078a90610200565b9055610a9f33611814565b336000908152600860205260409020600590610aba90610200565b5001556040519081529081906020820190565b0390f35b8061047d6000610ae0936111d9565b38610a74565b3461033e57602036600319011261033e576020610866600435611cd7565b60005b838110610b175750506000910152565b8181015183820152602001610b07565b90602091610b4081518092818552858086019101610b04565b601f01601f1916010190565b3461033e57610b5a3661090b565b5050604051600181526040602082015260208160406060518082840152610b8681606085016080610b04565b601f01601f1916820101030190f35b3461033e57600036600319011261033e5760206040517f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f8152f35b3461033e57600036600319011261033e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461033e576020610866610c1e36610489565b611902565b3461033e57600036600319011261033e576020600254604051908152f35b3461033e576001600160a01b03610c5736610489565b16600052600860205260206002610c72604060002054611028565b500154604051908152f35b3461033e57600036600319011261033e576020600354604051908152f35b3461033e576020610866610cae36610489565b611b11565b3461033e576001600160a01b03610cc936610489565b1660005260086020526020604060002054604051908152f35b600036600319011261033e57610cf9341515611068565b33600090815260086020526040902054610dad57610d59610d186115c7565b346040820152336020820152600354815260006080820152610d41610d3c34611a34565b611327565b60a0820152610d4f34611a34565b6060820152611647565b60035433600090815260086020526040902055610d7f610d7a600354611589565b600355565b336000908152600860205260409020610acd90610d9b90610200565b50546040519081529081906020820190565b336000908152600860205260409020600290610dc890610200565b5001610dd5348254611597565b9055336000908152600860205260409020610df6906002906102e190610200565b336000908152600860205260409020600390610e1190610200565b500155610e1d33611814565b336000908152600860205260409020600590610e3890610200565b500155610d7f565b602060408183019282815284518094520192019060005b818110610e645750505090565b909192602060c082610eb2600194885160a0809180518452600180831b0360208201511660208501526040810151604085015260608101516060850152608081015160808501520151910152565b019401929101610e57565b3461033e57600036600319011261033e5760075467ffffffffffffffff8111610f585760405190610ef460208260051b01836111d9565b8082526020820160076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6886000915b838310610f3a5760405180610acd8782610e40565b60066020600192610f4a856115f8565b815201920192019190610f25565b6111a7565b3461033e57600036600319011261033e576105206116dd565b3461033e57600036600319011261033e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b15610fb857565b60405162461bcd60e51b815260206004820152602c60248201527f596f7520646f6e7420686176652061205661756c742c2063726561746520612060448201526b7661756c742066697273742160a01b6064820152608490fd5b634e487b7160e01b600052603260045260246000fd5b6007548110156110475760076000526006602060002091020190600090565b611012565b8054821015611047576000526006602060002091020190600090565b1561106f57565b6316670b4760e21b60005260046000fd5b1561108757565b60405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e742062616c616e636520696e207661756c740000006044820152606490fd5b156110d357565b637f8953f760e01b60005260046000fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b9190820391821161111357565b6110f0565b1561111f57565b60405162461bcd60e51b8152602060048201526014602482015273273790393ab834b79034b9b9bab2b2103cb2ba1760611b6044820152606490fd5b1561116257565b60405162461bcd60e51b815260206004820152601b60248201527f4c65737320616d6f756e74206f6620727570696f2069737375656400000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff821117610f5857604052565b90601f8019910116810190811067ffffffffffffffff821117610f5857604052565b9081602091031261033e5751801515810361033e5790565b1561121a57565b60405162461bcd60e51b815260206004820152601860248201527f4d7573742068617665204d4f44455241544f525f524f4c4500000000000000006044820152606490fd5b6044602060018060a01b036004541660405192838092632474521560e21b82527f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f60048301523360248301525afa8015610330576112c4916000916105225750611213565b565b156112cd57565b606460405162461bcd60e51b815260206004820152602060248201527f656e74657220616d6f756e74206c657373207468616e204352502063726f73736044820152fd5b9060098202918083046009149015171561111357565b9060648202918083046064149015171561111357565b9060038202918083046003149015171561111357565b906402540be4008202918083046402540be400149015171561111357565b8181029291811591840414171561111357565b811561138e570490565b634e487b7160e01b600052601260045260246000fd5b604051906112c460e0836111d9565b604051906113c26020836111d9565b60008252565b919082604091031261033e576040516040810181811067ffffffffffffffff821117610f58576040526020808294805184520151910152565b9060408282031261033e57611415916113c8565b90565b6114159163ffffffff825116815260208201516020820152604082015160408201526060820151606082015260c0611474611462608085015160e0608086015260e0850190610b27565b60a085015184820360a0860152610b27565b9201519060c0818403910152610b27565b9190602061149d600092604086526040860190611418565b930152565b156114a957565b60405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b6044820152606490fd5b919082810360c0811261033e5760801361033e57604051906060820182811067ffffffffffffffff821117610f585760405283518252602084015167ffffffffffffffff8116810361033e5782608091602061141595015261154883604088016113c8565b604082015294016113c8565b919392602061156d606093608086526080860190611418565b86518583015295015160408401526001600160a01b0316910152565b906001820180921161111357565b9190820180921161111357565b60018060a01b0316600052600860205261141560026102e1604060002054611028565b604051906115d4826111bd565b600060a0838281528260208201528260408201528260608201528260808201520152565b90604051611605816111bd565b8254815260018301546001600160a01b0316602082015260028301546040820152600383015460608201526004830154608082015260059092015460a0830152565b60075468010000000000000000811015610f585780600161166d9201600755600761104c565b9190916116c75760a08160059251845560018401600180841b036020830151166bffffffffffffffffffffffff841b8254161790556040810151600285015560608101516003850155608081015160048501550151910155565b634e487b7160e01b600052600060045260246000fd5b60075460005b8181106116ee575050565b8061171061086160016117018195611028565b5001546001600160a01b031690565b600361171b83611028565b50015561172e6109878361170184611028565b600561173983611028565b50015561175161174c8361170184611028565b611d93565b5061175b81611028565b505061176561125f565b7f5c0ddc9ba6a3ee218f8b0b2e6583514fb1a2403fc52dd2adb715d5cb41ab1a206117938361170184611028565b600261179e84611028565b5001549061180b60036117b086611028565b50015460046117be87611028565b50015460056117cc88611028565b500154604080518981526001600160a01b0390961660208701528501959095526060840191909152608083015260a082019290925290819060c0820190565b0390a1016116e3565b6001600160a01b031660008181526008602052604090205460039061183890611028565b5001549060005260086020526004611854604060002054611028565b50015480611866575061141590611327565b61186f91611384565b6064810290808204606414901517156111135790565b1561188c57565b60405162461bcd60e51b815260206004820152601060248201526f796f752061726520696e20646562742160801b6044820152606490fd5b156118cb57565b60405162461bcd60e51b815260206004820152600f60248201526e1e5bdd48185c99481a5b881919589d608a1b6044820152606490fd5b6001600160a01b038116600090815260086020526040902060039061192690610200565b500154906119f260056119c861020060046119566102008760018060a01b03166000526008602052604060002090565b500154946119ae600461197e6102008460018060a01b03166000526008602052604060002090565b5001546001600160a01b03831660009081526008602052604090206003906119a590610200565b50015411611885565b6001600160a01b0316600090815260086020526040902090565b5001547f0000000000000000000000000000000000000000000000000000000000000000106118c4565b80611a01575061141590611cd7565b61141591611a1a611a14611a209361133d565b60011c90565b90611106565b611cd7565b9081602091031261033e575190565b600654611a49906001600160a01b03166103fc565b604051639bd713cf60e01b81529091602082600481865afa91821561033057600092611aee575b506020600492936040519384809263693cf00560e11b82525afa80156103305761141593611ab093600092611abb575b50611aab9192611371565b611384565b6402540be400900490565b611aab9250611ae19060203d602011611ae7575b611ad981836111d9565b810190611a25565b91611aa0565b503d611acf565b60049250611b0a602091823d8411611ae757611ad981836111d9565b9250611a70565b60018060a01b03811680600052600860205260966005611b35604060002054611028565b50015410611b9f5760005260086020526004611b7c610200611b6060026102e1604060002054611028565b6001600160a01b03909416600090815260086020526040902090565b5001548160011b9180830460021490151715611113576114159160039004611106565b5050600090565b604051600360f01b6020820152600281526114156022826111d9565b600361ffff611bd083611dcd565b1603611ccb576040519060208201611fbd60831b815260108352611bf56030846111d9565b600361ffff611c0384611dcd565b1603611caa57825161ffff8111611c915761ffff60019116019161ffff831161111357602060049261141594611c806040519785611c4a8a9751809288808b019101610b04565b600160f81b90870186810182905260f09490941b6001600160f01b03191660218501526023840152519283906024840190610b04565b01010301601f1981018352826111d9565b6306dfcc6560e41b600052601060045260245260446000fd5b61ffff611cb683611dcd565b633a51740d60e01b6000521660045260246000fd5b611cb661ffff91611dcd565b600654611cec906001600160a01b03166103fc565b604051639bd713cf60e01b815290602082600481845afa90811561033057600492600092611d71575b506020906040519384809263693cf00560e11b82525afa9182156103305761141593611d4d93611aab92600091611d52575b50611371565b611353565b611d6b915060203d602011611ae757611ad981836111d9565b38611d47565b6020919250611d8c90823d8411611ae757611ad981836111d9565b9190611d15565b611d9c90611814565b7f00000000000000000000000000000000000000000000000000000000000000001015611dc857600090565b600190565b6002815110611ddd576002015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x76D0815 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x188AFB74 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x194D7494 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2A8FFE80 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x310E84B5 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x314860F8 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x3F3D2A88 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x4A83CF49 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x515D22CE EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x6653B817 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x7649AEF1 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x797669C9 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x839159FB EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x9210AE64 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x9DC1B45B EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xAB845413 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0xAE0B163F EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0xB2088164 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xB603540F EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xBB828132 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xC48589CB EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xD7BF2AEF EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xEA6CFD4A EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xEAA45B42 EQ PUSH2 0x14A JUMPI PUSH4 0xFB5989A6 EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF5D JUMP JUMPDEST PUSH2 0xEBD JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST PUSH2 0xC41 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC0B JUMP JUMPDEST PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x813 JUMP JUMPDEST PUSH2 0xB4C JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x98C JUMP JUMPDEST PUSH2 0x974 JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x84E JUMP JUMPDEST PUSH2 0x551 JUMP JUMPDEST PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1E0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x1E9 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x206 SWAP1 JUMPDEST SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE DUP1 DUP1 ISZERO PUSH2 0x216 DUP2 ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x241 SWAP1 DUP4 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x237 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x1080 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x26C SWAP1 PUSH1 0x96 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x263 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x280 PUSH2 0x278 CALLER PUSH2 0x1902 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x335 JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 CALLER SWAP1 CALL ISZERO PUSH2 0x330 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2C0 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1106 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2E9 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH2 0x1A34 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x304 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x32B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE STOP JUMPDEST PUSH2 0x10E4 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x288 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x370 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x379 CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x394 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3C0 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD ISZERO ISZERO PUSH2 0x1118 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3EB SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x3E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD LT ISZERO PUSH2 0x115B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x408 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x46E JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x2B6 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x310 CALLER PUSH2 0x1814 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x483 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 PUSH2 0x808 JUMP JUMPDEST CODESIZE PUSH2 0x443 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x4B9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST POP PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x520 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI JUMPDEST POP PUSH2 0x1213 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x544 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x54A JUMPI JUMPDEST PUSH2 0x53C DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x11FB JUMP JUMPDEST CODESIZE PUSH2 0x51A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x532 JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x589 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x594 DUP3 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x59D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x5B8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x604 SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x617 PUSH2 0x610 CALLER PUSH2 0x1B11 JUMP JUMPDEST DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x627 PUSH2 0x622 PUSH2 0x1BA6 JUMP JUMPDEST PUSH2 0x1BC2 JUMP JUMPDEST PUSH2 0x630 CALLER PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x643 PUSH2 0x63C DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH1 0xA SWAP1 DIV SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x65B PUSH2 0x64F PUSH2 0x13A4 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP6 AND DUP6 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x678 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x685 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH2 0x69F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x3B6F743B PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 SWAP1 DUP3 DUP1 PUSH2 0x6BF DUP5 PUSH1 0x4 DUP4 ADD PUSH2 0x1485 JUMP JUMPDEST SUB DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x7D7 JUMPI JUMPDEST POP PUSH2 0x6E1 DUP3 MLOAD CALLVALUE LT ISZERO PUSH2 0x14A2 JUMP JUMPDEST DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x75B SWAP4 PUSH1 0xC0 SWAP4 PUSH2 0x7C2 JUMPI JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x73A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP1 DUP1 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xC7C7F5B3 PUSH1 0xE0 SHL DUP5 MSTORE CALLER SWAP2 PUSH1 0x4 DUP6 ADD PUSH2 0x1554 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x794 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x463 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SWAP2 DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x7B5 SWAP1 PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x7BB JUMPI JUMPDEST PUSH2 0x7AD DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x14E3 JUMP JUMPDEST POP PUSH2 0x76A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7A3 JUMP JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0x7D1 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x724 JUMP JUMPDEST PUSH2 0x7FA SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x801 JUMPI JUMPDEST PUSH2 0x7F2 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1401 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x6D3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x33E JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x861 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x887 PUSH2 0x15C7 JUMP JUMPDEST POP CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x8A1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0xC0 PUSH2 0x8C3 PUSH2 0x8BD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP PUSH2 0x15F8 JUMP JUMPDEST PUSH2 0x909 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33E JUMPI DUP3 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x33E JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x33E JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x33E JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0x96A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0x987 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1814 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x4 CALLDATALOAD CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x9B9 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x9C4 DUP2 ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x9CD CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0x9E8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA0A SWAP1 PUSH1 0x5 SWAP1 PUSH2 0x5DA SWAP1 PUSH2 0x200 JUMP JUMPDEST PUSH2 0xA13 CALLER PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0xA1E DUP2 DUP4 LT PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0xA33 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x330 JUMPI PUSH2 0xACD SWAP4 PUSH2 0xAD1 JUMPI JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA94 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x78A SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA9F CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xABA SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH2 0x47D PUSH1 0x0 PUSH2 0xAE0 SWAP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0xA74 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH1 0x4 CALLDATALOAD PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB17 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB07 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0xB40 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH2 0xB5A CALLDATASIZE PUSH2 0x90B JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x40 PUSH1 0x60 MLOAD DUP1 DUP3 DUP5 ADD MSTORE PUSH2 0xB86 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x80 PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xC1E CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1902 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC57 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x2 PUSH2 0xC72 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x20 PUSH2 0x866 PUSH2 0xCAE CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST PUSH2 0x1B11 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCC9 CALLDATASIZE PUSH2 0x489 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0xCF9 CALLVALUE ISZERO ISZERO PUSH2 0x1068 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xDAD JUMPI PUSH2 0xD59 PUSH2 0xD18 PUSH2 0x15C7 JUMP JUMPDEST CALLVALUE PUSH1 0x40 DUP3 ADD MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 SLOAD DUP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xD41 PUSH2 0xD3C CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x1327 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xD4F CALLVALUE PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xD7F PUSH2 0xD7A PUSH1 0x3 SLOAD PUSH2 0x1589 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xACD SWAP1 PUSH2 0xD9B SWAP1 PUSH2 0x200 JUMP JUMPDEST POP SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 SWAP1 PUSH2 0xDC8 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD PUSH2 0xDD5 CALLVALUE DUP3 SLOAD PUSH2 0x1597 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xDF6 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x2E1 SWAP1 PUSH2 0x200 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0xE11 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xE1D CALLER PUSH2 0x1814 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SWAP1 PUSH2 0xE38 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SSTORE PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xE64 JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0x20 PUSH1 0xC0 DUP3 PUSH2 0xEB2 PUSH1 0x1 SWAP5 DUP9 MLOAD PUSH1 0xA0 DUP1 SWAP2 DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 DUP1 DUP4 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP3 SWAP2 ADD PUSH2 0xE57 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF58 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xEF4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL ADD DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x7 PUSH1 0x0 MSTORE PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0xF3A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xACD DUP8 DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 PUSH1 0x1 SWAP3 PUSH2 0xF4A DUP6 PUSH2 0x15F8 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH2 0x520 PUSH2 0x16DD JUMP JUMPDEST CALLVALUE PUSH2 0x33E JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x0 DUP2 MSTORE RETURN JUMPDEST ISZERO PUSH2 0xFB8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E7420686176652061205661756C742C20637265617465206120 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7661756C7420666972737421 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x7 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1012 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1047 JUMPI PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x106F JUMPI JUMP JUMPDEST PUSH4 0x16670B47 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1087 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742062616C616E636520696E207661756C74000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x10D3 JUMPI JUMP JUMPDEST PUSH4 0x7F8953F7 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH2 0x10F0 JUMP JUMPDEST ISZERO PUSH2 0x111F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x273790393AB834B79034B9B9BAB2B2103CB2BA17 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1162 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C65737320616D6F756E74206F6620727570696F206973737565640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x33E JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x121A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742068617665204D4F44455241544F525F524F4C450000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x24745215 PUSH1 0xE2 SHL DUP3 MSTORE PUSH32 0x71F3D55856E4058ED06EE057D79ADA615F65CDF5F9EE88181B914225088F834F PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x12C4 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x522 JUMPI POP PUSH2 0x1213 JUMP JUMPDEST JUMP JUMPDEST ISZERO PUSH2 0x12CD JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656E74657220616D6F756E74206C657373207468616E204352502063726F7373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x9 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x9 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x64 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x3 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x3 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP1 PUSH5 0x2540BE400 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH5 0x2540BE400 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1113 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x138E JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12C4 PUSH1 0xE0 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x13C2 PUSH1 0x20 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE PUSH1 0x20 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH2 0x33E JUMPI PUSH2 0x1415 SWAP2 PUSH2 0x13C8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH4 0xFFFFFFFF DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xC0 PUSH2 0x1474 PUSH2 0x1462 PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xE0 PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD SWAP1 PUSH2 0xB27 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0xC0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xB27 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 PUSH2 0x149D PUSH1 0x0 SWAP3 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST SWAP4 ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x14A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x696E73756666696369656E742066756E6473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 DUP2 SUB PUSH1 0xC0 DUP2 SLT PUSH2 0x33E JUMPI PUSH1 0x80 SGT PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xF58 JUMPI PUSH1 0x40 MSTORE DUP4 MLOAD DUP3 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x33E JUMPI DUP3 PUSH1 0x80 SWAP2 PUSH1 0x20 PUSH2 0x1415 SWAP6 ADD MSTORE PUSH2 0x1548 DUP4 PUSH1 0x40 DUP9 ADD PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP5 ADD PUSH2 0x13C8 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH1 0x20 PUSH2 0x156D PUSH1 0x60 SWAP4 PUSH1 0x80 DUP7 MSTORE PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x1418 JUMP JUMPDEST DUP7 MLOAD DUP6 DUP4 ADD MSTORE SWAP6 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1113 JUMPI JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1415 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x15D4 DUP3 PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1605 DUP2 PUSH2 0x11BD JUMP JUMPDEST DUP3 SLOAD DUP2 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xF58 JUMPI DUP1 PUSH1 0x1 PUSH2 0x166D SWAP3 ADD PUSH1 0x7 SSTORE PUSH1 0x7 PUSH2 0x104C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x16C7 JUMPI PUSH1 0xA0 DUP2 PUSH1 0x5 SWAP3 MLOAD DUP5 SSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x1 DUP1 DUP5 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x16EE JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1710 PUSH2 0x861 PUSH1 0x1 PUSH2 0x1701 DUP2 SWAP6 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x171B DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x172E PUSH2 0x987 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x1739 DUP4 PUSH2 0x1028 JUMP JUMPDEST POP ADD SSTORE PUSH2 0x1751 PUSH2 0x174C DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x1D93 JUMP JUMPDEST POP PUSH2 0x175B DUP2 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x1765 PUSH2 0x125F JUMP JUMPDEST PUSH32 0x5C0DDC9BA6A3EE218F8B0B2E6583514FB1A2403FC52DD2ADB715D5CB41AB1A20 PUSH2 0x1793 DUP4 PUSH2 0x1701 DUP5 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x179E DUP5 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x180B PUSH1 0x3 PUSH2 0x17B0 DUP7 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x4 PUSH2 0x17BE DUP8 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x5 PUSH2 0x17CC DUP9 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0xC0 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG1 ADD PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 SWAP1 PUSH2 0x1838 SWAP1 PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1854 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD DUP1 PUSH2 0x1866 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1327 JUMP JUMPDEST PUSH2 0x186F SWAP2 PUSH2 0x1384 JUMP JUMPDEST PUSH1 0x64 DUP2 MUL SWAP1 DUP1 DUP3 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x188C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x796F752061726520696E206465627421 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x18CB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1E5BDD48185C99481A5B881919589D PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x1926 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD SWAP1 PUSH2 0x19F2 PUSH1 0x5 PUSH2 0x19C8 PUSH2 0x200 PUSH1 0x4 PUSH2 0x1956 PUSH2 0x200 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD SWAP5 PUSH2 0x19AE PUSH1 0x4 PUSH2 0x197E PUSH2 0x200 DUP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 SWAP1 PUSH2 0x19A5 SWAP1 PUSH2 0x200 JUMP JUMPDEST POP ADD SLOAD GT PUSH2 0x1885 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD PUSH32 0x0 LT PUSH2 0x18C4 JUMP JUMPDEST DUP1 PUSH2 0x1A01 JUMPI POP PUSH2 0x1415 SWAP1 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x1415 SWAP2 PUSH2 0x1A1A PUSH2 0x1A14 PUSH2 0x1A20 SWAP4 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1106 JUMP JUMPDEST PUSH2 0x1CD7 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x33E JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1A49 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1AEE JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1AB0 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1ABB JUMPI JUMPDEST POP PUSH2 0x1AAB SWAP2 SWAP3 PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1384 JUMP JUMPDEST PUSH5 0x2540BE400 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x1AAB SWAP3 POP PUSH2 0x1AE1 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI JUMPDEST PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1A25 JUMP JUMPDEST SWAP2 PUSH2 0x1AA0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x4 SWAP3 POP PUSH2 0x1B0A PUSH1 0x20 SWAP2 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A70 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x96 PUSH1 0x5 PUSH2 0x1B35 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST POP ADD SLOAD LT PUSH2 0x1B9F JUMPI PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x4 PUSH2 0x1B7C PUSH2 0x200 PUSH2 0x1B60 PUSH1 0x2 PUSH2 0x2E1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP ADD SLOAD DUP2 PUSH1 0x1 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1113 JUMPI PUSH2 0x1415 SWAP2 PUSH1 0x3 SWAP1 DIV PUSH2 0x1106 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x1415 PUSH1 0x22 DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1BD0 DUP4 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CCB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x1FBD PUSH1 0x83 SHL DUP2 MSTORE PUSH1 0x10 DUP4 MSTORE PUSH2 0x1BF5 PUSH1 0x30 DUP5 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x3 PUSH2 0xFFFF PUSH2 0x1C03 DUP5 PUSH2 0x1DCD JUMP JUMPDEST AND SUB PUSH2 0x1CAA JUMPI DUP3 MLOAD PUSH2 0xFFFF DUP2 GT PUSH2 0x1C91 JUMPI PUSH2 0xFFFF PUSH1 0x1 SWAP2 AND ADD SWAP2 PUSH2 0xFFFF DUP4 GT PUSH2 0x1113 JUMPI PUSH1 0x20 PUSH1 0x4 SWAP3 PUSH2 0x1415 SWAP5 PUSH2 0x1C80 PUSH1 0x40 MLOAD SWAP8 DUP6 PUSH2 0x1C4A DUP11 SWAP8 MLOAD DUP1 SWAP3 DUP9 DUP1 DUP12 ADD SWAP2 ADD PUSH2 0xB04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL SWAP1 DUP8 ADD DUP7 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x23 DUP5 ADD MSTORE MLOAD SWAP3 DUP4 SWAP1 PUSH1 0x24 DUP5 ADD SWAP1 PUSH2 0xB04 JUMP JUMPDEST ADD ADD SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x11D9 JUMP JUMPDEST PUSH4 0x6DFCC65 PUSH1 0xE4 SHL PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xFFFF PUSH2 0x1CB6 DUP4 PUSH2 0x1DCD JUMP JUMPDEST PUSH4 0x3A51740D PUSH1 0xE0 SHL PUSH1 0x0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1CB6 PUSH2 0xFFFF SWAP2 PUSH2 0x1DCD JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1CEC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9BD713CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 DUP5 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x330 JUMPI PUSH1 0x4 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1D71 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x693CF005 PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x330 JUMPI PUSH2 0x1415 SWAP4 PUSH2 0x1D4D SWAP4 PUSH2 0x1AAB SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x1D52 JUMPI JUMPDEST POP PUSH2 0x1371 JUMP JUMPDEST PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x1D6B SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST CODESIZE PUSH2 0x1D47 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP3 POP PUSH2 0x1D8C SWAP1 DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x1AE7 JUMPI PUSH2 0x1AD9 DUP2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH2 0x1D9C SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH32 0x0 LT ISZERO PUSH2 0x1DC8 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 MLOAD LT PUSH2 0x1DDD JUMPI PUSH1 0x2 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7431365F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"1397:23032:81:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;1397:23032:81;;;;;;2898:10;-1:-1:-1;1397:23032:81;2886:11;1397:23032;;2865:118;1397:23032;-1:-1:-1;1397:23032:81;;2886:27;;2865:118;:::i;:::-;10645:49;2898:10;10645:49;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;10595:47;;:35;;10606:23;1397:23032;10595:35;:::i;:::-;:47;;1397:23032;10725:10;;;10704:107;10725:10;;10704:107;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;10821:129;;2898:10;;10842:43;;:35;;10853:23;1397:23032;10842:35;:43;;1397:23032;10842:53;;10821:129;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;10960:130;;11031:3;;10595:47;;10981:35;;10992:23;1397:23032;10981:35;:47;;1397:23032;10981:53;10960:130;:::i;:::-;11250:56;11199:41;2898:10;11199:41;:::i;:::-;11258:13;;;11250:56;:::i;:::-;-1:-1:-1;11379:36:81;;;1397:23032;-1:-1:-1;2898:10:81;;;;;;11379:36;;;;;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;11504:53;;10842:43;;11504:35;;11515:23;1397:23032;11504:35;:43;;1397:23032;;;11504:53;:::i;:::-;1397:23032;;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;11618:85;;10842:43;;11650:35;;11661:23;1397:23032;11650:35;:43;;1397:23032;11618:85;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;11567:48;;:35;;11578:23;1397:23032;11567:35;:48;;1397:23032;11763:49;2898:10;11763:49;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;10595:47;;11713:35;;11724:23;1397:23032;11713:35;-1:-1:-1;11713:47:81;1397:23032;;11379:36;;:::i;:::-;-1:-1:-1;11379:36:81;;;1397:23032;-1:-1:-1;1397:23032:81;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;2898:10;-1:-1:-1;1397:23032:81;2886:11;1397:23032;;2865:118;1397:23032;-1:-1:-1;1397:23032:81;;2886:27;;2865:118;:::i;:::-;12204:49;2898:10;12204:49;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;12154:47;;:35;;12165:23;1397:23032;12154:35;-1:-1:-1;12154:47:81;1397:23032;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;12263:118;;1397:23032;;12284:35;;12295:23;1397:23032;12284:35;:47;;1397:23032;12284:51;;12263:118;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;12391:131;;2898:10;;1397:23032;;12412:35;;12423:23;1397:23032;12412:35;:47;;1397:23032;12412:57;;12391:131;:::i;:::-;12154:47;1397:23032;12580:14;;-1:-1:-1;;;;;1397:23032:81;;-1:-1:-1;;;;;1397:23032:81;;;12580:14;:34;;;;;1397:23032;;-1:-1:-1;;;12580:34:81;;2898:10;1397:23032;12580:34;;1397:23032;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;-1:-1:-1;;12580:34:81;;;;;;;;1397:23032;-1:-1:-1;2898:10:81;1397:23032;;;;2886:11;1397:23032;;;;;12700:57;;1397:23032;;12700:35;;12711:23;1397:23032;12700:57;1397:23032;;12817:49;2898:10;12817:49;:::i;12580:34::-;;;-1:-1:-1;12580:34:81;;;:::i;:::-;;;:::i;:::-;;;;1397:23032;;;;;;;;;;;-1:-1:-1;;;;;1397:23032:81;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;3307:49;1397:23032;;;;;;;;;;;;;;;;;;3307:49;;1558:27;1397:23032;3307:49;;1397:23032;3345:10;1397:23032;;;;3307:49;;;;;;3286:120;3307:49;-1:-1:-1;3307:49:81;;;1397:23032;3286:120;;:::i;:::-;1397:23032;3307:49;;;;1397:23032;3307:49;1397:23032;3307:49;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1397:23032;;;-1:-1:-1;;1397:23032:81;;;;;;;;;;;;;;;2898:10;-1:-1:-1;1397:23032:81;2886:11;1397:23032;;2865:118;1397:23032;-1:-1:-1;1397:23032:81;;2886:27;;2865:118;:::i;:::-;8630:107;8651:10;;;8630:107;:::i;:::-;8834:49;2898:10;8834:49;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;8784:47;;:35;;8795:23;1397:23032;8784:35;-1:-1:-1;8784:47:81;1397:23032;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;8893:130;;8784:47;;8914:35;;8925:23;1397:23032;8914:35;:47;;1397:23032;8964:3;-1:-1:-1;8893:130:81;:::i;:::-;9188:57;9146:32;2898:10;9146:32;:::i;:::-;9196:12;;9188:57;:::i;:::-;2189:12:82;9316:40:81;;:::i;:::-;2189:12:82;:::i;:::-;24396:23:81;2898:10;24404:14;1397:23032;24396:23;9596:17;9597:10;;;:::i;:::-;9611:2;1397:23032;;;;9596:17;1397:23032;9445:237;1397:23032;;:::i;:::-;;;;;;;;9445:237;1397:23032;9445:237;;1397:23032;9445:237;1397:23032;9445:237;;1397:23032;;9445:237;;1397:23032;9445:237;;;1397:23032;;;:::i;:::-;9445:237;;;1397:23032;;;:::i;:::-;9445:237;;;1397:23032;8784:47;1397:23032;9739:15;;-1:-1:-1;;;;;1397:23032:81;;;9739:15;1397:23032;;;-1:-1:-1;;;9739:33:81;;1397:23032;;;;;9739:33;1397:23032;;9739:33;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;9739:33:81;;;1397:23032;;9782:57;1397:23032;;9790:9;:26;;9782:57;:::i;:::-;9849:33;;;;;1397:23032;;-1:-1:-1;;;9849:33:81;;9868:4;1397:23032;9849:33;;1397:23032;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;-1:-1:-1;;9849:33:81;;;;;;;9958:60;9849:33;9445:237;9849:33;;;1397:23032;-1:-1:-1;8784:47:81;1397:23032;9958:10;;-1:-1:-1;;;;;1397:23032:81;;;9958:10;1397:23032;;;;;;;;;;;;;;9958:60;;2898:10;9958:60;1397:23032;9958:60;;;:::i;:::-;;;;;;;;;;;1397:23032;-1:-1:-1;2898:10:81;1397:23032;;;;2886:11;1397:23032;;;;;10103:57;;1397:23032;;10103:35;;10114:23;1397:23032;10103:35;:47;;1397:23032;;;10103:57;:::i;9958:60::-;;;9445:237;9958:60;9445:237;9958:60;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;9849:33;;;-1:-1:-1;9849:33:81;;;:::i;:::-;;;;9739;;;;;1397:23032;9739:33;1397:23032;9739:33;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;1397:23032;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;1397:23032:81;;;;;;;1670:42;1397:23032;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;:::i;:::-;;2898:10;1397:23032;;2886:11;1397:23032;;2865:118;1397:23032;;;;2886:27;;2865:118;:::i;:::-;2898:10;1397:23032;;2886:11;1397:23032;;;;16365:35;1397:23032;;;;16365:35;:::i;:::-;1397:23032;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;13666:104;;;;:::i;1397:23032::-;;;;;16771:22;1397:23032;;;:::i;:::-;16771:22;:::i;1397:23032::-;;;;;;-1:-1:-1;;1397:23032:81;;;;;;2898:10;-1:-1:-1;1397:23032:81;2886:11;1397:23032;;2865:118;1397:23032;-1:-1:-1;1397:23032:81;;2886:27;;2865:118;:::i;:::-;7525:107;7546:10;;;7525:107;:::i;:::-;7729:49;2898:10;7729:49;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;7679:47;;:35;;7690:23;1397:23032;7679:35;-1:-1:-1;7679:47:81;1397:23032;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;7788:130;;7679:47;;7809:35;;7820:23;1397:23032;7788:130;8041:32;2898:10;8041:32;:::i;:::-;8083:57;8091:12;;;8083:57;:::i;:::-;7679:47;1397:23032;8191:10;;-1:-1:-1;;;;;1397:23032:81;;;8191:10;:30;;;;;;1397:23032;;-1:-1:-1;;;8191:30:81;;2898:10;1397:23032;8191:30;;1397:23032;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;-1:-1:-1;;8191:30:81;;;;;;;1397:23032;8191:30;;;1397:23032;-1:-1:-1;2898:10:81;1397:23032;;;;2886:11;1397:23032;;;;;8307:57;;1397:23032;;8307:35;;8318:23;1397:23032;8307:57;1397:23032;;8424:49;2898:10;8424:49;:::i;:::-;2898:10;1397:23032;;;;2886:11;1397:23032;;;;;7679:47;;8374:35;;8385:23;1397:23032;8374:35;-1:-1:-1;8374:47:81;1397:23032;;;;;;;;;;;;;;;;;;8191:30;;;-1:-1:-1;8191:30:81;;;:::i;:::-;;;;1397:23032;;;;;;-1:-1:-1;;1397:23032:81;;;;;19107:29;1397:23032;;19107:29;:::i;1397:23032::-;;;;;;;;-1:-1:-1;;1397:23032:81;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1397:23032:81;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;13332:4;1397:23032;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1397:23032:81;;;;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;;1558:27;1397:23032;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;;;1625:39;1397:23032;;;;;;;;19519:35;1397:23032;;;:::i;:::-;19519:35;:::i;1397:23032::-;;;;;;-1:-1:-1;;1397:23032:81;;;;;17894:24;1397:23032;;;;;;;;;;;-1:-1:-1;;;;;1397:23032:81;;;:::i;:::-;;-1:-1:-1;1397:23032:81;17142:11;1397:23032;;;17131:41;:33;1397:23032;-1:-1:-1;1397:23032:81;;17131:33;:::i;:::-;:41;;1397:23032;;;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;;17535:8;1397:23032;;;;;;;;;;;;19901:26;1397:23032;;;:::i;:::-;19901:26;:::i;1397:23032::-;;;;-1:-1:-1;;;;;1397:23032:81;;;:::i;:::-;;-1:-1:-1;1397:23032:81;2725:46;1397:23032;;;;-1:-1:-1;1397:23032:81;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;5355:110;5376:9;:13;;5355:110;:::i;:::-;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;;5538:10;;6039:25;1397:23032;;:::i;:::-;5376:9;5605:16;;;1397:23032;5538:10;5647:20;;;1397:23032;5713:8;1397:23032;;;;5735:20;;;1397:23032;5837:35;:29;5376:9;5837:29;:::i;:::-;:35;:::i;:::-;5814:20;;;1397:23032;5938:29;5376:9;5938:29;:::i;:::-;5914:21;;;1397:23032;6039:25;:::i;:::-;5713:8;1397:23032;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;;6232:23;6243:12;5713:8;1397:23032;6243:12;:::i;:::-;5713:8;1397:23032;;6232:23;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;;;6809:35;;6820:23;1397:23032;6809:35;-1:-1:-1;1397:23032:81;;;;;;;;;;;;;;5522:1271;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;6390:43;;:35;;6401:23;1397:23032;6390:35;:43;;:56;5376:9;1397:23032;;6390:56;:::i;:::-;1397:23032;;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;6528:93;;6390:43;;6564:35;;6575:23;1397:23032;6528:93;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;6460:65;;:35;;6471:23;1397:23032;6460:35;:65;;1397:23032;6725:57;5538:10;6725:57;:::i;:::-;5538:10;1397:23032;;;;2886:11;1397:23032;;;;;6675:47;;:35;;6686:23;1397:23032;6675:35;:47;;1397:23032;5522:1271;;1397:23032;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1397:23032:81;;;;18240:10;1397:23032;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;18240:10;1397:23032;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1397:23032:81;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1397:23032:81;;;;;;;1591:28;1397:23032;;;;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;;;;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;10595:10;1397:23032;;;;;;10595:10;-1:-1:-1;1397:23032:81;;;-1:-1:-1;1397:23032:81;;;;;-1:-1:-1;1397:23032:81;:::o;:::-;;:::i;:::-;;;;;;;;-1:-1:-1;1397:23032:81;;;-1:-1:-1;1397:23032:81;;;;;-1:-1:-1;1397:23032:81;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;3251:173;3307:49;1397:23032;;;;;;3307:13;1397:23032;;;;;;;;;;;3307:49;;1558:27;3307:13;:49;;1397:23032;3345:10;1397:23032;;;;3307:49;;;;;;3286:120;3307:49;-1:-1:-1;3307:49:81;;;3286:120;;:::i;:::-;3251:173::o;1397:23032::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;9606:1;1397:23032;;;;;;9606:1;1397:23032;;;;;;;:::o;:::-;;5869:3;1397:23032;;;;;;5869:3;1397:23032;;;;;;;:::o;:::-;;23447:42;1397:23032;;;;;;23447:42;1397:23032;;;;;;;:::o;:::-;;22229:4;1397:23032;;;;;;22229:4;1397:23032;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;-1:-1:-1;1397:23032:81;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;2912:1;1397:23032;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;;;;;;;;-1:-1:-1;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;1397:23032:81;;;;:::o;:::-;;6254:1;1397:23032;;;;;;;:::o;:::-;;;;;;;;;;:::o;18472:249::-;1397:23032;;;;;;-1:-1:-1;1397:23032:81;18616:11;1397:23032;;18691:23;18605:41;:33;1397:23032;-1:-1:-1;1397:23032:81;;18605:33;:::i;1397:23032::-;;;;;;;:::i;:::-;-1:-1:-1;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;6039:10;1397:23032;;;;;;;;;;;;6039:10;1397:23032;6039:10;1397:23032;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;14133:1036;14242:10;1397:23032;14354:1;14357:24;;;;;;14133:1036;;:::o;14383:3::-;14468:13;14431:76;1397:23032;;14468:13;;;;:::i;:::-;-1:-1:-1;14468:25:81;1397:23032;-1:-1:-1;;;;;1397:23032:81;;;14431:76;14402:26;:13;;;:::i;:::-;:26;;1397:23032;16771:22;1397:23032;14581:13;;;;:::i;16771:22::-;14521:25;:13;;;:::i;:::-;:25;;1397:23032;14649:83;1397:23032;14693:13;;;;:::i;1397:23032::-;14649:83;:::i;:::-;;14799:13;;;:::i;:::-;;;;;:::i;:::-;14848:290;1397:23032;14910:13;;;;:::i;1397:23032::-;14957:21;:13;;;:::i;:::-;:21;;1397:23032;15000:13;14848:290;14402:26;15000:13;;;:::i;:::-;:26;;1397:23032;15048:25;:13;;;:::i;:::-;:25;;1397:23032;14521:25;15095:13;;;:::i;:::-;-1:-1:-1;15095:25:81;1397:23032;;;;;;;-1:-1:-1;;;;;1397:23032:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14848:290;;;;1397:23032;14342:13;;20104:504;-1:-1:-1;;;;;1397:23032:81;;;;;20218:11;1397:23032;;;;;;20207:43;;:30;;;:::i;:::-;:43;;1397:23032;;;;20218:11;1397:23032;;20304:42;:30;1397:23032;;;;20304:30;:::i;:::-;-1:-1:-1;20304:42:81;1397:23032;20413:16;;;20452;;;;:::i;20409:193::-;20524:26;;;:::i;:::-;20554:3;1397:23032;;;;;;20554:3;1397:23032;;;;;;;20572:19;:::o;1397:23032::-;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;-1:-1:-1;;;1397:23032:81;;;;;;;23317:813;-1:-1:-1;;;;;1397:23032:81;;;;;;2886:11;1397:23032;;;;;23447:42;;:29;;23458:17;1397:23032;23447:29;:42;;1397:23032;23532:17;23747:109;23768:41;:29;23779:17;23521:41;:29;23532:17;;1397:23032;;;;;;;;2886:11;1397:23032;;;;;;;23521:29;:41;;1397:23032;23604:17;23572:165;23521:41;23593:29;23604:17;;1397:23032;;;;;;;;2886:11;1397:23032;;;;;;;23593:29;-1:-1:-1;23593:41:81;1397:23032;-1:-1:-1;;;;;1397:23032:81;;;;;;2886:11;1397:23032;;;;;23447:42;;23653:29;;23664:17;1397:23032;23653:29;:42;;1397:23032;-1:-1:-1;23572:165:81;:::i;:::-;-1:-1:-1;;;;;1397:23032:81;;;;;2886:11;1397:23032;;;;;;;23768:29;:41;;1397:23032;23812:3;-1:-1:-1;23747:109:81;:::i;:::-;23870:16;;;23909:30;;;;:::i;23866:258::-;24070:21;23983:15;23982:21;23983:15;24029:14;23983:15;;:::i;:::-;1397:23032;;;;23982:21;24029:14;;:::i;:::-;24070:21;:::i;1397:23032::-;;;;;;;;;;;:::o;21358:351::-;21472:13;1397:23032;21472:22;;-1:-1:-1;;;;;1397:23032:81;;;21472:22;1397:23032;;-1:-1:-1;;;21472:24:81;;1397:23032;;21472:24;1397:23032;21472:24;1397:23032;;21472:24;;;;;;;-1:-1:-1;21472:24:81;;;21358:351;1397:23032;21472:24;;1397:23032;;;;;;;;;;;21543:24;;;;;;;;21675:8;21543:24;21614:37;21543:24;-1:-1:-1;21543:24:81;;;21358:351;21615:22;;;;;:::i;:::-;21614:37;:::i;:::-;21679:4;1397:23032;;;;21543:24;21615:22;21543:24;;;;21472;21543;21472;21543;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;21472;;;;;;;;;;;;;;;;;:::i;:::-;;;;;22470:608;1397:23032;;;;;;;;;;22585:11;1397:23032;;22618:3;22574:41;:29;1397:23032;;;;22574:29;:::i;:::-;:41;;1397:23032;22574:47;22570:86;;1397:23032;;22585:11;1397:23032;;22863:41;:29;22874:17;22791:23;22679:37;:29;1397:23032;;;;22679:29;:::i;22791:23::-;-1:-1:-1;;;;;1397:23032:81;;;;;;;2886:11;1397:23032;;;;;;;22863:29;:41;;1397:23032;;;;;;;;22679:37;1397:23032;;;;;;;23026:23;;22998:1;1397:23032;;23026:23;:::i;22570:86::-;22637:8;;1397:23032;22637:8;:::o;1222:107:82:-;1397:23032:81;;-1:-1:-1;;;1298:24:82;;;712:1;1298:24;;;;;1397:23032:81;1298:24:82;:::i;907:176::-;712:1;1397:23032:81;963:20:82;;;:::i;:::-;1397:23032:81;963:30:82;959:107;;1397:23032:81;;3097:22:60;;;;1397:23032:81;;;;;3097:22:60;;;;;;;:::i;:::-;712:1:82;1397:23032:81;963:20:82;;;:::i;:::-;1397:23032:81;963:30:82;959:107;;1397:23032:81;;;16369:24:76;;16365:103;;1397:23032:81;3083:11:60;1397:23032:81;;238:1:60;;1397:23032:81;238:1:60;;;;3097:22;238:1;1397:23032:81;5764:221:82;1397:23032:81;238:1:60;1397:23032:81;;;;238:1:60;1397:23032:81;;;5764:221:82;;;;;;238:1:60;;;:::i;:::-;-1:-1:-1;;;238:1:60;;;;;;;;;712::82;;;;;-1:-1:-1;;;;;;712:1:82;238::60;;;712::82;238::60;;;;1397:23032:81;;;;238:1:60;;;;;:::i;:::-;;;5764:221:82;;1397:23032:81;;5764:221:82;;;;;;:::i;16365:103:76:-;16416:41;;;1397:23032:81;16416:41:76;3097:22:60;16416:41:76;1397:23032:81;;;;;16416:41:76;959:107:82;1397:23032:81;1034:20:82;;;:::i;:::-;1016:39;;;1397:23032:81;1016:39:82;1397:23032:81;1016:39:82;1397:23032:81;;;1016:39:82;959:107;1034:20;1397:23032:81;1034:20:82;;:::i;21961:297:81:-;22075:13;1397:23032;22075:22;;-1:-1:-1;;;;;1397:23032:81;;;22075:22;1397:23032;;-1:-1:-1;;;22075:24:81;;1397:23032;22075:24;1397:23032;22075:24;1397:23032;;22075:24;;;;;;;;;-1:-1:-1;22075:24:81;;;21961:297;1397:23032;22075:24;1397:23032;;;;;;;;;;22120:24;;;;;;;;;22225:8;22120:24;22166:37;22120:24;22167:22;22120:24;-1:-1:-1;22120:24:81;;;21961:297;22167:22;;:::i;22166:37::-;22225:8;:::i;22120:24::-;;;;22075;22120;22075;22120;;;;;;;:::i;:::-;;;;22075;;;;;;;;;;;;;;;;;:::i;:::-;;;;;20851:255;16771:22;20851:255;16771:22;:::i;:::-;21016:3;-1:-1:-1;21016:3:81;;;1397:23032;21035:12;:::o;21002:98::-;21085:4;21078:11;:::o;12935:305:77:-;13065:1;1397:23032:81;;13039:27:77;1397:23032:81;;13065:1:77;13127:81;;12935:305;:::o;1397:23032:81:-;;;-1:-1:-1;;;1397:23032:81;;;;;;;;;;;;-1:-1:-1;;;1397:23032:81;;;;;;","linkReferences":{},"immutableReferences":{"48274":[{"start":1503,"length":32},{"start":3982,"length":32},{"start":6605,"length":32},{"start":7582,"length":32}],"48276":[{"start":3048,"length":32}],"48278":[{"start":2091,"length":32}]}},"methodIdentifiers":{"BASE_RISK_RATE()":"839159fb","CRP()":"ea6cfd4a","MODERATOR_ROLE()":"797669c9","RISK_PREMIUM_RATE()":"310e84b5","burnRupioAndRelieveCollateral(uint256)":"188afb74","checkUpkeep(bytes)":"6e04ff0d","createOrUpdateVault()":"bb828132","getAmountINRToETH(uint256)":"6653b817","getBASE_RISK_RATE()":"fb5989a6","getCRP()":"eaa45b42","getCurrentVaultId()":"ae0b163f","getMaxMintableRupio(address)":"b2088164","getMaxWithdrawableCollateral(address)":"9210ae64","getRISK_PREMIUM_RATE()":"7649aef1","getTotalCollateralPrice()":"9dc1b45b","getTotalVaultDetails()":"c48589cb","getUserBalanceInINR(address)":"314860f8","getUserCollateralBalance(address)":"ab845413","getVaultDetailsForTheUser()":"3f3d2a88","getVaultHealth(address)":"4a83cf49","liquidateVault(address)":"194d7494","mintRupioOnDifferentChain(uint256,uint32)":"2a8ffe80","mintRupioOnHomeChain(uint256)":"515d22ce","performUpkeep(bytes)":"4585e33b","scanVaults()":"d7bf2aef","userIndexes(address)":"b603540f","withdrawFromVault(uint256)":"076d0815"}}}}},"sources":{"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationBase.sol":{"id":0,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol":{"id":1,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"id":2,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol":{"id":3,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol":{"id":4,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol":{"id":5,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"id":6,"ast":{}},"lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol":{"id":7,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol":{"id":8,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol":{"id":9,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol":{"id":10,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol":{"id":11,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol":{"id":12,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol":{"id":13,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol":{"id":14,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol":{"id":15,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol":{"id":16,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol":{"id":17,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol":{"id":18,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol":{"id":19,"ast":{}},"lib/devtools/packages/oapp-evm/contracts/precrime/libs/Packet.sol":{"id":20,"ast":{}},"lib/devtools/packages/oft-evm/contracts/OFT.sol":{"id":21,"ast":{}},"lib/devtools/packages/oft-evm/contracts/OFTCore.sol":{"id":22,"ast":{}},"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol":{"id":23,"ast":{}},"lib/devtools/packages/oft-evm/contracts/libs/OFTComposeMsgCodec.sol":{"id":24,"ast":{}},"lib/devtools/packages/oft-evm/contracts/libs/OFTMsgCodec.sol":{"id":25,"ast":{}},"lib/forge-std/src/Base.sol":{"id":26,"ast":{}},"lib/forge-std/src/Script.sol":{"id":27,"ast":{}},"lib/forge-std/src/StdAssertions.sol":{"id":28,"ast":{}},"lib/forge-std/src/StdChains.sol":{"id":29,"ast":{}},"lib/forge-std/src/StdCheats.sol":{"id":30,"ast":{}},"lib/forge-std/src/StdError.sol":{"id":31,"ast":{}},"lib/forge-std/src/StdInvariant.sol":{"id":32,"ast":{}},"lib/forge-std/src/StdJson.sol":{"id":33,"ast":{}},"lib/forge-std/src/StdMath.sol":{"id":34,"ast":{}},"lib/forge-std/src/StdStorage.sol":{"id":35,"ast":{}},"lib/forge-std/src/StdStyle.sol":{"id":36,"ast":{}},"lib/forge-std/src/StdToml.sol":{"id":37,"ast":{}},"lib/forge-std/src/StdUtils.sol":{"id":38,"ast":{}},"lib/forge-std/src/Test.sol":{"id":39,"ast":{}},"lib/forge-std/src/Vm.sol":{"id":40,"ast":{}},"lib/forge-std/src/console.sol":{"id":41,"ast":{}},"lib/forge-std/src/console2.sol":{"id":42,"ast":{}},"lib/forge-std/src/interfaces/IERC165.sol":{"id":43,"ast":{}},"lib/forge-std/src/interfaces/IERC20.sol":{"id":44,"ast":{}},"lib/forge-std/src/interfaces/IERC721.sol":{"id":45,"ast":{}},"lib/forge-std/src/interfaces/IMulticall3.sol":{"id":46,"ast":{}},"lib/forge-std/src/mocks/MockERC20.sol":{"id":47,"ast":{}},"lib/forge-std/src/mocks/MockERC721.sol":{"id":48,"ast":{}},"lib/forge-std/src/safeconsole.sol":{"id":49,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol":{"id":50,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol":{"id":51,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLib.sol":{"id":52,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol":{"id":53,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol":{"id":54,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol":{"id":55,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol":{"id":56,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ISendLib.sol":{"id":57,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/AddressCast.sol":{"id":58,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol":{"id":59,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/ExecutorOptions.sol":{"id":60,"ast":{}},"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/PacketV1Codec.sol":{"id":61,"ast":{}},"lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"id":62,"ast":{}},"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"id":63,"ast":{}},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"id":64,"ast":{}},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"id":65,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"id":66,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"id":67,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"id":68,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"id":69,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"id":70,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"id":71,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"id":72,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"id":73,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"id":74,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"id":75,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"id":76,"ast":{}},"lib/solidity-bytes-utils/contracts/BytesLib.sol":{"id":77,"ast":{}},"script/DeployHomeChain.s.sol":{"id":78,"ast":{"absolutePath":"script/DeployHomeChain.s.sol","id":47886,"exportedSymbols":{"AccessManager":[48238],"CollateralSafekeep":[49677],"DeployHomeChain":[47885],"HelperConfig":[48138],"MockV3Aggregator":[424],"PriceFeed":[50715],"Rupio":[50173],"RupioSavingsContract":[50563],"Script":[3041],"console":[27041]},"nodeType":"SourceUnit","src":"32:1982:78","nodes":[{"id":47687,"nodeType":"PragmaDirective","src":"32:24:78","nodes":[],"literals":["solidity","^","0.8",".10"]},{"id":47689,"nodeType":"ImportDirective","src":"58:44:78","nodes":[],"absolutePath":"lib/forge-std/src/Script.sol","file":"forge-std/Script.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":3042,"symbolAliases":[{"foreign":{"id":47688,"name":"Script","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"66:6:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47691,"nodeType":"ImportDirective","src":"103:43:78","nodes":[],"absolutePath":"lib/forge-std/src/Test.sol","file":"forge-std/Test.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":15075,"symbolAliases":[{"foreign":{"id":47690,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27041,"src":"111:7:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47693,"nodeType":"ImportDirective","src":"147:50:78","nodes":[],"absolutePath":"script/HelperConfig.s.sol","file":"./HelperConfig.s.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":48139,"symbolAliases":[{"foreign":{"id":47692,"name":"HelperConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48138,"src":"155:12:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47695,"nodeType":"ImportDirective","src":"198:55:78","nodes":[],"absolutePath":"src/AccessManager.sol","file":"../src/AccessManager.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":48239,"symbolAliases":[{"foreign":{"id":47694,"name":"AccessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48238,"src":"206:13:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47697,"nodeType":"ImportDirective","src":"254:47:78","nodes":[],"absolutePath":"src/priceFeed.sol","file":"../src/priceFeed.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":50716,"symbolAliases":[{"foreign":{"id":47696,"name":"PriceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50715,"src":"262:9:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47699,"nodeType":"ImportDirective","src":"302:39:78","nodes":[],"absolutePath":"src/Rupio.sol","file":"../src/Rupio.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":50174,"symbolAliases":[{"foreign":{"id":47698,"name":"Rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50173,"src":"310:5:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47701,"nodeType":"ImportDirective","src":"342:65:78","nodes":[],"absolutePath":"src/CollateralSafekeep.sol","file":"../src/CollateralSafekeep.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":49678,"symbolAliases":[{"foreign":{"id":47700,"name":"CollateralSafekeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49677,"src":"350:18:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47703,"nodeType":"ImportDirective","src":"408:69:78","nodes":[],"absolutePath":"src/RupioSavingsContract.sol","file":"../src/RupioSavingsContract.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":50564,"symbolAliases":[{"foreign":{"id":47702,"name":"RupioSavingsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50563,"src":"416:20:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47705,"nodeType":"ImportDirective","src":"478:90:78","nodes":[],"absolutePath":"lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol","file":"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol","nameLocation":"-1:-1:-1","scope":47886,"sourceUnit":425,"symbolAliases":[{"foreign":{"id":47704,"name":"MockV3Aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"486:16:78","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":47885,"nodeType":"ContractDefinition","src":"570:1443:78","nodes":[{"id":47710,"nodeType":"VariableDeclaration","src":"611:25:78","nodes":[],"constant":false,"mutability":"mutable","name":"helperconfig","nameLocation":"624:12:78","scope":47885,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"},"typeName":{"id":47709,"nodeType":"UserDefinedTypeName","pathNode":{"id":47708,"name":"HelperConfig","nameLocations":["611:12:78"],"nodeType":"IdentifierPath","referencedDeclaration":48138,"src":"611:12:78"},"referencedDeclaration":48138,"src":"611:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"visibility":"internal"},{"id":47713,"nodeType":"VariableDeclaration","src":"642:27:78","nodes":[],"constant":false,"mutability":"mutable","name":"accessmanager","nameLocation":"656:13:78","scope":47885,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"},"typeName":{"id":47712,"nodeType":"UserDefinedTypeName","pathNode":{"id":47711,"name":"AccessManager","nameLocations":["642:13:78"],"nodeType":"IdentifierPath","referencedDeclaration":48238,"src":"642:13:78"},"referencedDeclaration":48238,"src":"642:13:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"visibility":"internal"},{"id":47716,"nodeType":"VariableDeclaration","src":"675:19:78","nodes":[],"constant":false,"mutability":"mutable","name":"pricefeed","nameLocation":"685:9:78","scope":47885,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"},"typeName":{"id":47715,"nodeType":"UserDefinedTypeName","pathNode":{"id":47714,"name":"PriceFeed","nameLocations":["675:9:78"],"nodeType":"IdentifierPath","referencedDeclaration":50715,"src":"675:9:78"},"referencedDeclaration":50715,"src":"675:9:78","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}},"visibility":"internal"},{"id":47719,"nodeType":"VariableDeclaration","src":"700:11:78","nodes":[],"constant":false,"mutability":"mutable","name":"rupio","nameLocation":"706:5:78","scope":47885,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"},"typeName":{"id":47718,"nodeType":"UserDefinedTypeName","pathNode":{"id":47717,"name":"Rupio","nameLocations":["700:5:78"],"nodeType":"IdentifierPath","referencedDeclaration":50173,"src":"700:5:78"},"referencedDeclaration":50173,"src":"700:5:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"visibility":"internal"},{"id":47722,"nodeType":"VariableDeclaration","src":"717:22:78","nodes":[],"constant":false,"mutability":"mutable","name":"csk","nameLocation":"736:3:78","scope":47885,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"},"typeName":{"id":47721,"nodeType":"UserDefinedTypeName","pathNode":{"id":47720,"name":"CollateralSafekeep","nameLocations":["717:18:78"],"nodeType":"IdentifierPath","referencedDeclaration":49677,"src":"717:18:78"},"referencedDeclaration":49677,"src":"717:18:78","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}},"visibility":"internal"},{"id":47725,"nodeType":"VariableDeclaration","src":"745:24:78","nodes":[],"constant":false,"mutability":"mutable","name":"isr","nameLocation":"766:3:78","scope":47885,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_RupioSavingsContract_$50563","typeString":"contract RupioSavingsContract"},"typeName":{"id":47724,"nodeType":"UserDefinedTypeName","pathNode":{"id":47723,"name":"RupioSavingsContract","nameLocations":["745:20:78"],"nodeType":"IdentifierPath","referencedDeclaration":50563,"src":"745:20:78"},"referencedDeclaration":50563,"src":"745:20:78","typeDescriptions":{"typeIdentifier":"t_contract$_RupioSavingsContract_$50563","typeString":"contract RupioSavingsContract"}},"visibility":"internal"},{"id":47884,"nodeType":"FunctionDefinition","src":"776:1235:78","nodes":[],"body":{"id":47883,"nodeType":"Block","src":"800:1211:78","nodes":[],"statements":[{"expression":{"id":47733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47728,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"810:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":47731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"825:16:78","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_HelperConfig_$48138_$","typeString":"function () returns (contract HelperConfig)"},"typeName":{"id":47730,"nodeType":"UserDefinedTypeName","pathNode":{"id":47729,"name":"HelperConfig","nameLocations":["829:12:78"],"nodeType":"IdentifierPath","referencedDeclaration":48138,"src":"829:12:78"},"referencedDeclaration":48138,"src":"829:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}}},"id":47732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"825:18:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"src":"810:33:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47734,"nodeType":"ExpressionStatement","src":"810:33:78"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47735,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"853:2:78","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$18917","typeString":"contract Vm"}},"id":47737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"856:14:78","memberName":"startBroadcast","nodeType":"MemberAccess","referencedDeclaration":16484,"src":"853:17:78","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":47738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"853:19:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47739,"nodeType":"ExpressionStatement","src":"853:19:78"},{"assignments":[47742],"declarations":[{"constant":false,"id":47742,"mutability":"mutable","name":"inrToUsdMock","nameLocation":"899:12:78","nodeType":"VariableDeclaration","scope":47883,"src":"882:29:78","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_MockV3Aggregator_$424","typeString":"contract MockV3Aggregator"},"typeName":{"id":47741,"nodeType":"UserDefinedTypeName","pathNode":{"id":47740,"name":"MockV3Aggregator","nameLocations":["882:16:78"],"nodeType":"IdentifierPath","referencedDeclaration":424,"src":"882:16:78"},"referencedDeclaration":424,"src":"882:16:78","typeDescriptions":{"typeIdentifier":"t_contract$_MockV3Aggregator_$424","typeString":"contract MockV3Aggregator"}},"visibility":"internal"}],"id":47755,"initialValue":{"arguments":[{"arguments":[{"hexValue":"38","id":47748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"954:1:78","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"id":47747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"948:5:78","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":47746,"name":"uint8","nodeType":"ElementaryTypeName","src":"948:5:78","typeDescriptions":{}}},"id":47749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"948:8:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"hexValue":"31323030303030","id":47752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"977:7:78","typeDescriptions":{"typeIdentifier":"t_rational_1200000_by_1","typeString":"int_const 1200000"},"value":"1200000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1200000_by_1","typeString":"int_const 1200000"}],"id":47751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"970:6:78","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":47750,"name":"int256","nodeType":"ElementaryTypeName","src":"970:6:78","typeDescriptions":{}}},"id":47753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"970:15:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":47745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"914:20:78","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_uint8_$_t_int256_$returns$_t_contract$_MockV3Aggregator_$424_$","typeString":"function (uint8,int256) returns (contract MockV3Aggregator)"},"typeName":{"id":47744,"nodeType":"UserDefinedTypeName","pathNode":{"id":47743,"name":"MockV3Aggregator","nameLocations":["918:16:78"],"nodeType":"IdentifierPath","referencedDeclaration":424,"src":"918:16:78"},"referencedDeclaration":424,"src":"918:16:78","typeDescriptions":{"typeIdentifier":"t_contract$_MockV3Aggregator_$424","typeString":"contract MockV3Aggregator"}}},"id":47754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"914:81:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_MockV3Aggregator_$424","typeString":"contract MockV3Aggregator"}},"nodeType":"VariableDeclarationStatement","src":"882:113:78"},{"expression":{"id":47761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47756,"name":"accessmanager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47713,"src":"1005:13:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":47759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1021:17:78","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_AccessManager_$48238_$","typeString":"function () returns (contract AccessManager)"},"typeName":{"id":47758,"nodeType":"UserDefinedTypeName","pathNode":{"id":47757,"name":"AccessManager","nameLocations":["1025:13:78"],"nodeType":"IdentifierPath","referencedDeclaration":48238,"src":"1025:13:78"},"referencedDeclaration":48238,"src":"1025:13:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}}},"id":47760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1021:19:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"src":"1005:35:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"id":47762,"nodeType":"ExpressionStatement","src":"1005:35:78"},{"expression":{"id":47776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47763,"name":"pricefeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47716,"src":"1050:9:78","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":47769,"name":"inrToUsdMock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47742,"src":"1097:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_MockV3Aggregator_$424","typeString":"contract MockV3Aggregator"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MockV3Aggregator_$424","typeString":"contract MockV3Aggregator"}],"id":47768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1089:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47767,"name":"address","nodeType":"ElementaryTypeName","src":"1089:7:78","typeDescriptions":{}}},"id":47770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:21:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47771,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"1124:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1137:20:78","memberName":"getBaseSepoliaConfig","nodeType":"MemberAccess","referencedDeclaration":48025,"src":"1124:33:78","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_NetworkConfig_$47919_memory_ptr_$","typeString":"function () view external returns (struct HelperConfig.NetworkConfig memory)"}},"id":47773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1124:35:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NetworkConfig_$47919_memory_ptr","typeString":"struct HelperConfig.NetworkConfig memory"}},"id":47774,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1160:12:78","memberName":"ethToUsdFeed","nodeType":"MemberAccess","referencedDeclaration":47908,"src":"1124:48:78","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":47766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1062:13:78","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_address_$_t_address_$returns$_t_contract$_PriceFeed_$50715_$","typeString":"function (address,address) returns (contract PriceFeed)"},"typeName":{"id":47765,"nodeType":"UserDefinedTypeName","pathNode":{"id":47764,"name":"PriceFeed","nameLocations":["1066:9:78"],"nodeType":"IdentifierPath","referencedDeclaration":50715,"src":"1066:9:78"},"referencedDeclaration":50715,"src":"1066:9:78","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}}},"id":47775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:120:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}},"src":"1050:132:78","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}},"id":47777,"nodeType":"ExpressionStatement","src":"1050:132:78"},{"expression":{"id":47795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47778,"name":"rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47719,"src":"1192:5:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47782,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"1223:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1236:20:78","memberName":"getBaseSepoliaConfig","nodeType":"MemberAccess","referencedDeclaration":48025,"src":"1223:33:78","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_NetworkConfig_$47919_memory_ptr_$","typeString":"function () view external returns (struct HelperConfig.NetworkConfig memory)"}},"id":47784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1223:35:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NetworkConfig_$47919_memory_ptr","typeString":"struct HelperConfig.NetworkConfig memory"}},"id":47785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1259:10:78","memberName":"lzEndpoint","nodeType":"MemberAccess","referencedDeclaration":47918,"src":"1223:46:78","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":47788,"name":"accessmanager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47713,"src":"1291:13:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}],"id":47787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1283:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47786,"name":"address","nodeType":"ElementaryTypeName","src":"1283:7:78","typeDescriptions":{}}},"id":47789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1283:22:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47790,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"1319:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1332:20:78","memberName":"getBaseSepoliaConfig","nodeType":"MemberAccess","referencedDeclaration":48025,"src":"1319:33:78","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_NetworkConfig_$47919_memory_ptr_$","typeString":"function () view external returns (struct HelperConfig.NetworkConfig memory)"}},"id":47792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1319:35:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NetworkConfig_$47919_memory_ptr","typeString":"struct HelperConfig.NetworkConfig memory"}},"id":47793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1355:8:78","memberName":"chainEid","nodeType":"MemberAccess","referencedDeclaration":47916,"src":"1319:44:78","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":47781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1200:9:78","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_address_$_t_address_$_t_uint32_$returns$_t_contract$_Rupio_$50173_$","typeString":"function (address,address,uint32) returns (contract Rupio)"},"typeName":{"id":47780,"nodeType":"UserDefinedTypeName","pathNode":{"id":47779,"name":"Rupio","nameLocations":["1204:5:78"],"nodeType":"IdentifierPath","referencedDeclaration":50173,"src":"1204:5:78"},"referencedDeclaration":50173,"src":"1204:5:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}}},"id":47794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1200:173:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"src":"1192:181:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":47796,"nodeType":"ExpressionStatement","src":"1192:181:78"},{"expression":{"id":47826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47797,"name":"csk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47722,"src":"1383:3:78","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47801,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"1425:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1438:20:78","memberName":"getBaseSepoliaConfig","nodeType":"MemberAccess","referencedDeclaration":48025,"src":"1425:33:78","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_NetworkConfig_$47919_memory_ptr_$","typeString":"function () view external returns (struct HelperConfig.NetworkConfig memory)"}},"id":47803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1425:35:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NetworkConfig_$47919_memory_ptr","typeString":"struct HelperConfig.NetworkConfig memory"}},"id":47804,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1461:3:78","memberName":"cip","nodeType":"MemberAccess","referencedDeclaration":47910,"src":"1425:39:78","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47805,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"1478:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1491:20:78","memberName":"getBaseSepoliaConfig","nodeType":"MemberAccess","referencedDeclaration":48025,"src":"1478:33:78","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_NetworkConfig_$47919_memory_ptr_$","typeString":"function () view external returns (struct HelperConfig.NetworkConfig memory)"}},"id":47807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1478:35:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NetworkConfig_$47919_memory_ptr","typeString":"struct HelperConfig.NetworkConfig memory"}},"id":47808,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1514:12:78","memberName":"baseRiskRate","nodeType":"MemberAccess","referencedDeclaration":47912,"src":"1478:48:78","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47809,"name":"helperconfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47710,"src":"1540:12:78","typeDescriptions":{"typeIdentifier":"t_contract$_HelperConfig_$48138","typeString":"contract HelperConfig"}},"id":47810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1553:20:78","memberName":"getBaseSepoliaConfig","nodeType":"MemberAccess","referencedDeclaration":48025,"src":"1540:33:78","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_NetworkConfig_$47919_memory_ptr_$","typeString":"function () view external returns (struct HelperConfig.NetworkConfig memory)"}},"id":47811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1540:35:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NetworkConfig_$47919_memory_ptr","typeString":"struct HelperConfig.NetworkConfig memory"}},"id":47812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1576:15:78","memberName":"riskPremiumRate","nodeType":"MemberAccess","referencedDeclaration":47914,"src":"1540:51:78","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":47815,"name":"accessmanager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47713,"src":"1613:13:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}],"id":47814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1605:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47813,"name":"address","nodeType":"ElementaryTypeName","src":"1605:7:78","typeDescriptions":{}}},"id":47816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1605:22:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":47819,"name":"rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47719,"src":"1649:5:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}],"id":47818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1641:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47817,"name":"address","nodeType":"ElementaryTypeName","src":"1641:7:78","typeDescriptions":{}}},"id":47820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:14:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":47823,"name":"pricefeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47716,"src":"1677:9:78","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}],"id":47822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1669:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47821,"name":"address","nodeType":"ElementaryTypeName","src":"1669:7:78","typeDescriptions":{}}},"id":47824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:18:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":47800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1389:22:78","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_address_$returns$_t_contract$_CollateralSafekeep_$49677_$","typeString":"function (uint256,uint256,uint256,address,address,address) returns (contract CollateralSafekeep)"},"typeName":{"id":47799,"nodeType":"UserDefinedTypeName","pathNode":{"id":47798,"name":"CollateralSafekeep","nameLocations":["1393:18:78"],"nodeType":"IdentifierPath","referencedDeclaration":49677,"src":"1393:18:78"},"referencedDeclaration":49677,"src":"1393:18:78","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}}},"id":47825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1389:308:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}},"src":"1383:314:78","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}},"id":47827,"nodeType":"ExpressionStatement","src":"1383:314:78"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":47828,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"1707:2:78","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$18917","typeString":"contract Vm"}},"id":47830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:13:78","memberName":"stopBroadcast","nodeType":"MemberAccess","referencedDeclaration":16500,"src":"1707:16:78","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":47831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1707:18:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47832,"nodeType":"ExpressionStatement","src":"1707:18:78"},{"expression":{"arguments":[{"hexValue":"70726963652066656564206d6f636b","id":47836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1747:17:78","typeDescriptions":{"typeIdentifier":"t_stringliteral_79c291c13f6fb656458f8708859cbc67041026d10fb08c1bd16804de00c156ce","typeString":"literal_string \"price feed mock\""},"value":"price feed mock"},{"arguments":[{"id":47839,"name":"rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47719,"src":"1774:5:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}],"id":47838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1766:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47837,"name":"address","nodeType":"ElementaryTypeName","src":"1766:7:78","typeDescriptions":{}}},"id":47840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:14:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_79c291c13f6fb656458f8708859cbc67041026d10fb08c1bd16804de00c156ce","typeString":"literal_string \"price feed mock\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":47833,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27041,"src":"1735:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$27041_$","typeString":"type(library console)"}},"id":47835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1743:3:78","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":19736,"src":"1735:11:78","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":47841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1735:46:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47842,"nodeType":"ExpressionStatement","src":"1735:46:78"},{"expression":{"arguments":[{"hexValue":"616363657373206d616e61676572","id":47846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1803:16:78","typeDescriptions":{"typeIdentifier":"t_stringliteral_4a8fc0afe87298974c01f0b1b462063868e7c7bcd793f004547746f05fbd965a","typeString":"literal_string \"access manager\""},"value":"access manager"},{"arguments":[{"id":47849,"name":"accessmanager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47713,"src":"1829:13:78","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}],"id":47848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1821:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47847,"name":"address","nodeType":"ElementaryTypeName","src":"1821:7:78","typeDescriptions":{}}},"id":47850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1821:22:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4a8fc0afe87298974c01f0b1b462063868e7c7bcd793f004547746f05fbd965a","typeString":"literal_string \"access manager\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":47843,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27041,"src":"1791:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$27041_$","typeString":"type(library console)"}},"id":47845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:3:78","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":19736,"src":"1791:11:78","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":47851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1791:53:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47852,"nodeType":"ExpressionStatement","src":"1791:53:78"},{"expression":{"arguments":[{"hexValue":"727570696f","id":47856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1866:7:78","typeDescriptions":{"typeIdentifier":"t_stringliteral_76eca772177abfdfaea0f578f286c4f20f5f60a30f8a254c91a9e4c66b4caf4f","typeString":"literal_string \"rupio\""},"value":"rupio"},{"arguments":[{"id":47859,"name":"rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47719,"src":"1883:5:78","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}],"id":47858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1875:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47857,"name":"address","nodeType":"ElementaryTypeName","src":"1875:7:78","typeDescriptions":{}}},"id":47860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1875:14:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_76eca772177abfdfaea0f578f286c4f20f5f60a30f8a254c91a9e4c66b4caf4f","typeString":"literal_string \"rupio\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":47853,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27041,"src":"1854:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$27041_$","typeString":"type(library console)"}},"id":47855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1862:3:78","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":19736,"src":"1854:11:78","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":47861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1854:36:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47862,"nodeType":"ExpressionStatement","src":"1854:36:78"},{"expression":{"arguments":[{"hexValue":"70726963652066656564","id":47866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1912:12:78","typeDescriptions":{"typeIdentifier":"t_stringliteral_8c4213d61f3fab013ae39767c84ddf090024582e299bad89a978d0631dbf2199","typeString":"literal_string \"price feed\""},"value":"price feed"},{"arguments":[{"id":47869,"name":"pricefeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47716,"src":"1934:9:78","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PriceFeed_$50715","typeString":"contract PriceFeed"}],"id":47868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1926:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47867,"name":"address","nodeType":"ElementaryTypeName","src":"1926:7:78","typeDescriptions":{}}},"id":47870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1926:18:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8c4213d61f3fab013ae39767c84ddf090024582e299bad89a978d0631dbf2199","typeString":"literal_string \"price feed\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":47863,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27041,"src":"1900:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$27041_$","typeString":"type(library console)"}},"id":47865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1908:3:78","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":19736,"src":"1900:11:78","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":47871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1900:45:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47872,"nodeType":"ExpressionStatement","src":"1900:45:78"},{"expression":{"arguments":[{"hexValue":"636f6c6c61746572616c2073616665206b656570","id":47876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1967:22:78","typeDescriptions":{"typeIdentifier":"t_stringliteral_db3f10e3b9b07dc84865abaf63e964990da1370008178b4fcb54956b4ec728ea","typeString":"literal_string \"collateral safe keep\""},"value":"collateral safe keep"},{"arguments":[{"id":47879,"name":"csk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47722,"src":"1999:3:78","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}],"id":47878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1991:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47877,"name":"address","nodeType":"ElementaryTypeName","src":"1991:7:78","typeDescriptions":{}}},"id":47880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1991:12:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_db3f10e3b9b07dc84865abaf63e964990da1370008178b4fcb54956b4ec728ea","typeString":"literal_string \"collateral safe keep\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":47873,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27041,"src":"1955:7:78","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$27041_$","typeString":"type(library console)"}},"id":47875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1963:3:78","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":19736,"src":"1955:11:78","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":47881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1955:49:78","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47882,"nodeType":"ExpressionStatement","src":"1955:49:78"}]},"functionSelector":"c0406226","implemented":true,"kind":"function","modifiers":[],"name":"run","nameLocation":"785:3:78","parameters":{"id":47726,"nodeType":"ParameterList","parameters":[],"src":"788:2:78"},"returnParameters":{"id":47727,"nodeType":"ParameterList","parameters":[],"src":"800:0:78"},"scope":47885,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":47706,"name":"Script","nameLocations":["598:6:78"],"nodeType":"IdentifierPath","referencedDeclaration":3041,"src":"598:6:78"},"id":47707,"nodeType":"InheritanceSpecifier","src":"598:6:78"}],"canonicalName":"DeployHomeChain","contractDependencies":[424,48138,48238,49677,50173,50715],"contractKind":"contract","fullyImplemented":true,"internalFunctionIDs":{"18970":1},"linearizedBaseContracts":[47885,3041,15022,8549,6489,3002,2990],"name":"DeployHomeChain","nameLocation":"579:15:78","scope":47886,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"script/HelperConfig.s.sol":{"id":79,"ast":{}},"src/AccessManager.sol":{"id":80,"ast":{}},"src/CollateralSafekeep.sol":{"id":81,"ast":{"absolutePath":"src/CollateralSafekeep.sol","id":49678,"exportedSymbols":{"AccessManager":[48238],"AutomationCompatibleInterface":[67],"CollateralSafekeep":[49677],"IERC20":[44840],"MessagingFee":[41791],"OFTReceipt":[2493],"OptionsBuilder":[49995],"PriceFeed":[50060],"ReentrancyGuard":[45544],"Rupio":[50173],"SendParam":[2481]},"nodeType":"SourceUnit","src":"32:24398:81","nodes":[{"id":48240,"nodeType":"PragmaDirective","src":"32:24:81","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":48242,"nodeType":"ImportDirective","src":"58:70:81","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":44841,"symbolAliases":[{"foreign":{"id":48241,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44840,"src":"66:6:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48244,"nodeType":"ImportDirective","src":"129:50:81","nodes":[],"absolutePath":"src/AccessManager.sol","file":"./AccessManager.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":48239,"symbolAliases":[{"foreign":{"id":48243,"name":"AccessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48238,"src":"137:13:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48246,"nodeType":"ImportDirective","src":"180:42:81","nodes":[],"absolutePath":"src/PriceFeed.sol","file":"./PriceFeed.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":50061,"symbolAliases":[{"foreign":{"id":48245,"name":"PriceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50060,"src":"188:9:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48248,"nodeType":"ImportDirective","src":"223:34:81","nodes":[],"absolutePath":"src/Rupio.sol","file":"./Rupio.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":50174,"symbolAliases":[{"foreign":{"id":48247,"name":"Rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50173,"src":"231:5:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48250,"nodeType":"ImportDirective","src":"258:82:81","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":45545,"symbolAliases":[{"foreign":{"id":48249,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45544,"src":"266:15:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48252,"nodeType":"ImportDirective","src":"341:112:81","nodes":[],"absolutePath":"lib/chainlink-brownie-contracts/contracts/src/v0.8/automation/AutomationCompatible.sol","file":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":49,"symbolAliases":[{"foreign":{"id":48251,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"349:29:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48255,"nodeType":"ImportDirective","src":"454:91:81","nodes":[],"absolutePath":"lib/devtools/packages/oft-evm/contracts/interfaces/IOFT.sol","file":"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":2605,"symbolAliases":[{"foreign":{"id":48253,"name":"SendParam","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"462:9:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":48254,"name":"OFTReceipt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"473:10:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48257,"nodeType":"ImportDirective","src":"546:62:81","nodes":[],"absolutePath":"src/Libraries/OptionsBuilder.sol","file":"./Libraries/OptionsBuilder.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":49996,"symbolAliases":[{"foreign":{"id":48256,"name":"OptionsBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49995,"src":"554:14:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":48259,"nodeType":"ImportDirective","src":"609:77:81","nodes":[],"absolutePath":"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol","file":"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol","nameLocation":"-1:-1:-1","scope":49678,"sourceUnit":471,"symbolAliases":[{"foreign":{"id":48258,"name":"MessagingFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41791,"src":"617:12:81","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":49677,"nodeType":"ContractDefinition","src":"1397:23032:81","nodes":[{"id":48267,"nodeType":"UsingForDirective","src":"1481:31:81","nodes":[],"global":false,"libraryName":{"id":48265,"name":"OptionsBuilder","nameLocations":["1487:14:81"],"nodeType":"IdentifierPath","referencedDeclaration":49995,"src":"1487:14:81"},"typeName":{"id":48266,"name":"bytes","nodeType":"ElementaryTypeName","src":"1506:5:81","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"id":48272,"nodeType":"VariableDeclaration","src":"1517:68:81","nodes":[],"constant":true,"functionSelector":"797669c9","mutability":"constant","name":"MODERATOR_ROLE","nameLocation":"1541:14:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":48268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1517:7:81","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d4f44455241544f525f524f4c45","id":48270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1568:16:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f","typeString":"literal_string \"MODERATOR_ROLE\""},"value":"MODERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f","typeString":"literal_string \"MODERATOR_ROLE\""}],"id":48269,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1558:9:81","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":48271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1558:27:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"id":48274,"nodeType":"VariableDeclaration","src":"1591:28:81","nodes":[],"constant":false,"functionSelector":"ea6cfd4a","mutability":"immutable","name":"CRP","nameLocation":"1616:3:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1591:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"id":48276,"nodeType":"VariableDeclaration","src":"1625:39:81","nodes":[],"constant":false,"functionSelector":"839159fb","mutability":"immutable","name":"BASE_RISK_RATE","nameLocation":"1650:14:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48275,"name":"uint256","nodeType":"ElementaryTypeName","src":"1625:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"id":48278,"nodeType":"VariableDeclaration","src":"1670:42:81","nodes":[],"constant":false,"functionSelector":"310e84b5","mutability":"immutable","name":"RISK_PREMIUM_RATE","nameLocation":"1695:17:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1670:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"id":48280,"nodeType":"VariableDeclaration","src":"1718:29:81","nodes":[],"constant":false,"mutability":"mutable","name":"lastTimeStamp","nameLocation":"1734:13:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48279,"name":"uint256","nodeType":"ElementaryTypeName","src":"1718:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":48282,"nodeType":"VariableDeclaration","src":"1753:40:81","nodes":[],"constant":false,"mutability":"mutable","name":"currentCollateralBalance","nameLocation":"1769:24:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":48281,"name":"int256","nodeType":"ElementaryTypeName","src":"1753:6:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"id":48284,"nodeType":"VariableDeclaration","src":"1857:25:81","nodes":[],"constant":false,"mutability":"mutable","name":"VAULT_ID","nameLocation":"1874:8:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48283,"name":"uint256","nodeType":"ElementaryTypeName","src":"1857:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":48287,"nodeType":"VariableDeclaration","src":"1888:36:81","nodes":[],"constant":false,"mutability":"mutable","name":"accessManager","nameLocation":"1911:13:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"},"typeName":{"id":48286,"nodeType":"UserDefinedTypeName","pathNode":{"id":48285,"name":"AccessManager","nameLocations":["1888:13:81"],"nodeType":"IdentifierPath","referencedDeclaration":48238,"src":"1888:13:81"},"referencedDeclaration":48238,"src":"1888:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"visibility":"internal"},{"id":48290,"nodeType":"VariableDeclaration","src":"1930:20:81","nodes":[],"constant":false,"mutability":"mutable","name":"token","nameLocation":"1945:5:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"},"typeName":{"id":48289,"nodeType":"UserDefinedTypeName","pathNode":{"id":48288,"name":"Rupio","nameLocations":["1930:5:81"],"nodeType":"IdentifierPath","referencedDeclaration":50173,"src":"1930:5:81"},"referencedDeclaration":50173,"src":"1930:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"visibility":"internal"},{"id":48293,"nodeType":"VariableDeclaration","src":"1956:32:81","nodes":[],"constant":false,"mutability":"mutable","name":"priceContract","nameLocation":"1975:13:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"},"typeName":{"id":48292,"nodeType":"UserDefinedTypeName","pathNode":{"id":48291,"name":"PriceFeed","nameLocations":["1956:9:81"],"nodeType":"IdentifierPath","referencedDeclaration":50060,"src":"1956:9:81"},"referencedDeclaration":50060,"src":"1956:9:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"visibility":"internal"},{"id":48307,"nodeType":"StructDefinition","src":"2074:271:81","nodes":[],"canonicalName":"CollateralSafekeep.vault","documentation":{"id":48294,"nodeType":"StructuredDocumentation","src":"1995:74:81","text":" @notice A struct representing vault details for a user."},"members":[{"constant":false,"id":48296,"mutability":"mutable","name":"vaultId","nameLocation":"2105:7:81","nodeType":"VariableDeclaration","scope":48307,"src":"2097:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48295,"name":"uint256","nodeType":"ElementaryTypeName","src":"2097:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48298,"mutability":"mutable","name":"userAddress","nameLocation":"2130:11:81","nodeType":"VariableDeclaration","scope":48307,"src":"2122:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48297,"name":"address","nodeType":"ElementaryTypeName","src":"2122:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":48300,"mutability":"mutable","name":"balance","nameLocation":"2159:7:81","nodeType":"VariableDeclaration","scope":48307,"src":"2151:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48299,"name":"uint256","nodeType":"ElementaryTypeName","src":"2151:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48302,"mutability":"mutable","name":"balanceInINR","nameLocation":"2194:12:81","nodeType":"VariableDeclaration","scope":48307,"src":"2186:20:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48301,"name":"uint256","nodeType":"ElementaryTypeName","src":"2186:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48304,"mutability":"mutable","name":"rupioIssued","nameLocation":"2234:11:81","nodeType":"VariableDeclaration","scope":48307,"src":"2226:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48303,"name":"uint256","nodeType":"ElementaryTypeName","src":"2226:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48306,"mutability":"mutable","name":"vaultHealth","nameLocation":"2263:11:81","nodeType":"VariableDeclaration","scope":48307,"src":"2255:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48305,"name":"uint256","nodeType":"ElementaryTypeName","src":"2255:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"vault","nameLocation":"2081:5:81","scope":49677,"visibility":"public"},{"id":48312,"nodeType":"VariableDeclaration","src":"2409:27:81","nodes":[],"constant":false,"documentation":{"id":48308,"nodeType":"StructuredDocumentation","src":"2351:53:81","text":" @notice An array of user's vaults."},"mutability":"mutable","name":"userVaults","nameLocation":"2426:10:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault[]"},"typeName":{"baseType":{"id":48310,"nodeType":"UserDefinedTypeName","pathNode":{"id":48309,"name":"vault","nameLocations":["2409:5:81"],"nodeType":"IdentifierPath","referencedDeclaration":48307,"src":"2409:5:81"},"referencedDeclaration":48307,"src":"2409:5:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage_ptr","typeString":"struct CollateralSafekeep.vault"}},"id":48311,"nodeType":"ArrayTypeName","src":"2409:7:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage_ptr","typeString":"struct CollateralSafekeep.vault[]"}},"visibility":"internal"},{"id":48326,"nodeType":"EventDefinition","src":"2443:197:81","nodes":[],"anonymous":false,"eventSelector":"5c0ddc9ba6a3ee218f8b0b2e6583514fb1a2403fc52dd2adb715d5cb41ab1a20","name":"thisIsARiskyVault","nameLocation":"2449:17:81","parameters":{"id":48325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48314,"indexed":false,"mutability":"mutable","name":"vaultId","nameLocation":"2484:7:81","nodeType":"VariableDeclaration","scope":48326,"src":"2476:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2476:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48316,"indexed":false,"mutability":"mutable","name":"userAddress","nameLocation":"2509:11:81","nodeType":"VariableDeclaration","scope":48326,"src":"2501:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48315,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":48318,"indexed":false,"mutability":"mutable","name":"balance","nameLocation":"2538:7:81","nodeType":"VariableDeclaration","scope":48326,"src":"2530:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48317,"name":"uint256","nodeType":"ElementaryTypeName","src":"2530:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48320,"indexed":false,"mutability":"mutable","name":"balanceInINR","nameLocation":"2563:12:81","nodeType":"VariableDeclaration","scope":48326,"src":"2555:20:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48319,"name":"uint256","nodeType":"ElementaryTypeName","src":"2555:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48322,"indexed":false,"mutability":"mutable","name":"rupioIssued","nameLocation":"2593:11:81","nodeType":"VariableDeclaration","scope":48326,"src":"2585:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48321,"name":"uint256","nodeType":"ElementaryTypeName","src":"2585:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48324,"indexed":false,"mutability":"mutable","name":"vaultHealth","nameLocation":"2622:11:81","nodeType":"VariableDeclaration","scope":48326,"src":"2614:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48323,"name":"uint256","nodeType":"ElementaryTypeName","src":"2614:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2466:173:81"}},{"id":48331,"nodeType":"VariableDeclaration","src":"2725:46:81","nodes":[],"constant":false,"documentation":{"id":48327,"nodeType":"StructuredDocumentation","src":"2646:74:81","text":" @notice Mapping of user's address to their vault index."},"functionSelector":"b603540f","mutability":"mutable","name":"userIndexes","nameLocation":"2760:11:81","scope":49677,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":48330,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":48328,"name":"address","nodeType":"ElementaryTypeName","src":"2733:7:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2725:27:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":48329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2744:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":48346,"nodeType":"ModifierDefinition","src":"2835:166:81","nodes":[],"body":{"id":48345,"nodeType":"Block","src":"2855:146:81","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":48335,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"2886:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48338,"indexExpression":{"expression":{"id":48336,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2898:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2902:6:81","memberName":"sender","nodeType":"MemberAccess","src":"2898:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2886:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":48339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2912:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2886:27:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520646f6e7420686176652061205661756c742c206372656174652061207661756c7420666972737421","id":48341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2927:46:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_90f5a9f11efde4f4debdfd5ed23bd53f127dee6c9c7574831112929b82f6f2d0","typeString":"literal_string \"You dont have a Vault, create a vault first!\""},"value":"You dont have a Vault, create a vault first!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_90f5a9f11efde4f4debdfd5ed23bd53f127dee6c9c7574831112929b82f6f2d0","typeString":"literal_string \"You dont have a Vault, create a vault first!\""}],"id":48334,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2865:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2865:118:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48343,"nodeType":"ExpressionStatement","src":"2865:118:81"},{"id":48344,"nodeType":"PlaceholderStatement","src":"2993:1:81"}]},"documentation":{"id":48332,"nodeType":"StructuredDocumentation","src":"2778:52:81","text":" @notice User should have a vault."},"name":"yesVault","nameLocation":"2844:8:81","parameters":{"id":48333,"nodeType":"ParameterList","parameters":[],"src":"2852:2:81"},"virtual":false,"visibility":"internal"},{"id":48361,"nodeType":"ModifierDefinition","src":"3068:112:81","nodes":[],"body":{"id":48360,"nodeType":"Block","src":"3087:93:81","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":48350,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"3105:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48353,"indexExpression":{"expression":{"id":48351,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3117:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3121:6:81","memberName":"sender","nodeType":"MemberAccess","src":"3117:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3105:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":48354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3132:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3105:28:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520616c726561647920686176652061207661756c74","id":48356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3135:26:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_69bc23a1c00096c41284d7b7d02425311837d0429508d8e655ad27fa91a6cc07","typeString":"literal_string \"You already have a vault\""},"value":"You already have a vault"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_69bc23a1c00096c41284d7b7d02425311837d0429508d8e655ad27fa91a6cc07","typeString":"literal_string \"You already have a vault\""}],"id":48349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3097:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3097:65:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48358,"nodeType":"ExpressionStatement","src":"3097:65:81"},{"id":48359,"nodeType":"PlaceholderStatement","src":"3172:1:81"}]},"documentation":{"id":48347,"nodeType":"StructuredDocumentation","src":"3007:56:81","text":" @notice User should not have a vault."},"name":"noVault","nameLocation":"3077:7:81","parameters":{"id":48348,"nodeType":"ParameterList","parameters":[],"src":"3084:2:81"},"virtual":false,"visibility":"internal"},{"id":48376,"nodeType":"ModifierDefinition","src":"3251:173:81","nodes":[],"body":{"id":48375,"nodeType":"Block","src":"3276:148:81","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":48367,"name":"MODERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48272,"src":"3329:14:81","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":48368,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3345:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3349:6:81","memberName":"sender","nodeType":"MemberAccess","src":"3345:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":48365,"name":"accessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48287,"src":"3307:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"id":48366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:81","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":43664,"src":"3307:21:81","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":48370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742068617665204d4f44455241544f525f524f4c45","id":48371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3370:26:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_7190ee48eeeaaecb8743cea50a64a7c58418a36c2f1e9135558b795e93e411aa","typeString":"literal_string \"Must have MODERATOR_ROLE\""},"value":"Must have MODERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7190ee48eeeaaecb8743cea50a64a7c58418a36c2f1e9135558b795e93e411aa","typeString":"literal_string \"Must have MODERATOR_ROLE\""}],"id":48364,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3286:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3286:120:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48373,"nodeType":"ExpressionStatement","src":"3286:120:81"},{"id":48374,"nodeType":"PlaceholderStatement","src":"3416:1:81"}]},"documentation":{"id":48362,"nodeType":"StructuredDocumentation","src":"3186:60:81","text":" @notice Msg.sender should be a moderator."},"name":"onlyModerator","nameLocation":"3260:13:81","parameters":{"id":48363,"nodeType":"ParameterList","parameters":[],"src":"3273:2:81"},"virtual":false,"visibility":"internal"},{"id":48378,"nodeType":"ErrorDefinition","src":"3430:44:81","nodes":[],"errorSelector":"9f59106b","name":"CollateralSafekeep__UpkeepNotNeeded","nameLocation":"3436:35:81","parameters":{"id":48377,"nodeType":"ParameterList","parameters":[],"src":"3471:2:81"}},{"id":48380,"nodeType":"ErrorDefinition","src":"3479:39:81","nodes":[],"errorSelector":"7f8953f7","name":"CollateralSafekeep__UserInDebt","nameLocation":"3485:30:81","parameters":{"id":48379,"nodeType":"ParameterList","parameters":[],"src":"3515:2:81"}},{"id":48382,"nodeType":"ErrorDefinition","src":"3523:59:81","nodes":[],"errorSelector":"599c2d1c","name":"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero","nameLocation":"3529:50:81","parameters":{"id":48381,"nodeType":"ParameterList","parameters":[],"src":"3579:2:81"}},{"id":48459,"nodeType":"FunctionDefinition","src":"4042:910:81","nodes":[],"body":{"id":48458,"nodeType":"Block","src":"4273:679:81","nodes":[],"statements":[{"expression":{"id":48400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48398,"name":"VAULT_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48284,"src":"4283:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":48399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4294:1:81","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4283:12:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48401,"nodeType":"ExpressionStatement","src":"4283:12:81"},{"expression":{"id":48406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48402,"name":"accessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48287,"src":"4305:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":48404,"name":"_accessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48391,"src":"4335:14:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48403,"name":"AccessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48238,"src":"4321:13:81","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessManager_$48238_$","typeString":"type(contract AccessManager)"}},"id":48405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4321:29:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"src":"4305:45:81","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$48238","typeString":"contract AccessManager"}},"id":48407,"nodeType":"ExpressionStatement","src":"4305:45:81"},{"expression":{"id":48412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48408,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48290,"src":"4360:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":48410,"name":"_rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48393,"src":"4374:6:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48409,"name":"Rupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50173,"src":"4368:5:81","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Rupio_$50173_$","typeString":"type(contract Rupio)"}},"id":48411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4368:13:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"src":"4360:21:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":48413,"nodeType":"ExpressionStatement","src":"4360:21:81"},{"expression":{"id":48418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48414,"name":"priceContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48293,"src":"4391:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":48416,"name":"_priceContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48395,"src":"4417:14:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48415,"name":"PriceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50060,"src":"4407:9:81","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PriceFeed_$50060_$","typeString":"type(contract PriceFeed)"}},"id":48417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:25:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"src":"4391:41:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"id":48419,"nodeType":"ExpressionStatement","src":"4391:41:81"},{"expression":{"id":48423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48420,"name":"lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48280,"src":"4442:13:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":48421,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4458:5:81","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":48422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4464:9:81","memberName":"timestamp","nodeType":"MemberAccess","src":"4458:15:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4442:31:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48424,"nodeType":"ExpressionStatement","src":"4442:31:81"},{"expression":{"id":48427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48425,"name":"CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48274,"src":"4524:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":48426,"name":"_CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48385,"src":"4530:4:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4524:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48428,"nodeType":"ExpressionStatement","src":"4524:10:81"},{"expression":{"id":48431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48429,"name":"BASE_RISK_RATE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48276,"src":"4544:14:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":48430,"name":"_BASE_RISK_RATE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48387,"src":"4561:15:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4544:32:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48432,"nodeType":"ExpressionStatement","src":"4544:32:81"},{"expression":{"id":48435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48433,"name":"RISK_PREMIUM_RATE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48278,"src":"4586:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":48434,"name":"_RISK_PREMIUM_RATE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48389,"src":"4606:18:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4586:38:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48436,"nodeType":"ExpressionStatement","src":"4586:38:81"},{"assignments":[48439],"declarations":[{"constant":false,"id":48439,"mutability":"mutable","name":"initialVault","nameLocation":"4704:12:81","nodeType":"VariableDeclaration","scope":48458,"src":"4691:25:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault"},"typeName":{"id":48438,"nodeType":"UserDefinedTypeName","pathNode":{"id":48437,"name":"vault","nameLocations":["4691:5:81"],"nodeType":"IdentifierPath","referencedDeclaration":48307,"src":"4691:5:81"},"referencedDeclaration":48307,"src":"4691:5:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage_ptr","typeString":"struct CollateralSafekeep.vault"}},"visibility":"internal"}],"id":48451,"initialValue":{"arguments":[{"hexValue":"30","id":48441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4752:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":48444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4788:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":48443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4780:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":48442,"name":"address","nodeType":"ElementaryTypeName","src":"4780:7:81","typeDescriptions":{}}},"id":48445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4780:10:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":48446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4813:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":48447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4837:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":48448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4866:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":48449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4894:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":48440,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48307,"src":"4719:5:81","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_vault_$48307_storage_ptr_$","typeString":"type(struct CollateralSafekeep.vault storage pointer)"}},"id":48450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4739:11:81","4767:11:81","4804:7:81","4828:7:81","4852:12:81","4881:11:81"],"names":["rupioIssued","userAddress","vaultId","balance","balanceInINR","vaultHealth"],"nodeType":"FunctionCall","src":"4719:187:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"nodeType":"VariableDeclarationStatement","src":"4691:215:81"},{"expression":{"arguments":[{"id":48455,"name":"initialVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48439,"src":"4932:12:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}],"expression":{"id":48452,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"4916:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4927:4:81","memberName":"push","nodeType":"MemberAccess","src":"4916:15:81","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_vault_$48307_storage_$dyn_storage_ptr_$_t_struct$_vault_$48307_storage_$returns$__$attached_to$_t_array$_t_struct$_vault_$48307_storage_$dyn_storage_ptr_$","typeString":"function (struct CollateralSafekeep.vault storage ref[] storage pointer,struct CollateralSafekeep.vault storage ref)"}},"id":48456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4916:29:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48457,"nodeType":"ExpressionStatement","src":"4916:29:81"}]},"documentation":{"id":48383,"nodeType":"StructuredDocumentation","src":"3588:449:81","text":" @param _CRP Initial collateral to Rupio token percentage (threshold).\n @param _BASE_RISK_RATE Base rate debt on a vault.\n @param _RISK_PREMIUM_RATE Currently only for ethereum, the rate associated with debt in a vault, with increasing time.\n @param _accessManager Address of RupioDao AccessManager.\n @param _rupio Address of Rupio token contract.\n @param _priceContract Address of RupioDao PriceFeed."},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":48396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48385,"mutability":"mutable","name":"_CRP","nameLocation":"4105:4:81","nodeType":"VariableDeclaration","scope":48459,"src":"4097:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48384,"name":"uint256","nodeType":"ElementaryTypeName","src":"4097:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48387,"mutability":"mutable","name":"_BASE_RISK_RATE","nameLocation":"4127:15:81","nodeType":"VariableDeclaration","scope":48459,"src":"4119:23:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48386,"name":"uint256","nodeType":"ElementaryTypeName","src":"4119:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48389,"mutability":"mutable","name":"_RISK_PREMIUM_RATE","nameLocation":"4160:18:81","nodeType":"VariableDeclaration","scope":48459,"src":"4152:26:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4152:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48391,"mutability":"mutable","name":"_accessManager","nameLocation":"4196:14:81","nodeType":"VariableDeclaration","scope":48459,"src":"4188:22:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48390,"name":"address","nodeType":"ElementaryTypeName","src":"4188:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":48393,"mutability":"mutable","name":"_rupio","nameLocation":"4228:6:81","nodeType":"VariableDeclaration","scope":48459,"src":"4220:14:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48392,"name":"address","nodeType":"ElementaryTypeName","src":"4220:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":48395,"mutability":"mutable","name":"_priceContract","nameLocation":"4252:14:81","nodeType":"VariableDeclaration","scope":48459,"src":"4244:22:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48394,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4053:219:81"},"returnParameters":{"id":48397,"nodeType":"ParameterList","parameters":[],"src":"4273:0:81"},"scope":49677,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":48603,"nodeType":"FunctionDefinition","src":"5273:1586:81","nodes":[],"body":{"id":48602,"nodeType":"Block","src":"5345:1514:81","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":48466,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5376:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5380:5:81","memberName":"value","nodeType":"MemberAccess","src":"5376:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":48468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5388:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5376:13:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48470,"name":"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48382,"src":"5403:50:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5403:52:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48465,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5355:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:110:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48473,"nodeType":"ExpressionStatement","src":"5355:110:81"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":48474,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"5526:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48477,"indexExpression":{"expression":{"id":48475,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5538:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5542:6:81","memberName":"sender","nodeType":"MemberAccess","src":"5538:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5526:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":48478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5553:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5526:28:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":48592,"nodeType":"Block","src":"6326:467:81","statements":[{"expression":{"id":48559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48550,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"6390:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48555,"indexExpression":{"baseExpression":{"id":48551,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"6401:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48554,"indexExpression":{"expression":{"id":48552,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6413:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6417:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6413:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6401:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6390:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48556,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6426:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"6390:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":48557,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6437:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6441:5:81","memberName":"value","nodeType":"MemberAccess","src":"6437:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6390:56:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48560,"nodeType":"ExpressionStatement","src":"6390:56:81"},{"expression":{"id":48577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48561,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"6460:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48566,"indexExpression":{"baseExpression":{"id":48562,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"6471:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48565,"indexExpression":{"expression":{"id":48563,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6483:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6487:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6483:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6471:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6460:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6513:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"6460:65:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":48569,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"6564:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48574,"indexExpression":{"baseExpression":{"id":48570,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"6575:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48573,"indexExpression":{"expression":{"id":48571,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6587:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6591:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6587:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6575:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6564:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6600:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"6564:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":48568,"name":"_getAmountETHToINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49460,"src":"6528:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":48576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6528:93:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6460:161:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48578,"nodeType":"ExpressionStatement","src":"6460:161:81"},{"expression":{"id":48590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48579,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"6675:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48584,"indexExpression":{"baseExpression":{"id":48580,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"6686:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48583,"indexExpression":{"expression":{"id":48581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6698:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6702:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6698:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6686:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6675:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48585,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6711:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"6675:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48587,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6758:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6762:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6758:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48586,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"6725:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6725:57:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6675:107:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48591,"nodeType":"ExpressionStatement","src":"6675:107:81"}]},"id":48593,"nodeType":"IfStatement","src":"5522:1271:81","trueBody":{"id":48549,"nodeType":"Block","src":"5556:710:81","statements":[{"assignments":[48482],"declarations":[{"constant":false,"id":48482,"mutability":"mutable","name":"newVault","nameLocation":"5583:8:81","nodeType":"VariableDeclaration","scope":48549,"src":"5570:21:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault"},"typeName":{"id":48481,"nodeType":"UserDefinedTypeName","pathNode":{"id":48480,"name":"vault","nameLocations":["5570:5:81"],"nodeType":"IdentifierPath","referencedDeclaration":48307,"src":"5570:5:81"},"referencedDeclaration":48307,"src":"5570:5:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage_ptr","typeString":"struct CollateralSafekeep.vault"}},"visibility":"internal"}],"id":48483,"nodeType":"VariableDeclarationStatement","src":"5570:21:81"},{"expression":{"id":48489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":48484,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"5605:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"id":48486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5614:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"5605:16:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":48487,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5624:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5628:5:81","memberName":"value","nodeType":"MemberAccess","src":"5624:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5605:28:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48490,"nodeType":"ExpressionStatement","src":"5605:28:81"},{"expression":{"id":48496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":48491,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"5647:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"id":48493,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5656:11:81","memberName":"userAddress","nodeType":"MemberAccess","referencedDeclaration":48298,"src":"5647:20:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":48494,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5670:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5674:6:81","memberName":"sender","nodeType":"MemberAccess","src":"5670:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5647:33:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":48497,"nodeType":"ExpressionStatement","src":"5647:33:81"},{"expression":{"id":48502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":48498,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"5694:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"id":48500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5703:7:81","memberName":"vaultId","nodeType":"MemberAccess","referencedDeclaration":48296,"src":"5694:16:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":48501,"name":"VAULT_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48284,"src":"5713:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5694:27:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48503,"nodeType":"ExpressionStatement","src":"5694:27:81"},{"expression":{"id":48508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":48504,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"5735:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"id":48506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5744:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"5735:20:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":48507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5758:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5735:24:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48509,"nodeType":"ExpressionStatement","src":"5735:24:81"},{"expression":{"id":48519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":48510,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"5814:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"id":48512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5823:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"5814:20:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":48514,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5856:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5860:5:81","memberName":"value","nodeType":"MemberAccess","src":"5856:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":48513,"name":"_getAmountETHToINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49460,"src":"5837:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":48516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5837:29:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":48517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5869:3:81","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"5837:35:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5814:58:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48520,"nodeType":"ExpressionStatement","src":"5814:58:81"},{"expression":{"id":48528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":48521,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"5914:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}},"id":48523,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5923:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"5914:21:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48525,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5957:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5961:5:81","memberName":"value","nodeType":"MemberAccess","src":"5957:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":48524,"name":"_getAmountETHToINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49460,"src":"5938:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":48527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5938:29:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5914:53:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48529,"nodeType":"ExpressionStatement","src":"5914:53:81"},{"expression":{"arguments":[{"id":48533,"name":"newVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48482,"src":"6055:8:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault memory"}],"expression":{"id":48530,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"6039:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6050:4:81","memberName":"push","nodeType":"MemberAccess","src":"6039:15:81","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_vault_$48307_storage_$dyn_storage_ptr_$_t_struct$_vault_$48307_storage_$returns$__$attached_to$_t_array$_t_struct$_vault_$48307_storage_$dyn_storage_ptr_$","typeString":"function (struct CollateralSafekeep.vault storage ref[] storage pointer,struct CollateralSafekeep.vault storage ref)"}},"id":48534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6039:25:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48535,"nodeType":"ExpressionStatement","src":"6039:25:81"},{"expression":{"id":48541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":48536,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"6135:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48539,"indexExpression":{"expression":{"id":48537,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6147:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6151:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6147:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6135:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":48540,"name":"VAULT_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48284,"src":"6161:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6135:34:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48542,"nodeType":"ExpressionStatement","src":"6135:34:81"},{"expression":{"id":48547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":48543,"name":"VAULT_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48284,"src":"6232:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48544,"name":"VAULT_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48284,"src":"6243:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":48545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:81","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6243:12:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6232:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48548,"nodeType":"ExpressionStatement","src":"6232:23:81"}]}},{"expression":{"expression":{"baseExpression":{"id":48594,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"6809:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48599,"indexExpression":{"baseExpression":{"id":48595,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"6820:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48598,"indexExpression":{"expression":{"id":48596,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6832:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6836:6:81","memberName":"sender","nodeType":"MemberAccess","src":"6832:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6820:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6809:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48600,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6845:7:81","memberName":"vaultId","nodeType":"MemberAccess","referencedDeclaration":48296,"src":"6809:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":48464,"id":48601,"nodeType":"Return","src":"6802:50:81"}]},"documentation":{"id":48460,"nodeType":"StructuredDocumentation","src":"4958:310:81","text":" @notice Create a new vault or add funds in an existing vault.\n @notice Public function.\n @notice User needs to send a msg.value with the functions, in ETH currently.\n @dev Msg.value must be in native decimals, in this case 1e18.\n @return vaultId Vault id of the user."},"functionSelector":"bb828132","implemented":true,"kind":"function","modifiers":[],"name":"createOrUpdateVault","nameLocation":"5282:19:81","parameters":{"id":48461,"nodeType":"ParameterList","parameters":[],"src":"5301:2:81"},"returnParameters":{"id":48464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48463,"mutability":"mutable","name":"vaultId","nameLocation":"5336:7:81","nodeType":"VariableDeclaration","scope":48603,"src":"5328:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48462,"name":"uint256","nodeType":"ElementaryTypeName","src":"5328:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5327:17:81"},"scope":49677,"stateMutability":"payable","virtual":false,"visibility":"public"},{"id":48696,"nodeType":"FunctionDefinition","src":"7421:1079:81","nodes":[],"body":{"id":48695,"nodeType":"Block","src":"7515:985:81","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48614,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48606,"src":"7546:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":48615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7555:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7546:10:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48617,"name":"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48382,"src":"7570:50:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7570:52:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48613,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7525:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7525:107:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48620,"nodeType":"ExpressionStatement","src":"7525:107:81"},{"expression":{"id":48632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48621,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"7679:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48626,"indexExpression":{"baseExpression":{"id":48622,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"7690:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48625,"indexExpression":{"expression":{"id":48623,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7702:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7706:6:81","memberName":"sender","nodeType":"MemberAccess","src":"7702:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7690:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7679:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7715:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"7679:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48629,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7758:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7762:6:81","memberName":"sender","nodeType":"MemberAccess","src":"7758:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48628,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"7729:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7729:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48633,"nodeType":"ExpressionStatement","src":"7679:99:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":48635,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"7809:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48640,"indexExpression":{"baseExpression":{"id":48636,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"7820:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48639,"indexExpression":{"expression":{"id":48637,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7832:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7836:6:81","memberName":"sender","nodeType":"MemberAccess","src":"7832:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7820:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7809:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48641,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7845:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"7809:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":48642,"name":"CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48274,"src":"7859:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7809:53:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48644,"name":"CollateralSafekeep__UserInDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48380,"src":"7876:30:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7876:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48634,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7788:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7788:130:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48647,"nodeType":"ExpressionStatement","src":"7788:130:81"},{"assignments":[48649],"declarations":[{"constant":false,"id":48649,"mutability":"mutable","name":"max","nameLocation":"8035:3:81","nodeType":"VariableDeclaration","scope":48695,"src":"8027:11:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48648,"name":"uint256","nodeType":"ElementaryTypeName","src":"8027:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":48654,"initialValue":{"arguments":[{"expression":{"id":48651,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8062:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8066:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8062:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48650,"name":"_getMaxMintableRupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49567,"src":"8041:20:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8041:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8027:46:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48656,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48606,"src":"8091:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":48657,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48649,"src":"8100:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8091:12:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"656e74657220616d6f756e74206c657373207468616e204352502063726f7373","id":48659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8105:34:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_6daec76bd21d2211691dacdb24e7208d6aa3b221e44b64998a41a74305ad75bd","typeString":"literal_string \"enter amount less than CRP cross\""},"value":"enter amount less than CRP cross"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6daec76bd21d2211691dacdb24e7208d6aa3b221e44b64998a41a74305ad75bd","typeString":"literal_string \"enter amount less than CRP cross\""}],"id":48655,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8083:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8083:57:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48661,"nodeType":"ExpressionStatement","src":"8083:57:81"},{"expression":{"arguments":[{"expression":{"id":48665,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8202:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8206:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8202:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":48667,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48606,"src":"8214:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":48662,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48290,"src":"8191:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":48664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8197:4:81","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":50145,"src":"8191:10:81","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":48668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8191:30:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48669,"nodeType":"ExpressionStatement","src":"8191:30:81"},{"expression":{"id":48678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48670,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"8307:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48675,"indexExpression":{"baseExpression":{"id":48671,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"8318:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48674,"indexExpression":{"expression":{"id":48672,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8330:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8334:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8330:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8318:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8307:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8343:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"8307:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":48677,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48606,"src":"8358:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8307:57:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48679,"nodeType":"ExpressionStatement","src":"8307:57:81"},{"expression":{"id":48691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48680,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"8374:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48685,"indexExpression":{"baseExpression":{"id":48681,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"8385:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48684,"indexExpression":{"expression":{"id":48682,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8397:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8401:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8397:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8385:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8374:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8410:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"8374:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48688,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8453:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8457:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8453:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48687,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"8424:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8424:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8374:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48692,"nodeType":"ExpressionStatement","src":"8374:99:81"},{"expression":{"id":48693,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48649,"src":"8490:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":48612,"id":48694,"nodeType":"Return","src":"8483:10:81"}]},"documentation":{"id":48604,"nodeType":"StructuredDocumentation","src":"6865:551:81","text":" @notice Mint rupio based on collateral provided.\n @notice MINTS ON HOME-CHAIN CURRENTLY BASE SEPOLIA.\n @notice Public function.\n @notice User needs to have a vault first.\n @notice One rupio is issued for every ruppee of collateral(in ETH, converted to INR).\n @notice User cannot mint if vault health is lower than 150 percent of CRP.\n @param amount Amount of rupio to be minted, in no decimals, example 50, should be less than CRP cross.\n @return max Max amount of rupio that can be minted."},"functionSelector":"515d22ce","implemented":true,"kind":"function","modifiers":[{"id":48609,"kind":"modifierInvocation","modifierName":{"id":48608,"name":"yesVault","nameLocations":["7488:8:81"],"nodeType":"IdentifierPath","referencedDeclaration":48346,"src":"7488:8:81"},"nodeType":"ModifierInvocation","src":"7488:8:81"}],"name":"mintRupioOnHomeChain","nameLocation":"7430:20:81","parameters":{"id":48607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48606,"mutability":"mutable","name":"amount","nameLocation":"7468:6:81","nodeType":"VariableDeclaration","scope":48696,"src":"7460:14:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48605,"name":"uint256","nodeType":"ElementaryTypeName","src":"7460:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7450:30:81"},"returnParameters":{"id":48612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48696,"src":"7506:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48610,"name":"uint256","nodeType":"ElementaryTypeName","src":"7506:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7505:9:81"},"scope":49677,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":48849,"nodeType":"FunctionDefinition","src":"8506:1770:81","nodes":[],"body":{"id":48848,"nodeType":"Block","src":"8620:1656:81","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48706,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48698,"src":"8651:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":48707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8660:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8651:10:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48709,"name":"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48382,"src":"8675:50:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8675:52:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48705,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8630:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8630:107:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48712,"nodeType":"ExpressionStatement","src":"8630:107:81"},{"expression":{"id":48724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48713,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"8784:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48718,"indexExpression":{"baseExpression":{"id":48714,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"8795:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48717,"indexExpression":{"expression":{"id":48715,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8807:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8811:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8807:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8795:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8784:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8820:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"8784:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48721,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8863:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8867:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8863:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48720,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"8834:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8834:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8784:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48725,"nodeType":"ExpressionStatement","src":"8784:99:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":48727,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"8914:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48732,"indexExpression":{"baseExpression":{"id":48728,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"8925:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48731,"indexExpression":{"expression":{"id":48729,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8937:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8941:6:81","memberName":"sender","nodeType":"MemberAccess","src":"8937:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8925:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8914:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8950:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"8914:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":48734,"name":"CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48274,"src":"8964:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8914:53:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48736,"name":"CollateralSafekeep__UserInDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48380,"src":"8981:30:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8981:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48726,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8893:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8893:130:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48739,"nodeType":"ExpressionStatement","src":"8893:130:81"},{"assignments":[48741],"declarations":[{"constant":false,"id":48741,"mutability":"mutable","name":"max","nameLocation":"9140:3:81","nodeType":"VariableDeclaration","scope":48848,"src":"9132:11:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48740,"name":"uint256","nodeType":"ElementaryTypeName","src":"9132:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":48746,"initialValue":{"arguments":[{"expression":{"id":48743,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9167:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9171:6:81","memberName":"sender","nodeType":"MemberAccess","src":"9167:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48742,"name":"_getMaxMintableRupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49567,"src":"9146:20:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9146:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9132:46:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48748,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48698,"src":"9196:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":48749,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48741,"src":"9205:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9196:12:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"656e74657220616d6f756e74206c657373207468616e204352502063726f7373","id":48751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9210:34:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_6daec76bd21d2211691dacdb24e7208d6aa3b221e44b64998a41a74305ad75bd","typeString":"literal_string \"enter amount less than CRP cross\""},"value":"enter amount less than CRP cross"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6daec76bd21d2211691dacdb24e7208d6aa3b221e44b64998a41a74305ad75bd","typeString":"literal_string \"enter amount less than CRP cross\""}],"id":48747,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9188:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9188:57:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48753,"nodeType":"ExpressionStatement","src":"9188:57:81"},{"assignments":[48755],"declarations":[{"constant":false,"id":48755,"mutability":"mutable","name":"_extraOptions","nameLocation":"9300:13:81","nodeType":"VariableDeclaration","scope":48848,"src":"9287:26:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":48754,"name":"bytes","nodeType":"ElementaryTypeName","src":"9287:5:81","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":48763,"initialValue":{"arguments":[{"hexValue":"3635303030","id":48760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9397:5:81","typeDescriptions":{"typeIdentifier":"t_rational_65000_by_1","typeString":"int_const 65000"},"value":"65000"},{"hexValue":"30","id":48761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9404:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65000_by_1","typeString":"int_const 65000"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":48756,"name":"OptionsBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49995,"src":"9316:14:81","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OptionsBuilder_$49995_$","typeString":"type(library OptionsBuilder)"}},"id":48757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9344:10:81","memberName":"newOptions","nodeType":"MemberAccess","referencedDeclaration":49744,"src":"9316:38:81","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":48758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9316:40:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":48759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9370:26:81","memberName":"addExecutorLzReceiveOption","nodeType":"MemberAccess","referencedDeclaration":49775,"src":"9316:80:81","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint128_$_t_uint128_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint128,uint128) pure returns (bytes memory)"}},"id":48762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9316:90:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9287:119:81"},{"assignments":[48766],"declarations":[{"constant":false,"id":48766,"mutability":"mutable","name":"sendParam","nameLocation":"9433:9:81","nodeType":"VariableDeclaration","scope":48848,"src":"9416:26:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam"},"typeName":{"id":48765,"nodeType":"UserDefinedTypeName","pathNode":{"id":48764,"name":"SendParam","nameLocations":["9416:9:81"],"nodeType":"IdentifierPath","referencedDeclaration":2481,"src":"9416:9:81"},"referencedDeclaration":2481,"src":"9416:9:81","typeDescriptions":{"typeIdentifier":"t_struct$_SendParam_$2481_storage_ptr","typeString":"struct SendParam"}},"visibility":"internal"}],"id":48784,"initialValue":{"arguments":[{"id":48768,"name":"chainEid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48700,"src":"9468:8:81","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"expression":{"id":48770,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9551:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9555:6:81","memberName":"sender","nodeType":"MemberAccess","src":"9551:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48769,"name":"addressToBytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49676,"src":"9534:16:81","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":48772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9534:28:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":48773,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48698,"src":"9576:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48774,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48698,"src":"9597:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"39","id":48775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9606:1:81","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"9597:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":48777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9596:12:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":48778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9611:2:81","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"9596:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":48780,"name":"_extraOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48755,"src":"9627:13:81","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"","id":48781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9654:2:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":48782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9670:2:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":48767,"name":"SendParam","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"9445:9:81","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_SendParam_$2481_storage_ptr_$","typeString":"type(struct SendParam storage pointer)"}},"id":48783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9445:237:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam memory"}},"nodeType":"VariableDeclarationStatement","src":"9416:266:81"},{"assignments":[48787],"declarations":[{"constant":false,"id":48787,"mutability":"mutable","name":"fee","nameLocation":"9733:3:81","nodeType":"VariableDeclaration","scope":48848,"src":"9713:23:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":48786,"nodeType":"UserDefinedTypeName","pathNode":{"id":48785,"name":"MessagingFee","nameLocations":["9713:12:81"],"nodeType":"IdentifierPath","referencedDeclaration":41791,"src":"9713:12:81"},"referencedDeclaration":41791,"src":"9713:12:81","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$41791_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"id":48793,"initialValue":{"arguments":[{"id":48790,"name":"sendParam","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48766,"src":"9755:9:81","typeDescriptions":{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam memory"}},{"hexValue":"66616c7365","id":48791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9766:5:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":48788,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48290,"src":"9739:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":48789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9745:9:81","memberName":"quoteSend","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"9739:15:81","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_SendParam_$2481_memory_ptr_$_t_bool_$returns$_t_struct$_MessagingFee_$41791_memory_ptr_$","typeString":"function (struct SendParam memory,bool) view external returns (struct MessagingFee memory)"}},"id":48792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9739:33:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee memory"}},"nodeType":"VariableDeclarationStatement","src":"9713:59:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":48795,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9790:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9794:5:81","memberName":"value","nodeType":"MemberAccess","src":"9790:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":48797,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48787,"src":"9803:3:81","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee memory"}},"id":48798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9807:9:81","memberName":"nativeFee","nodeType":"MemberAccess","referencedDeclaration":41788,"src":"9803:13:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9790:26:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e742066756e6473","id":48800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9818:20:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6bc4f5b747fbbc581777f92b42c6eac56dbbb4e624c68b8c1a6001ff2001fc5","typeString":"literal_string \"insufficient funds\""},"value":"insufficient funds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6bc4f5b747fbbc581777f92b42c6eac56dbbb4e624c68b8c1a6001ff2001fc5","typeString":"literal_string \"insufficient funds\""}],"id":48794,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9782:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9782:57:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48802,"nodeType":"ExpressionStatement","src":"9782:57:81"},{"expression":{"arguments":[{"arguments":[{"id":48808,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9868:4:81","typeDescriptions":{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CollateralSafekeep_$49677","typeString":"contract CollateralSafekeep"}],"id":48807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9860:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":48806,"name":"address","nodeType":"ElementaryTypeName","src":"9860:7:81","typeDescriptions":{}}},"id":48809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9860:13:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":48810,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48698,"src":"9875:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":48803,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48290,"src":"9849:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":48805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9855:4:81","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":50145,"src":"9849:10:81","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":48811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9849:33:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48812,"nodeType":"ExpressionStatement","src":"9849:33:81"},{"expression":{"arguments":[{"id":48819,"name":"sendParam","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48766,"src":"9991:9:81","typeDescriptions":{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam memory"}},{"id":48820,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48787,"src":"10002:3:81","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee memory"}},{"expression":{"id":48821,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10007:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10011:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10007:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam memory"},{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SendParam_$2481_memory_ptr","typeString":"struct SendParam memory"},{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":48813,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48290,"src":"9958:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":48815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9964:4:81","memberName":"send","nodeType":"MemberAccess","referencedDeclaration":2094,"src":"9958:10:81","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_SendParam_$2481_memory_ptr_$_t_struct$_MessagingFee_$41791_memory_ptr_$_t_address_$returns$_t_struct$_MessagingReceipt_$41786_memory_ptr_$_t_struct$_OFTReceipt_$2493_memory_ptr_$","typeString":"function (struct SendParam memory,struct MessagingFee memory,address) payable external returns (struct MessagingReceipt memory,struct OFTReceipt memory)"}},"id":48818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":48816,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48787,"src":"9976:3:81","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$41791_memory_ptr","typeString":"struct MessagingFee memory"}},"id":48817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9980:9:81","memberName":"nativeFee","nodeType":"MemberAccess","referencedDeclaration":41788,"src":"9976:13:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"9958:32:81","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_SendParam_$2481_memory_ptr_$_t_struct$_MessagingFee_$41791_memory_ptr_$_t_address_$returns$_t_struct$_MessagingReceipt_$41786_memory_ptr_$_t_struct$_OFTReceipt_$2493_memory_ptr_$value","typeString":"function (struct SendParam memory,struct MessagingFee memory,address) payable external returns (struct MessagingReceipt memory,struct OFTReceipt memory)"}},"id":48823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9958:60:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_MessagingReceipt_$41786_memory_ptr_$_t_struct$_OFTReceipt_$2493_memory_ptr_$","typeString":"tuple(struct MessagingReceipt memory,struct OFTReceipt memory)"}},"id":48824,"nodeType":"ExpressionStatement","src":"9958:60:81"},{"expression":{"id":48833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48825,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"10103:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48830,"indexExpression":{"baseExpression":{"id":48826,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"10114:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48829,"indexExpression":{"expression":{"id":48827,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10126:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10130:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10126:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10114:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10103:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48831,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10139:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"10103:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":48832,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48698,"src":"10154:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:57:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48834,"nodeType":"ExpressionStatement","src":"10103:57:81"},{"expression":{"id":48846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48835,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"10170:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48840,"indexExpression":{"baseExpression":{"id":48836,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"10181:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48839,"indexExpression":{"expression":{"id":48837,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10193:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10197:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10193:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10181:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10170:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48841,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10206:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"10170:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48843,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10249:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10253:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10249:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48842,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"10220:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10220:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10170:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48847,"nodeType":"ExpressionStatement","src":"10170:99:81"}]},"functionSelector":"2a8ffe80","implemented":true,"kind":"function","modifiers":[{"id":48703,"kind":"modifierInvocation","modifierName":{"id":48702,"name":"yesVault","nameLocations":["8611:8:81"],"nodeType":"IdentifierPath","referencedDeclaration":48346,"src":"8611:8:81"},"nodeType":"ModifierInvocation","src":"8611:8:81"}],"name":"mintRupioOnDifferentChain","nameLocation":"8515:25:81","parameters":{"id":48701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48698,"mutability":"mutable","name":"amount","nameLocation":"8558:6:81","nodeType":"VariableDeclaration","scope":48849,"src":"8550:14:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48697,"name":"uint256","nodeType":"ElementaryTypeName","src":"8550:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48700,"mutability":"mutable","name":"chainEid","nameLocation":"8581:8:81","nodeType":"VariableDeclaration","scope":48849,"src":"8574:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":48699,"name":"uint32","nodeType":"ElementaryTypeName","src":"8574:6:81","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8540:55:81"},"returnParameters":{"id":48704,"nodeType":"ParameterList","parameters":[],"src":"8620:0:81"},"scope":49677,"stateMutability":"payable","virtual":false,"visibility":"public"},{"id":48971,"nodeType":"FunctionDefinition","src":"10481:1338:81","nodes":[],"body":{"id":48970,"nodeType":"Block","src":"10548:1271:81","nodes":[],"statements":[{"expression":{"id":48868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48857,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"10595:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48862,"indexExpression":{"baseExpression":{"id":48858,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"10606:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48861,"indexExpression":{"expression":{"id":48859,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10618:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10622:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10618:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10606:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10595:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48863,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10631:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"10595:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48865,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10674:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10678:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10674:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48864,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"10645:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10645:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10595:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48869,"nodeType":"ExpressionStatement","src":"10595:99:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48871,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48852,"src":"10725:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":48872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10734:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10725:10:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48874,"name":"CollateralSafeKeep__ETHAmountMustBeGreaterThanZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48382,"src":"10749:50:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10749:52:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48870,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10704:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10704:107:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48877,"nodeType":"ExpressionStatement","src":"10704:107:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":48879,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"10842:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48884,"indexExpression":{"baseExpression":{"id":48880,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"10853:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48883,"indexExpression":{"expression":{"id":48881,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10865:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10869:6:81","memberName":"sender","nodeType":"MemberAccess","src":"10865:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10853:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10842:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48885,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10878:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"10842:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":48886,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48852,"src":"10889:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10842:53:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e742062616c616e636520696e207661756c74","id":48888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10909:31:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_37c6d22fadf600a4ca247bb951cbc467dc05c0678fb25a4f9fca6232c768aebf","typeString":"literal_string \"insufficient balance in vault\""},"value":"insufficient balance in vault"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_37c6d22fadf600a4ca247bb951cbc467dc05c0678fb25a4f9fca6232c768aebf","typeString":"literal_string \"insufficient balance in vault\""}],"id":48878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10821:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10821:129:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48890,"nodeType":"ExpressionStatement","src":"10821:129:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":48892,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"10981:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48897,"indexExpression":{"baseExpression":{"id":48893,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"10992:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48896,"indexExpression":{"expression":{"id":48894,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11004:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11008:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11004:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10992:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10981:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48898,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11017:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"10981:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"313530","id":48899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11031:3:81","typeDescriptions":{"typeIdentifier":"t_rational_150_by_1","typeString":"int_const 150"},"value":"150"},"src":"10981:53:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48901,"name":"CollateralSafekeep__UserInDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48380,"src":"11048:30:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48891,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10960:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10960:130:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48904,"nodeType":"ExpressionStatement","src":"10960:130:81"},{"assignments":[48906],"declarations":[{"constant":false,"id":48906,"mutability":"mutable","name":"max","nameLocation":"11193:3:81","nodeType":"VariableDeclaration","scope":48970,"src":"11185:11:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48905,"name":"uint256","nodeType":"ElementaryTypeName","src":"11185:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":48911,"initialValue":{"arguments":[{"expression":{"id":48908,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11229:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11233:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11229:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48907,"name":"_getMaxWithdrawableCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49656,"src":"11199:29:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11199:41:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11185:55:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":48913,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48852,"src":"11258:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":48914,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48906,"src":"11268:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11258:13:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":48916,"name":"CollateralSafekeep__UserInDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48380,"src":"11273:30:81","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":48917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11273:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":48912,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11250:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":48918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11250:56:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48919,"nodeType":"ExpressionStatement","src":"11250:56:81"},{"expression":{"arguments":[{"id":48926,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48852,"src":"11408:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":48922,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11387:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11391:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11387:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11379:8:81","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":48920,"name":"address","nodeType":"ElementaryTypeName","src":"11379:8:81","stateMutability":"payable","typeDescriptions":{}}},"id":48924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11379:19:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":48925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11399:8:81","memberName":"transfer","nodeType":"MemberAccess","src":"11379:28:81","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":48927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11379:36:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48928,"nodeType":"ExpressionStatement","src":"11379:36:81"},{"expression":{"id":48937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48929,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"11504:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48934,"indexExpression":{"baseExpression":{"id":48930,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"11515:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48933,"indexExpression":{"expression":{"id":48931,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11527:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11531:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11527:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11515:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11504:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48935,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11540:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"11504:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":48936,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48852,"src":"11551:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11504:53:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48938,"nodeType":"ExpressionStatement","src":"11504:53:81"},{"expression":{"id":48955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48939,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"11567:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48944,"indexExpression":{"baseExpression":{"id":48940,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"11578:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48943,"indexExpression":{"expression":{"id":48941,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11590:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11594:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11590:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11578:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11567:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48945,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11603:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"11567:48:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":48947,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"11650:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48952,"indexExpression":{"baseExpression":{"id":48948,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"11661:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48951,"indexExpression":{"expression":{"id":48949,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11673:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11677:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11673:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11661:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11650:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11686:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"11650:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":48946,"name":"_getAmountETHToINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49460,"src":"11618:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":48954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11618:85:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11567:136:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48956,"nodeType":"ExpressionStatement","src":"11567:136:81"},{"expression":{"id":48968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48957,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"11713:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48962,"indexExpression":{"baseExpression":{"id":48958,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"11724:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48961,"indexExpression":{"expression":{"id":48959,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11736:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11740:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11736:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11724:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11713:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48963,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11749:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"11713:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48965,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11792:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11796:6:81","memberName":"sender","nodeType":"MemberAccess","src":"11792:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48964,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"11763:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11763:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11713:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48969,"nodeType":"ExpressionStatement","src":"11713:99:81"}]},"documentation":{"id":48850,"nodeType":"StructuredDocumentation","src":"10282:194:81","text":" @notice User can withdraw if any excess collateral than 150 percent of rupio issued.\n @notice Public function.\n @param amount Amount of ETH to withdraw from vault."},"functionSelector":"076d0815","implemented":true,"kind":"function","modifiers":[{"id":48855,"kind":"modifierInvocation","modifierName":{"id":48854,"name":"yesVault","nameLocations":["10539:8:81"],"nodeType":"IdentifierPath","referencedDeclaration":48346,"src":"10539:8:81"},"nodeType":"ModifierInvocation","src":"10539:8:81"}],"name":"withdrawFromVault","nameLocation":"10490:17:81","parameters":{"id":48853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48852,"mutability":"mutable","name":"amount","nameLocation":"10516:6:81","nodeType":"VariableDeclaration","scope":48971,"src":"10508:14:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48851,"name":"uint256","nodeType":"ElementaryTypeName","src":"10508:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10507:16:81"},"returnParameters":{"id":48856,"nodeType":"ParameterList","parameters":[],"src":"10548:0:81"},"scope":49677,"stateMutability":"payable","virtual":false,"visibility":"public"},{"id":49050,"nodeType":"FunctionDefinition","src":"12036:837:81","nodes":[],"body":{"id":49049,"nodeType":"Block","src":"12107:766:81","nodes":[],"statements":[{"expression":{"id":48990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":48979,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"12154:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48984,"indexExpression":{"baseExpression":{"id":48980,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"12165:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48983,"indexExpression":{"expression":{"id":48981,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12177:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12181:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12177:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12165:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12154:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48985,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12190:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"12154:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":48987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12233:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12237:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12233:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":48986,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"12204:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":48989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12204:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12154:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":48991,"nodeType":"ExpressionStatement","src":"12154:99:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":48993,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"12284:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":48998,"indexExpression":{"baseExpression":{"id":48994,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"12295:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":48997,"indexExpression":{"expression":{"id":48995,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12307:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12311:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12307:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12295:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12284:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":48999,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12320:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"12284:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":49000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12334:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12284:51:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20727570696f20697373756564207965742e","id":49002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12349:22:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_96c44b7aaa91ae2955328e8aa3bbf492aa7399d845c65b6641669888e80e8493","typeString":"literal_string \"No rupio issued yet.\""},"value":"No rupio issued yet."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_96c44b7aaa91ae2955328e8aa3bbf492aa7399d845c65b6641669888e80e8493","typeString":"literal_string \"No rupio issued yet.\""}],"id":48992,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12263:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":49003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12263:118:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49004,"nodeType":"ExpressionStatement","src":"12263:118:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":49006,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"12412:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49011,"indexExpression":{"baseExpression":{"id":49007,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"12423:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49010,"indexExpression":{"expression":{"id":49008,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12435:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12439:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12435:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12423:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12412:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49012,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12448:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"12412:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":49013,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48974,"src":"12463:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12412:57:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c65737320616d6f756e74206f6620727570696f20697373756564","id":49015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12483:29:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_97adc810ea3ce48f288c51a6063ce0dd6835d2670ed0de5c038cb01642b03d4f","typeString":"literal_string \"Less amount of rupio issued\""},"value":"Less amount of rupio issued"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_97adc810ea3ce48f288c51a6063ce0dd6835d2670ed0de5c038cb01642b03d4f","typeString":"literal_string \"Less amount of rupio issued\""}],"id":49005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12391:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":49016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:131:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49017,"nodeType":"ExpressionStatement","src":"12391:131:81"},{"expression":{"arguments":[{"expression":{"id":49021,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12595:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12599:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12595:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":49023,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48974,"src":"12607:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":49018,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48290,"src":"12580:5:81","typeDescriptions":{"typeIdentifier":"t_contract$_Rupio_$50173","typeString":"contract Rupio"}},"id":49020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12586:8:81","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":50163,"src":"12580:14:81","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":49024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12580:34:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49025,"nodeType":"ExpressionStatement","src":"12580:34:81"},{"expression":{"id":49034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":49026,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"12700:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49031,"indexExpression":{"baseExpression":{"id":49027,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"12711:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49030,"indexExpression":{"expression":{"id":49028,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12723:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12727:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12723:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12711:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12700:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12736:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"12700:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":49033,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48974,"src":"12751:6:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12700:57:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":49035,"nodeType":"ExpressionStatement","src":"12700:57:81"},{"expression":{"id":49047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":49036,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"12767:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49041,"indexExpression":{"baseExpression":{"id":49037,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"12778:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49040,"indexExpression":{"expression":{"id":49038,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12790:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12794:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12790:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12778:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12767:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49042,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12803:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"12767:47:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":49044,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12846:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12850:6:81","memberName":"sender","nodeType":"MemberAccess","src":"12846:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49043,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"12817:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12817:49:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12767:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":49048,"nodeType":"ExpressionStatement","src":"12767:99:81"}]},"documentation":{"id":48972,"nodeType":"StructuredDocumentation","src":"11825:206:81","text":" @notice Burn Rupio and relieve collateral in ETH from the vault.\n @notice Public function.\n @notice User must have a vault first.\n @param amount Amount of rupio to burn."},"functionSelector":"188afb74","implemented":true,"kind":"function","modifiers":[{"id":48977,"kind":"modifierInvocation","modifierName":{"id":48976,"name":"yesVault","nameLocations":["12098:8:81"],"nodeType":"IdentifierPath","referencedDeclaration":48346,"src":"12098:8:81"},"nodeType":"ModifierInvocation","src":"12098:8:81"}],"name":"burnRupioAndRelieveCollateral","nameLocation":"12045:29:81","parameters":{"id":48975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48974,"mutability":"mutable","name":"amount","nameLocation":"12083:6:81","nodeType":"VariableDeclaration","scope":49050,"src":"12075:14:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48973,"name":"uint256","nodeType":"ElementaryTypeName","src":"12075:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12074:16:81"},"returnParameters":{"id":48978,"nodeType":"ParameterList","parameters":[],"src":"12107:0:81"},"scope":49677,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":49066,"nodeType":"FunctionDefinition","src":"13121:222:81","nodes":[],"body":{"id":49065,"nodeType":"Block","src":"13307:36:81","nodes":[],"statements":[{"expression":{"id":49063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":49061,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49057,"src":"13317:12:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":49062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13332:4:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13317:19:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49064,"nodeType":"ExpressionStatement","src":"13317:19:81"}]},"baseFunctions":[60],"documentation":{"id":49051,"nodeType":"StructuredDocumentation","src":"12879:237:81","text":" @notice Chainlink automation function to check if the conditions are met to perform upkeep.\n @notice Public function.\n @return upkeepNeeded Bool indicating if upkeep is needed, based on specific conditions."},"functionSelector":"6e04ff0d","implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"13130:11:81","overrides":{"id":49055,"nodeType":"OverrideSpecifier","overrides":[],"src":"13226:8:81"},"parameters":{"id":49054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49066,"src":"13151:14:81","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":49052,"name":"bytes","nodeType":"ElementaryTypeName","src":"13151:5:81","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13141:46:81"},"returnParameters":{"id":49060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49057,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"13257:12:81","nodeType":"VariableDeclaration","scope":49066,"src":"13252:17:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":49056,"name":"bool","nodeType":"ElementaryTypeName","src":"13252:4:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":49059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49066,"src":"13271:12:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":49058,"name":"bytes","nodeType":"ElementaryTypeName","src":"13271:5:81","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13251:51:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":49077,"nodeType":"FunctionDefinition","src":"13666:104:81","nodes":[],"body":{"id":49076,"nodeType":"Block","src":"13741:29:81","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":49073,"name":"scanVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49168,"src":"13751:10:81","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":49074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13751:12:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49075,"nodeType":"ExpressionStatement","src":"13751:12:81"}]},"baseFunctions":[66],"documentation":{"id":49067,"nodeType":"StructuredDocumentation","src":"13349:312:81","text":" @notice Chainlink automation function to perform upkeep.\n @notice Public function.\n @dev In this case, it is scanning all the vaults in database and updating vault health for them.\n @dev Needed because we cannot tranditionally loop over all the vaults to update vault health."},"functionSelector":"4585e33b","implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"13675:13:81","overrides":{"id":49071,"nodeType":"OverrideSpecifier","overrides":[],"src":"13732:8:81"},"parameters":{"id":49070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49069,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49077,"src":"13689:14:81","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":49068,"name":"bytes","nodeType":"ElementaryTypeName","src":"13689:5:81","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13688:34:81"},"returnParameters":{"id":49072,"nodeType":"ParameterList","parameters":[],"src":"13741:0:81"},"scope":49677,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":49168,"nodeType":"FunctionDefinition","src":"14133:1036:81","nodes":[],"body":{"id":49167,"nodeType":"Block","src":"14162:1007:81","nodes":[],"statements":[{"assignments":[49082],"declarations":[{"constant":false,"id":49082,"mutability":"mutable","name":"userVaultArrayLength","nameLocation":"14219:20:81","nodeType":"VariableDeclaration","scope":49167,"src":"14211:28:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49081,"name":"uint256","nodeType":"ElementaryTypeName","src":"14211:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49085,"initialValue":{"expression":{"id":49083,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14242:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14253:6:81","memberName":"length","nodeType":"MemberAccess","src":"14242:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14211:48:81"},{"body":{"id":49165,"nodeType":"Block","src":"14388:775:81","statements":[{"expression":{"id":49106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":49096,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14402:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49098,"indexExpression":{"id":49097,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14413:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14402:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14416:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"14402:26:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":49101,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14468:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49103,"indexExpression":{"id":49102,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14479:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14468:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49104,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14482:11:81","memberName":"userAddress","nodeType":"MemberAccess","referencedDeclaration":48298,"src":"14468:25:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49100,"name":"getUserBalanceInINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49301,"src":"14431:19:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14431:76:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14402:105:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":49107,"nodeType":"ExpressionStatement","src":"14402:105:81"},{"expression":{"id":49118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":49108,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14521:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49110,"indexExpression":{"id":49109,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14532:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14521:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14535:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"14521:25:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":49113,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14581:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49115,"indexExpression":{"id":49114,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14592:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14581:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14595:11:81","memberName":"userAddress","nodeType":"MemberAccess","referencedDeclaration":48298,"src":"14581:25:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49112,"name":"getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49234,"src":"14549:14:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14549:71:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14521:99:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":49119,"nodeType":"ExpressionStatement","src":"14521:99:81"},{"assignments":[49121],"declarations":[{"constant":false,"id":49121,"mutability":"mutable","name":"yesOrNo","nameLocation":"14639:7:81","nodeType":"VariableDeclaration","scope":49165,"src":"14634:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":49120,"name":"bool","nodeType":"ElementaryTypeName","src":"14634:4:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":49128,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":49123,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14693:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49125,"indexExpression":{"id":49124,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14704:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14693:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49126,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14707:11:81","memberName":"userAddress","nodeType":"MemberAccess","referencedDeclaration":48298,"src":"14693:25:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49122,"name":"_getIsLiquidationCondition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49415,"src":"14649:26:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":49127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14649:83:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"14634:98:81"},{"condition":{"id":49131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":49129,"name":"yesOrNo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49121,"src":"14750:7:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":49130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14760:4:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"14750:14:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49164,"nodeType":"IfStatement","src":"14746:407:81","trueBody":{"id":49163,"nodeType":"Block","src":"14766:387:81","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":49133,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14799:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49135,"indexExpression":{"id":49134,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14810:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14799:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14813:11:81","memberName":"userAddress","nodeType":"MemberAccess","referencedDeclaration":48298,"src":"14799:25:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49132,"name":"liquidateVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49177,"src":"14784:14:81","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":49137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14784:41:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49138,"nodeType":"ExpressionStatement","src":"14784:41:81"},{"eventCall":{"arguments":[{"id":49140,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14887:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":49141,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14910:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49143,"indexExpression":{"id":49142,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14921:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14910:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14924:11:81","memberName":"userAddress","nodeType":"MemberAccess","referencedDeclaration":48298,"src":"14910:25:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":49145,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"14957:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49147,"indexExpression":{"id":49146,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14968:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14957:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14971:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"14957:21:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":49149,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"15000:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49151,"indexExpression":{"id":49150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"15011:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15000:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15014:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"15000:26:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":49153,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"15048:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49155,"indexExpression":{"id":49154,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"15059:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15048:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49156,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15062:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"15048:25:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":49157,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"15095:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49159,"indexExpression":{"id":49158,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"15106:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15095:13:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49160,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15109:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"15095:25:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49139,"name":"thisIsARiskyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48326,"src":"14848:17:81","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256,uint256,uint256)"}},"id":49161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14848:290:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49162,"nodeType":"EmitStatement","src":"14843:295:81"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49090,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14357:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":49091,"name":"userVaultArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49082,"src":"14361:20:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14357:24:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49166,"initializationExpression":{"assignments":[49087],"declarations":[{"constant":false,"id":49087,"mutability":"mutable","name":"i","nameLocation":"14350:1:81","nodeType":"VariableDeclaration","scope":49166,"src":"14342:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49086,"name":"uint256","nodeType":"ElementaryTypeName","src":"14342:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49089,"initialValue":{"hexValue":"30","id":49088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14354:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14342:13:81"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":49094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14383:3:81","subExpression":{"id":49093,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49087,"src":"14383:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":49095,"nodeType":"ExpressionStatement","src":"14383:3:81"},"nodeType":"ForStatement","src":"14337:826:81"}]},"documentation":{"id":49078,"nodeType":"StructuredDocumentation","src":"13776:352:81","text":" @notice Scans all the vaults in database and updates vault health for them.\n @notice Public function.\n @dev Needed because we cannot tranditionally loop over all the vaults to update vault health due to gas costs.\n @dev Called by chainlink automation or can be called by moderators or good keepers of this protocol."},"functionSelector":"d7bf2aef","implemented":true,"kind":"function","modifiers":[],"name":"scanVaults","nameLocation":"14142:10:81","parameters":{"id":49079,"nodeType":"ParameterList","parameters":[],"src":"14152:2:81"},"returnParameters":{"id":49080,"nodeType":"ParameterList","parameters":[],"src":"14162:0:81"},"scope":49677,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":49177,"nodeType":"FunctionDefinition","src":"15281:70:81","nodes":[],"body":{"id":49176,"nodeType":"Block","src":"15349:2:81","nodes":[],"statements":[]},"documentation":{"id":49169,"nodeType":"StructuredDocumentation","src":"15175:101:81","text":" @notice Liquidates vaults that get too risky.\n @dev Moderator only funciton."},"functionSelector":"194d7494","implemented":true,"kind":"function","modifiers":[{"id":49174,"kind":"modifierInvocation","modifierName":{"id":49173,"name":"onlyModerator","nameLocations":["15335:13:81"],"nodeType":"IdentifierPath","referencedDeclaration":48376,"src":"15335:13:81"},"nodeType":"ModifierInvocation","src":"15335:13:81"}],"name":"liquidateVault","nameLocation":"15290:14:81","parameters":{"id":49172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49171,"mutability":"mutable","name":"_vaultAddress","nameLocation":"15313:13:81","nodeType":"VariableDeclaration","scope":49177,"src":"15305:21:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49170,"name":"address","nodeType":"ElementaryTypeName","src":"15305:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15304:23:81"},"returnParameters":{"id":49175,"nodeType":"ParameterList","parameters":[],"src":"15349:0:81"},"scope":49677,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":49186,"nodeType":"FunctionDefinition","src":"15496:75:81","nodes":[],"body":{"id":49185,"nodeType":"Block","src":"15544:27:81","nodes":[],"statements":[{"expression":{"id":49183,"name":"CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48274,"src":"15561:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49182,"id":49184,"nodeType":"Return","src":"15554:10:81"}]},"documentation":{"id":49178,"nodeType":"StructuredDocumentation","src":"15357:134:81","text":" @notice Public getter function.\n @return uint256 Collateral to rupio percentage threshold defined by the DAO."},"functionSelector":"eaa45b42","implemented":true,"kind":"function","modifiers":[],"name":"getCRP","nameLocation":"15505:6:81","parameters":{"id":49179,"nodeType":"ParameterList","parameters":[],"src":"15511:2:81"},"returnParameters":{"id":49182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49186,"src":"15535:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49180,"name":"uint256","nodeType":"ElementaryTypeName","src":"15535:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15534:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49195,"nodeType":"FunctionDefinition","src":"15714:97:81","nodes":[],"body":{"id":49194,"nodeType":"Block","src":"15773:38:81","nodes":[],"statements":[{"expression":{"id":49192,"name":"BASE_RISK_RATE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48276,"src":"15790:14:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49191,"id":49193,"nodeType":"Return","src":"15783:21:81"}]},"documentation":{"id":49187,"nodeType":"StructuredDocumentation","src":"15577:132:81","text":" @notice Public getter function.\n @return uint256 Base Risk Rate on all collateral types defined by the DAO."},"functionSelector":"fb5989a6","implemented":true,"kind":"function","modifiers":[],"name":"getBASE_RISK_RATE","nameLocation":"15723:17:81","parameters":{"id":49188,"nodeType":"ParameterList","parameters":[],"src":"15740:2:81"},"returnParameters":{"id":49191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49195,"src":"15764:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49189,"name":"uint256","nodeType":"ElementaryTypeName","src":"15764:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15763:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49204,"nodeType":"FunctionDefinition","src":"15961:103:81","nodes":[],"body":{"id":49203,"nodeType":"Block","src":"16023:41:81","nodes":[],"statements":[{"expression":{"id":49201,"name":"RISK_PREMIUM_RATE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48278,"src":"16040:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49200,"id":49202,"nodeType":"Return","src":"16033:24:81"}]},"documentation":{"id":49196,"nodeType":"StructuredDocumentation","src":"15817:139:81","text":" @notice Public getter function.\n @return uint256 Risk Premium Rate on specific collateral type defined by the DAO."},"functionSelector":"7649aef1","implemented":true,"kind":"function","modifiers":[],"name":"getRISK_PREMIUM_RATE","nameLocation":"15970:20:81","parameters":{"id":49197,"nodeType":"ParameterList","parameters":[],"src":"15990:2:81"},"returnParameters":{"id":49200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49204,"src":"16014:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49198,"name":"uint256","nodeType":"ElementaryTypeName","src":"16014:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16013:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49221,"nodeType":"FunctionDefinition","src":"16231:176:81","nodes":[],"body":{"id":49220,"nodeType":"Block","src":"16348:59:81","nodes":[],"statements":[{"expression":{"baseExpression":{"id":49213,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"16365:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49218,"indexExpression":{"baseExpression":{"id":49214,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"16376:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49217,"indexExpression":{"expression":{"id":49215,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16388:3:81","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16392:6:81","memberName":"sender","nodeType":"MemberAccess","src":"16388:10:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16376:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16365:35:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"functionReturnParameters":49212,"id":49219,"nodeType":"Return","src":"16358:42:81"}]},"documentation":{"id":49205,"nodeType":"StructuredDocumentation","src":"16070:156:81","text":" @notice Public getter function.\n @notice User must have a vault first.\n @return vault Struct indicating user's vault details."},"functionSelector":"3f3d2a88","implemented":true,"kind":"function","modifiers":[{"id":49208,"kind":"modifierInvocation","modifierName":{"id":49207,"name":"yesVault","nameLocations":["16304:8:81"],"nodeType":"IdentifierPath","referencedDeclaration":48346,"src":"16304:8:81"},"nodeType":"ModifierInvocation","src":"16304:8:81"}],"name":"getVaultDetailsForTheUser","nameLocation":"16240:25:81","parameters":{"id":49206,"nodeType":"ParameterList","parameters":[],"src":"16265:2:81"},"returnParameters":{"id":49212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49221,"src":"16330:12:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_memory_ptr","typeString":"struct CollateralSafekeep.vault"},"typeName":{"id":49210,"nodeType":"UserDefinedTypeName","pathNode":{"id":49209,"name":"vault","nameLocations":["16330:5:81"],"nodeType":"IdentifierPath","referencedDeclaration":48307,"src":"16330:5:81"},"referencedDeclaration":48307,"src":"16330:5:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage_ptr","typeString":"struct CollateralSafekeep.vault"}},"visibility":"internal"}],"src":"16329:14:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49234,"nodeType":"FunctionDefinition","src":"16653:147:81","nodes":[],"body":{"id":49233,"nodeType":"Block","src":"16754:46:81","nodes":[],"statements":[{"expression":{"arguments":[{"id":49230,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49224,"src":"16787:5:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49229,"name":"_getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49390,"src":"16771:15:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16771:22:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49228,"id":49232,"nodeType":"Return","src":"16764:29:81"}]},"documentation":{"id":49222,"nodeType":"StructuredDocumentation","src":"16413:235:81","text":" @notice Calculates the vault health of an address based on current collateral and rupio issued.\n @notice Moderator only getter function.\n @param _user Address of user.\n @return uint256 Vault health."},"functionSelector":"4a83cf49","implemented":true,"kind":"function","modifiers":[],"name":"getVaultHealth","nameLocation":"16662:14:81","parameters":{"id":49225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49224,"mutability":"mutable","name":"_user","nameLocation":"16694:5:81","nodeType":"VariableDeclaration","scope":49234,"src":"16686:13:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49223,"name":"address","nodeType":"ElementaryTypeName","src":"16686:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16676:47:81"},"returnParameters":{"id":49228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49234,"src":"16745:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49226,"name":"uint256","nodeType":"ElementaryTypeName","src":"16745:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16744:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49250,"nodeType":"FunctionDefinition","src":"17000:179:81","nodes":[],"body":{"id":49249,"nodeType":"Block","src":"17114:65:81","nodes":[],"statements":[{"expression":{"expression":{"baseExpression":{"id":49242,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"17131:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49246,"indexExpression":{"baseExpression":{"id":49243,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"17142:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49245,"indexExpression":{"id":49244,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49237,"src":"17154:8:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17142:21:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17131:33:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49247,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17165:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"17131:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49241,"id":49248,"nodeType":"Return","src":"17124:48:81"}]},"documentation":{"id":49235,"nodeType":"StructuredDocumentation","src":"16806:189:81","text":" @notice Moderator only getter function.\n @param _address Address of the user\n @return uint256 Collateral balance in ETH in native decimals, in this case 1e18."},"functionSelector":"ab845413","implemented":true,"kind":"function","modifiers":[],"name":"getUserCollateralBalance","nameLocation":"17009:24:81","parameters":{"id":49238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49237,"mutability":"mutable","name":"_address","nameLocation":"17051:8:81","nodeType":"VariableDeclaration","scope":49250,"src":"17043:16:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49236,"name":"address","nodeType":"ElementaryTypeName","src":"17043:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17033:50:81"},"returnParameters":{"id":49241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49250,"src":"17105:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49239,"name":"uint256","nodeType":"ElementaryTypeName","src":"17105:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17104:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49259,"nodeType":"FunctionDefinition","src":"17413:137:81","nodes":[],"body":{"id":49258,"nodeType":"Block","src":"17518:32:81","nodes":[],"statements":[{"expression":{"id":49256,"name":"VAULT_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48284,"src":"17535:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49255,"id":49257,"nodeType":"Return","src":"17528:15:81"}]},"documentation":{"id":49251,"nodeType":"StructuredDocumentation","src":"17185:223:81","text":" @notice Moderator only getter function.\n @dev Can be used to get total number of vaults in the system.\n @dev Vault Id starts from 1.\n @return uint256 Current global counter of vault ids."},"functionSelector":"ae0b163f","implemented":true,"kind":"function","modifiers":[],"name":"getCurrentVaultId","nameLocation":"17422:17:81","parameters":{"id":49252,"nodeType":"ParameterList","parameters":[],"src":"17439:2:81"},"returnParameters":{"id":49255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49259,"src":"17505:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49253,"name":"uint256","nodeType":"ElementaryTypeName","src":"17505:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17486:27:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49268,"nodeType":"FunctionDefinition","src":"17733:192:81","nodes":[],"body":{"id":49267,"nodeType":"Block","src":"17877:48:81","nodes":[],"statements":[{"expression":{"id":49265,"name":"currentCollateralBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48282,"src":"17894:24:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":49264,"id":49266,"nodeType":"Return","src":"17887:31:81"}]},"documentation":{"id":49260,"nodeType":"StructuredDocumentation","src":"17556:172:81","text":" @notice Moderator only getter function.\n @return int256 Total collateral balance of the whole contract in ETH in native decimals, in this case 1e18"},"functionSelector":"9dc1b45b","implemented":true,"kind":"function","modifiers":[],"name":"getTotalCollateralPrice","nameLocation":"17742:23:81","parameters":{"id":49261,"nodeType":"ParameterList","parameters":[],"src":"17765:2:81"},"returnParameters":{"id":49264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49268,"src":"17856:6:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":49262,"name":"int256","nodeType":"ElementaryTypeName","src":"17856:6:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17812:60:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49279,"nodeType":"FunctionDefinition","src":"18074:183:81","nodes":[],"body":{"id":49278,"nodeType":"Block","src":"18223:34:81","nodes":[],"statements":[{"expression":{"id":49276,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"18240:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"functionReturnParameters":49275,"id":49277,"nodeType":"Return","src":"18233:17:81"}]},"documentation":{"id":49269,"nodeType":"StructuredDocumentation","src":"17931:138:81","text":" @notice Moderator only getter function.\n @return vault[] Total database of vaults in array of structs userVaults."},"functionSelector":"c48589cb","implemented":true,"kind":"function","modifiers":[],"name":"getTotalVaultDetails","nameLocation":"18083:20:81","parameters":{"id":49270,"nodeType":"ParameterList","parameters":[],"src":"18103:2:81"},"returnParameters":{"id":49275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49279,"src":"18194:14:81","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_memory_ptr_$dyn_memory_ptr","typeString":"struct CollateralSafekeep.vault[]"},"typeName":{"baseType":{"id":49272,"nodeType":"UserDefinedTypeName","pathNode":{"id":49271,"name":"vault","nameLocations":["18194:5:81"],"nodeType":"IdentifierPath","referencedDeclaration":48307,"src":"18194:5:81"},"referencedDeclaration":48307,"src":"18194:5:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage_ptr","typeString":"struct CollateralSafekeep.vault"}},"id":49273,"nodeType":"ArrayTypeName","src":"18194:7:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage_ptr","typeString":"struct CollateralSafekeep.vault[]"}},"visibility":"internal"}],"src":"18150:68:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49301,"nodeType":"FunctionDefinition","src":"18472:249:81","nodes":[],"body":{"id":49300,"nodeType":"Block","src":"18581:140:81","nodes":[],"statements":[{"assignments":[49288],"declarations":[{"constant":false,"id":49288,"mutability":"mutable","name":"bal","nameLocation":"18599:3:81","nodeType":"VariableDeclaration","scope":49300,"src":"18591:11:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49287,"name":"uint256","nodeType":"ElementaryTypeName","src":"18591:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49295,"initialValue":{"expression":{"baseExpression":{"id":49289,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"18605:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49293,"indexExpression":{"baseExpression":{"id":49290,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"18616:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49292,"indexExpression":{"id":49291,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49282,"src":"18628:8:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18616:21:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18605:33:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18639:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"18605:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18591:55:81"},{"expression":{"arguments":[{"id":49297,"name":"bal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49288,"src":"18710:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49296,"name":"_getAmountETHToINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49460,"src":"18691:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":49298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18691:23:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49286,"id":49299,"nodeType":"Return","src":"18684:30:81"}]},"documentation":{"id":49280,"nodeType":"StructuredDocumentation","src":"18263:204:81","text":" @notice Moderator only getter function.\n @param _address Address of the user.\n @return uint256 User's current collateral balance in INR in native decimals, in this case 1e8."},"functionSelector":"314860f8","implemented":true,"kind":"function","modifiers":[],"name":"getUserBalanceInINR","nameLocation":"18481:19:81","parameters":{"id":49283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49282,"mutability":"mutable","name":"_address","nameLocation":"18518:8:81","nodeType":"VariableDeclaration","scope":49301,"src":"18510:16:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49281,"name":"address","nodeType":"ElementaryTypeName","src":"18510:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18500:50:81"},"returnParameters":{"id":49286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49301,"src":"18572:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49284,"name":"uint256","nodeType":"ElementaryTypeName","src":"18572:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18571:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49314,"nodeType":"FunctionDefinition","src":"18982:161:81","nodes":[],"body":{"id":49313,"nodeType":"Block","src":"19090:53:81","nodes":[],"statements":[{"expression":{"arguments":[{"id":49310,"name":"amountINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49304,"src":"19126:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49309,"name":"_getAmountINRToETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49504,"src":"19107:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":49311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19107:29:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49308,"id":49312,"nodeType":"Return","src":"19100:36:81"}]},"documentation":{"id":49302,"nodeType":"StructuredDocumentation","src":"18727:250:81","text":" @notice Moderator only getter function.\n @param amountINR Amount of INR to be converted to ETH, in native decimals in this case 1e8.\n @return uint256 Amount of ETH converted to INR, in native decimals in this case 1e18."},"functionSelector":"6653b817","implemented":true,"kind":"function","modifiers":[],"name":"getAmountINRToETH","nameLocation":"18991:17:81","parameters":{"id":49305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49304,"mutability":"mutable","name":"amountINR","nameLocation":"19026:9:81","nodeType":"VariableDeclaration","scope":49314,"src":"19018:17:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49303,"name":"uint256","nodeType":"ElementaryTypeName","src":"19018:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19008:51:81"},"returnParameters":{"id":49308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49314,"src":"19081:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49306,"name":"uint256","nodeType":"ElementaryTypeName","src":"19081:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19080:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49327,"nodeType":"FunctionDefinition","src":"19388:173:81","nodes":[],"body":{"id":49326,"nodeType":"Block","src":"19502:59:81","nodes":[],"statements":[{"expression":{"arguments":[{"id":49323,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49317,"src":"19549:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49322,"name":"_getMaxWithdrawableCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49656,"src":"19519:29:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19519:35:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49321,"id":49325,"nodeType":"Return","src":"19512:42:81"}]},"documentation":{"id":49315,"nodeType":"StructuredDocumentation","src":"19149:234:81","text":" @notice Moderator only getter function.\n @param user Address of the user.\n @return uint256 Max amount of collateral that can be withdrawn by a user at current state in native decimals, in this case 1e18."},"functionSelector":"9210ae64","implemented":true,"kind":"function","modifiers":[],"name":"getMaxWithdrawableCollateral","nameLocation":"19397:28:81","parameters":{"id":49318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49317,"mutability":"mutable","name":"user","nameLocation":"19443:4:81","nodeType":"VariableDeclaration","scope":49327,"src":"19435:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49316,"name":"address","nodeType":"ElementaryTypeName","src":"19435:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19425:46:81"},"returnParameters":{"id":49321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49327,"src":"19493:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49319,"name":"uint256","nodeType":"ElementaryTypeName","src":"19493:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19492:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49340,"nodeType":"FunctionDefinition","src":"19779:155:81","nodes":[],"body":{"id":49339,"nodeType":"Block","src":"19884:50:81","nodes":[],"statements":[{"expression":{"arguments":[{"id":49336,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49330,"src":"19922:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49335,"name":"_getMaxMintableRupio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49567,"src":"19901:20:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19901:26:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49334,"id":49338,"nodeType":"Return","src":"19894:33:81"}]},"documentation":{"id":49328,"nodeType":"StructuredDocumentation","src":"19567:207:81","text":" @notice Moderator only getter function.\n @param user Address of the user.\n @return uint256 Maximum amount of rupio that can be minted by a user at current state in no decimals."},"functionSelector":"b2088164","implemented":true,"kind":"function","modifiers":[],"name":"getMaxMintableRupio","nameLocation":"19788:19:81","parameters":{"id":49331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49330,"mutability":"mutable","name":"user","nameLocation":"19825:4:81","nodeType":"VariableDeclaration","scope":49340,"src":"19817:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49329,"name":"address","nodeType":"ElementaryTypeName","src":"19817:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19807:46:81"},"returnParameters":{"id":49334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49340,"src":"19875:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49332,"name":"uint256","nodeType":"ElementaryTypeName","src":"19875:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19874:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":49390,"nodeType":"FunctionDefinition","src":"20104:504:81","nodes":[],"body":{"id":49389,"nodeType":"Block","src":"20176:432:81","nodes":[],"statements":[{"assignments":[49349],"declarations":[{"constant":false,"id":49349,"mutability":"mutable","name":"collateral","nameLocation":"20194:10:81","nodeType":"VariableDeclaration","scope":49389,"src":"20186:18:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49348,"name":"uint256","nodeType":"ElementaryTypeName","src":"20186:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49356,"initialValue":{"expression":{"baseExpression":{"id":49350,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"20207:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49354,"indexExpression":{"baseExpression":{"id":49351,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"20218:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49353,"indexExpression":{"id":49352,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49343,"src":"20230:5:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20218:18:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20207:30:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49355,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20238:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"20207:43:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20186:64:81"},{"assignments":[49358],"declarations":[{"constant":false,"id":49358,"mutability":"mutable","name":"rupioIssued","nameLocation":"20290:11:81","nodeType":"VariableDeclaration","scope":49389,"src":"20282:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49357,"name":"uint256","nodeType":"ElementaryTypeName","src":"20282:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49365,"initialValue":{"expression":{"baseExpression":{"id":49359,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"20304:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49363,"indexExpression":{"baseExpression":{"id":49360,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"20315:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49362,"indexExpression":{"id":49361,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49343,"src":"20327:5:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20315:18:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20304:30:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20335:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"20304:42:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20282:64:81"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49366,"name":"rupioIssued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49358,"src":"20413:11:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":49367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20428:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20413:16:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":49387,"nodeType":"Block","src":"20485:117:81","statements":[{"assignments":[49375],"declarations":[{"constant":false,"id":49375,"mutability":"mutable","name":"_vaultHealth","nameLocation":"20507:12:81","nodeType":"VariableDeclaration","scope":49387,"src":"20499:20:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49374,"name":"uint256","nodeType":"ElementaryTypeName","src":"20499:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49384,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49376,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49349,"src":"20524:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"id":49377,"name":"rupioIssued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49358,"src":"20538:11:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49378,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20537:13:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20524:26:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49380,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20523:28:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":49381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20554:3:81","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"20523:34:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49383,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20522:36:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20499:59:81"},{"expression":{"id":49385,"name":"_vaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49375,"src":"20579:12:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49347,"id":49386,"nodeType":"Return","src":"20572:19:81"}]},"id":49388,"nodeType":"IfStatement","src":"20409:193:81","trueBody":{"id":49373,"nodeType":"Block","src":"20431:48:81","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49369,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49349,"src":"20452:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":49370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20465:3:81","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"20452:16:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49347,"id":49372,"nodeType":"Return","src":"20445:23:81"}]}}]},"documentation":{"id":49341,"nodeType":"StructuredDocumentation","src":"19940:159:81","text":" @notice Internal getter function.\n @param _user Address of the user.\n @return uint256 Vault health of the user at current state."},"implemented":true,"kind":"function","modifiers":[],"name":"_getVaultHealth","nameLocation":"20113:15:81","parameters":{"id":49344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49343,"mutability":"mutable","name":"_user","nameLocation":"20137:5:81","nodeType":"VariableDeclaration","scope":49390,"src":"20129:13:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49342,"name":"address","nodeType":"ElementaryTypeName","src":"20129:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"20128:15:81"},"returnParameters":{"id":49347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49390,"src":"20167:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49345,"name":"uint256","nodeType":"ElementaryTypeName","src":"20167:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20166:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":49415,"nodeType":"FunctionDefinition","src":"20851:255:81","nodes":[],"body":{"id":49414,"nodeType":"Block","src":"20944:162:81","nodes":[],"statements":[{"assignments":[49399],"declarations":[{"constant":false,"id":49399,"mutability":"mutable","name":"current","nameLocation":"20962:7:81","nodeType":"VariableDeclaration","scope":49414,"src":"20954:15:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49398,"name":"uint256","nodeType":"ElementaryTypeName","src":"20954:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49403,"initialValue":{"arguments":[{"id":49401,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49393,"src":"20987:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49400,"name":"getVaultHealth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49234,"src":"20972:14:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":49402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20972:20:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20954:38:81"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49404,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49399,"src":"21006:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":49405,"name":"CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48274,"src":"21016:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21006:13:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":49412,"nodeType":"Block","src":"21064:36:81","statements":[{"expression":{"hexValue":"74727565","id":49410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"21085:4:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":49397,"id":49411,"nodeType":"Return","src":"21078:11:81"}]},"id":49413,"nodeType":"IfStatement","src":"21002:98:81","trueBody":{"id":49409,"nodeType":"Block","src":"21021:37:81","statements":[{"expression":{"hexValue":"66616c7365","id":49407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"21042:5:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":49397,"id":49408,"nodeType":"Return","src":"21035:12:81"}]}}]},"documentation":{"id":49391,"nodeType":"StructuredDocumentation","src":"20614:232:81","text":" @notice Internal getter function.\n @dev Liquidation condition is met when vault health is less than CRP.\n @param user Address of the user.\n @return bool Is liquidation condition met for the user."},"implemented":true,"kind":"function","modifiers":[],"name":"_getIsLiquidationCondition","nameLocation":"20860:26:81","parameters":{"id":49394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49393,"mutability":"mutable","name":"user","nameLocation":"20904:4:81","nodeType":"VariableDeclaration","scope":49415,"src":"20896:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49392,"name":"address","nodeType":"ElementaryTypeName","src":"20896:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"20886:28:81"},"returnParameters":{"id":49397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49415,"src":"20938:4:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":49395,"name":"bool","nodeType":"ElementaryTypeName","src":"20938:4:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20937:6:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":49460,"nodeType":"FunctionDefinition","src":"21358:351:81","nodes":[],"body":{"id":49459,"nodeType":"Block","src":"21451:258:81","nodes":[],"statements":[{"assignments":[49424],"declarations":[{"constant":false,"id":49424,"mutability":"mutable","name":"a","nameLocation":"21468:1:81","nodeType":"VariableDeclaration","scope":49459,"src":"21461:8:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":49423,"name":"int256","nodeType":"ElementaryTypeName","src":"21461:6:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":49428,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":49425,"name":"priceContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48293,"src":"21472:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"id":49426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21486:8:81","memberName":"ETHtoUSD","nodeType":"MemberAccess","referencedDeclaration":50059,"src":"21472:22:81","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int256_$","typeString":"function () view external returns (int256)"}},"id":49427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21472:24:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21461:35:81"},{"assignments":[49430],"declarations":[{"constant":false,"id":49430,"mutability":"mutable","name":"b","nameLocation":"21539:1:81","nodeType":"VariableDeclaration","scope":49459,"src":"21532:8:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":49429,"name":"int256","nodeType":"ElementaryTypeName","src":"21532:6:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":49434,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":49431,"name":"priceContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48293,"src":"21543:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"id":49432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21557:8:81","memberName":"INRtoUSD","nodeType":"MemberAccess","referencedDeclaration":50045,"src":"21543:22:81","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int256_$","typeString":"function () view external returns (int256)"}},"id":49433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21543:24:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21532:35:81"},{"assignments":[49436],"declarations":[{"constant":false,"id":49436,"mutability":"mutable","name":"c","nameLocation":"21610:1:81","nodeType":"VariableDeclaration","scope":49459,"src":"21602:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49435,"name":"uint256","nodeType":"ElementaryTypeName","src":"21602:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49449,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49437,"name":"amountETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49418,"src":"21615:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":49440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49424,"src":"21635:1:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":49439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21627:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":49438,"name":"uint256","nodeType":"ElementaryTypeName","src":"21627:7:81","typeDescriptions":{}}},"id":49441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21627:10:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21615:22:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49443,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21614:24:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":49446,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49430,"src":"21649:1:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":49445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21641:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":49444,"name":"uint256","nodeType":"ElementaryTypeName","src":"21641:7:81","typeDescriptions":{}}},"id":49447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21641:10:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21614:37:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21602:49:81"},{"assignments":[49451],"declarations":[{"constant":false,"id":49451,"mutability":"mutable","name":"d","nameLocation":"21670:1:81","nodeType":"VariableDeclaration","scope":49459,"src":"21662:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49450,"name":"uint256","nodeType":"ElementaryTypeName","src":"21662:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49456,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49452,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49436,"src":"21675:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653130","id":49453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21679:4:81","typeDescriptions":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"},"value":"1e10"},"src":"21675:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49455,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21674:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21662:22:81"},{"expression":{"id":49457,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49451,"src":"21701:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49422,"id":49458,"nodeType":"Return","src":"21694:8:81"}]},"documentation":{"id":49416,"nodeType":"StructuredDocumentation","src":"21112:241:81","text":" @notice Internal getter function.\n @param amountETH Amount of ETH to be converted to INR, in native decimals in this case 1e18.\n @return uint256 Amount ETH converted to INR, in native decimals in this case 1e8."},"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountETHToINR","nameLocation":"21367:18:81","parameters":{"id":49419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49418,"mutability":"mutable","name":"amountETH","nameLocation":"21403:9:81","nodeType":"VariableDeclaration","scope":49460,"src":"21395:17:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49417,"name":"uint256","nodeType":"ElementaryTypeName","src":"21395:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21385:33:81"},"returnParameters":{"id":49422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49460,"src":"21442:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49420,"name":"uint256","nodeType":"ElementaryTypeName","src":"21442:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21441:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":49504,"nodeType":"FunctionDefinition","src":"21961:297:81","nodes":[],"body":{"id":49503,"nodeType":"Block","src":"22054:204:81","nodes":[],"statements":[{"assignments":[49469],"declarations":[{"constant":false,"id":49469,"mutability":"mutable","name":"a","nameLocation":"22071:1:81","nodeType":"VariableDeclaration","scope":49503,"src":"22064:8:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":49468,"name":"int256","nodeType":"ElementaryTypeName","src":"22064:6:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":49473,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":49470,"name":"priceContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48293,"src":"22075:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"id":49471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22089:8:81","memberName":"ETHtoUSD","nodeType":"MemberAccess","referencedDeclaration":50059,"src":"22075:22:81","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int256_$","typeString":"function () view external returns (int256)"}},"id":49472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22075:24:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"22064:35:81"},{"assignments":[49475],"declarations":[{"constant":false,"id":49475,"mutability":"mutable","name":"b","nameLocation":"22116:1:81","nodeType":"VariableDeclaration","scope":49503,"src":"22109:8:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":49474,"name":"int256","nodeType":"ElementaryTypeName","src":"22109:6:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":49479,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":49476,"name":"priceContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48293,"src":"22120:13:81","typeDescriptions":{"typeIdentifier":"t_contract$_PriceFeed_$50060","typeString":"contract PriceFeed"}},"id":49477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22134:8:81","memberName":"INRtoUSD","nodeType":"MemberAccess","referencedDeclaration":50045,"src":"22120:22:81","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int256_$","typeString":"function () view external returns (int256)"}},"id":49478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22120:24:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"22109:35:81"},{"assignments":[49481],"declarations":[{"constant":false,"id":49481,"mutability":"mutable","name":"c","nameLocation":"22162:1:81","nodeType":"VariableDeclaration","scope":49503,"src":"22154:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49480,"name":"uint256","nodeType":"ElementaryTypeName","src":"22154:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49494,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":49484,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49475,"src":"22175:1:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":49483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22167:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":49482,"name":"uint256","nodeType":"ElementaryTypeName","src":"22167:7:81","typeDescriptions":{}}},"id":49485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22167:10:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":49486,"name":"amountINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49463,"src":"22180:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22167:22:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49488,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22166:24:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":49491,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49469,"src":"22201:1:81","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":49490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22193:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":49489,"name":"uint256","nodeType":"ElementaryTypeName","src":"22193:7:81","typeDescriptions":{}}},"id":49492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22193:10:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22166:37:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22154:49:81"},{"assignments":[49496],"declarations":[{"constant":false,"id":49496,"mutability":"mutable","name":"d","nameLocation":"22221:1:81","nodeType":"VariableDeclaration","scope":49503,"src":"22213:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49495,"name":"uint256","nodeType":"ElementaryTypeName","src":"22213:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49500,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49497,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49481,"src":"22225:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653130","id":49498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22229:4:81","typeDescriptions":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"},"value":"1e10"},"src":"22225:8:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22213:20:81"},{"expression":{"id":49501,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49496,"src":"22250:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49467,"id":49502,"nodeType":"Return","src":"22243:8:81"}]},"documentation":{"id":49461,"nodeType":"StructuredDocumentation","src":"21715:241:81","text":" @notice Internal getter function.\n @param amountINR Amount of INR to be converted to ETH, in native decimals in this case 1e8.\n @return uint256 Amount INR converted to ETH, in native decimals in this case 1e18."},"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountINRToETH","nameLocation":"21970:18:81","parameters":{"id":49464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49463,"mutability":"mutable","name":"amountINR","nameLocation":"22006:9:81","nodeType":"VariableDeclaration","scope":49504,"src":"21998:17:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49462,"name":"uint256","nodeType":"ElementaryTypeName","src":"21998:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21988:33:81"},"returnParameters":{"id":49467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49504,"src":"22045:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49465,"name":"uint256","nodeType":"ElementaryTypeName","src":"22045:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22044:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":49567,"nodeType":"FunctionDefinition","src":"22470:608:81","nodes":[],"body":{"id":49566,"nodeType":"Block","src":"22560:518:81","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":49512,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"22574:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49516,"indexExpression":{"baseExpression":{"id":49513,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"22585:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49515,"indexExpression":{"id":49514,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49507,"src":"22597:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22585:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22574:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22604:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"22574:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313530","id":49518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22618:3:81","typeDescriptions":{"typeIdentifier":"t_rational_150_by_1","typeString":"int_const 150"},"value":"150"},"src":"22574:47:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49523,"nodeType":"IfStatement","src":"22570:86:81","trueBody":{"id":49522,"nodeType":"Block","src":"22623:33:81","statements":[{"expression":{"hexValue":"30","id":49520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22644:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":49511,"id":49521,"nodeType":"Return","src":"22637:8:81"}]}},{"assignments":[49525],"declarations":[{"constant":false,"id":49525,"mutability":"mutable","name":"bal","nameLocation":"22673:3:81","nodeType":"VariableDeclaration","scope":49566,"src":"22665:11:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49524,"name":"uint256","nodeType":"ElementaryTypeName","src":"22665:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49532,"initialValue":{"expression":{"baseExpression":{"id":49526,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"22679:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49530,"indexExpression":{"baseExpression":{"id":49527,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"22690:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49529,"indexExpression":{"id":49528,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49507,"src":"22702:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22690:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22679:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22709:7:81","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":48300,"src":"22679:37:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22665:51:81"},{"assignments":[49534],"declarations":[{"constant":false,"id":49534,"mutability":"mutable","name":"_getUserBalanceInINR","nameLocation":"22768:20:81","nodeType":"VariableDeclaration","scope":49566,"src":"22760:28:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49533,"name":"uint256","nodeType":"ElementaryTypeName","src":"22760:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49538,"initialValue":{"arguments":[{"id":49536,"name":"bal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49525,"src":"22810:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49535,"name":"_getAmountETHToINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49460,"src":"22791:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":49537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22791:23:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22760:54:81"},{"assignments":[49540],"declarations":[{"constant":false,"id":49540,"mutability":"mutable","name":"rupioIssued","nameLocation":"22849:11:81","nodeType":"VariableDeclaration","scope":49566,"src":"22841:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49539,"name":"uint256","nodeType":"ElementaryTypeName","src":"22841:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49547,"initialValue":{"expression":{"baseExpression":{"id":49541,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"22863:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49545,"indexExpression":{"baseExpression":{"id":49542,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"22874:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49544,"indexExpression":{"id":49543,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49507,"src":"22886:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22874:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22863:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49546,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22893:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"22863:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22841:63:81"},{"assignments":[49549],"declarations":[{"constant":false,"id":49549,"mutability":"mutable","name":"totalAval","nameLocation":"22956:9:81","nodeType":"VariableDeclaration","scope":49566,"src":"22948:17:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49548,"name":"uint256","nodeType":"ElementaryTypeName","src":"22948:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49557,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49550,"name":"_getUserBalanceInINR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49534,"src":"22969:20:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":49551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22992:1:81","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22969:24:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49553,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22968:26:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"hexValue":"33","id":49554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22998:1:81","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"id":49555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22997:3:81","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}},"src":"22968:32:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22948:52:81"},{"assignments":[49559],"declarations":[{"constant":false,"id":49559,"mutability":"mutable","name":"grand","nameLocation":"23018:5:81","nodeType":"VariableDeclaration","scope":49566,"src":"23010:13:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49558,"name":"uint256","nodeType":"ElementaryTypeName","src":"23010:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49563,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49560,"name":"totalAval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49549,"src":"23026:9:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":49561,"name":"rupioIssued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49540,"src":"23038:11:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23026:23:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23010:39:81"},{"expression":{"id":49564,"name":"grand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49559,"src":"23066:5:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49511,"id":49565,"nodeType":"Return","src":"23059:12:81"}]},"documentation":{"id":49505,"nodeType":"StructuredDocumentation","src":"22264:201:81","text":" @notice Internal getter function.\n @param user Address of the user.\n @return uint256 Maximum amount of rupio that can be minted by a user at current state in no decimals."},"implemented":true,"kind":"function","modifiers":[],"name":"_getMaxMintableRupio","nameLocation":"22479:20:81","parameters":{"id":49508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49507,"mutability":"mutable","name":"user","nameLocation":"22517:4:81","nodeType":"VariableDeclaration","scope":49567,"src":"22509:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49506,"name":"address","nodeType":"ElementaryTypeName","src":"22509:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22499:28:81"},"returnParameters":{"id":49511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49567,"src":"22551:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49509,"name":"uint256","nodeType":"ElementaryTypeName","src":"22551:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22550:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":49656,"nodeType":"FunctionDefinition","src":"23317:813:81","nodes":[],"body":{"id":49655,"nodeType":"Block","src":"23416:714:81","nodes":[],"statements":[{"assignments":[49576],"declarations":[{"constant":false,"id":49576,"mutability":"mutable","name":"collateral","nameLocation":"23434:10:81","nodeType":"VariableDeclaration","scope":49655,"src":"23426:18:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49575,"name":"uint256","nodeType":"ElementaryTypeName","src":"23426:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49583,"initialValue":{"expression":{"baseExpression":{"id":49577,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"23447:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49581,"indexExpression":{"baseExpression":{"id":49578,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"23458:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49580,"indexExpression":{"id":49579,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49570,"src":"23470:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23458:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23447:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23477:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"23447:42:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23426:63:81"},{"assignments":[49585],"declarations":[{"constant":false,"id":49585,"mutability":"mutable","name":"rupioIssued","nameLocation":"23507:11:81","nodeType":"VariableDeclaration","scope":49655,"src":"23499:19:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49584,"name":"uint256","nodeType":"ElementaryTypeName","src":"23499:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49592,"initialValue":{"expression":{"baseExpression":{"id":49586,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"23521:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49590,"indexExpression":{"baseExpression":{"id":49587,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"23532:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49589,"indexExpression":{"id":49588,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49570,"src":"23544:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23532:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23521:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49591,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23551:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"23521:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23499:63:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":49594,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"23593:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49598,"indexExpression":{"baseExpression":{"id":49595,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"23604:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49597,"indexExpression":{"id":49596,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49570,"src":"23616:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23604:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23593:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49599,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23623:11:81","memberName":"rupioIssued","nodeType":"MemberAccess","referencedDeclaration":48304,"src":"23593:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":49600,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"23653:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49604,"indexExpression":{"baseExpression":{"id":49601,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"23664:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49603,"indexExpression":{"id":49602,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49570,"src":"23676:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23664:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23653:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49605,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23683:12:81","memberName":"balanceInINR","nodeType":"MemberAccess","referencedDeclaration":48302,"src":"23653:42:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23593:102:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"796f752061726520696e206465627421","id":49607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23709:18:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b105cfb6245ec0d4a101ecc2d233a7e8019150521595a5eaea6c271998b05f","typeString":"literal_string \"you are in debt!\""},"value":"you are in debt!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77b105cfb6245ec0d4a101ecc2d233a7e8019150521595a5eaea6c271998b05f","typeString":"literal_string \"you are in debt!\""}],"id":49593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"23572:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":49608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23572:165:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49609,"nodeType":"ExpressionStatement","src":"23572:165:81"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":49611,"name":"userVaults","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48312,"src":"23768:10:81","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_vault_$48307_storage_$dyn_storage","typeString":"struct CollateralSafekeep.vault storage ref[] storage ref"}},"id":49615,"indexExpression":{"baseExpression":{"id":49612,"name":"userIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48331,"src":"23779:11:81","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":49614,"indexExpression":{"id":49613,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49570,"src":"23791:4:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23779:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23768:29:81","typeDescriptions":{"typeIdentifier":"t_struct$_vault_$48307_storage","typeString":"struct CollateralSafekeep.vault storage ref"}},"id":49616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23798:11:81","memberName":"vaultHealth","nodeType":"MemberAccess","referencedDeclaration":48306,"src":"23768:41:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":49617,"name":"CRP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48274,"src":"23812:3:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23768:47:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"796f752061726520696e2064656274","id":49619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23829:17:81","typeDescriptions":{"typeIdentifier":"t_stringliteral_1727f147ab0a7ffc7cf28999c2dbf751611c10bb0669fa3b3e743416f48b4493","typeString":"literal_string \"you are in debt\""},"value":"you are in debt"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1727f147ab0a7ffc7cf28999c2dbf751611c10bb0669fa3b3e743416f48b4493","typeString":"literal_string \"you are in debt\""}],"id":49610,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"23747:7:81","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":49620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23747:109:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49621,"nodeType":"ExpressionStatement","src":"23747:109:81"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49622,"name":"rupioIssued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49585,"src":"23870:11:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":49623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23885:1:81","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23870:16:81","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":49653,"nodeType":"Block","src":"23956:168:81","statements":[{"assignments":[49631],"declarations":[{"constant":false,"id":49631,"mutability":"mutable","name":"a","nameLocation":"23978:1:81","nodeType":"VariableDeclaration","scope":49653,"src":"23970:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49630,"name":"uint256","nodeType":"ElementaryTypeName","src":"23970:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49638,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49632,"name":"rupioIssued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49585,"src":"23983:11:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"33","id":49633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23997:1:81","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"23983:15:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":49635,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23982:17:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":49636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24002:1:81","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"23982:21:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23970:33:81"},{"assignments":[49640],"declarations":[{"constant":false,"id":49640,"mutability":"mutable","name":"c","nameLocation":"24025:1:81","nodeType":"VariableDeclaration","scope":49653,"src":"24017:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49639,"name":"uint256","nodeType":"ElementaryTypeName","src":"24017:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49644,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49641,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49576,"src":"24029:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":49642,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49631,"src":"24042:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24029:14:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24017:26:81"},{"assignments":[49646],"declarations":[{"constant":false,"id":49646,"mutability":"mutable","name":"d","nameLocation":"24066:1:81","nodeType":"VariableDeclaration","scope":49653,"src":"24058:9:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49645,"name":"uint256","nodeType":"ElementaryTypeName","src":"24058:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":49650,"initialValue":{"arguments":[{"id":49648,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49640,"src":"24089:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49647,"name":"_getAmountINRToETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49504,"src":"24070:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":49649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24070:21:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24058:33:81"},{"expression":{"id":49651,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49646,"src":"24112:1:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49574,"id":49652,"nodeType":"Return","src":"24105:8:81"}]},"id":49654,"nodeType":"IfStatement","src":"23866:258:81","trueBody":{"id":49629,"nodeType":"Block","src":"23888:62:81","statements":[{"expression":{"arguments":[{"id":49626,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49576,"src":"23928:10:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49625,"name":"_getAmountINRToETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49504,"src":"23909:18:81","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":49627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23909:30:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":49574,"id":49628,"nodeType":"Return","src":"23902:37:81"}]}}]},"documentation":{"id":49568,"nodeType":"StructuredDocumentation","src":"23084:228:81","text":" @notice Internal getter function.\n @param user Address of the user.\n @return uint256 Max amount of collateral that can be withdrawn by a user at current state in native decimals, in this case 1e18."},"implemented":true,"kind":"function","modifiers":[],"name":"_getMaxWithdrawableCollateral","nameLocation":"23326:29:81","parameters":{"id":49571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49570,"mutability":"mutable","name":"user","nameLocation":"23373:4:81","nodeType":"VariableDeclaration","scope":49656,"src":"23365:12:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49569,"name":"address","nodeType":"ElementaryTypeName","src":"23365:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23355:28:81"},"returnParameters":{"id":49574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49656,"src":"23407:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49572,"name":"uint256","nodeType":"ElementaryTypeName","src":"23407:7:81","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23406:9:81"},"scope":49677,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":49676,"nodeType":"FunctionDefinition","src":"24298:129:81","nodes":[],"body":{"id":49675,"nodeType":"Block","src":"24371:56:81","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":49670,"name":"_addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49659,"src":"24412:5:81","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24404:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":49668,"name":"uint160","nodeType":"ElementaryTypeName","src":"24404:7:81","typeDescriptions":{}}},"id":49671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24404:14:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":49667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24396:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":49666,"name":"uint256","nodeType":"ElementaryTypeName","src":"24396:7:81","typeDescriptions":{}}},"id":49672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24396:23:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":49665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24388:7:81","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":49664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"24388:7:81","typeDescriptions":{}}},"id":49673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24388:32:81","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":49663,"id":49674,"nodeType":"Return","src":"24381:39:81"}]},"documentation":{"id":49657,"nodeType":"StructuredDocumentation","src":"24136:157:81","text":" @dev Converts an address to bytes32.\n @param _addr The address to convert.\n @return The bytes32 representation of the address."},"implemented":true,"kind":"function","modifiers":[],"name":"addressToBytes32","nameLocation":"24307:16:81","parameters":{"id":49660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49659,"mutability":"mutable","name":"_addr","nameLocation":"24332:5:81","nodeType":"VariableDeclaration","scope":49676,"src":"24324:13:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49658,"name":"address","nodeType":"ElementaryTypeName","src":"24324:7:81","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"24323:15:81"},"returnParameters":{"id":49663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49676,"src":"24362:7:81","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":49661,"name":"bytes32","nodeType":"ElementaryTypeName","src":"24362:7:81","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"24361:9:81"},"scope":49677,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":48261,"name":"ReentrancyGuard","nameLocations":["1428:15:81"],"nodeType":"IdentifierPath","referencedDeclaration":45544,"src":"1428:15:81"},"id":48262,"nodeType":"InheritanceSpecifier","src":"1428:15:81"},{"baseName":{"id":48263,"name":"AutomationCompatibleInterface","nameLocations":["1445:29:81"],"nodeType":"IdentifierPath","referencedDeclaration":67,"src":"1445:29:81"},"id":48264,"nodeType":"InheritanceSpecifier","src":"1445:29:81"}],"canonicalName":"CollateralSafekeep","contractDependencies":[],"contractKind":"contract","documentation":{"id":48260,"nodeType":"StructuredDocumentation","src":"688:708:81","text":" @title CollateralSafekeep.\n @author Jaskaran Singh.\n @notice An algorithmic stablecoin just like DAI, but pegged to INR.\n @notice This contract integrates with chainlink pricefeeds and automation, to fetch INR conversion\n rates and to automate the process of checking the vault health for all users.\n @notice This contract is integrated with RupioDao access manager to manage access.\n @notice This contract is integrated with Rupio token contract to mint and burn tokens.\n @notice This contract is integrated with RupioDao price feed to fetch INR conversion rates.\n @dev This contract works in RupioDao core, integrating with RupioDao price feed, access manager and token contract."},"fullyImplemented":true,"linearizedBaseContracts":[49677,67,45544],"name":"CollateralSafekeep","nameLocation":"1406:18:81","scope":49678,"usedErrors":[45489,45590,48378,48380,48382,49711],"usedEvents":[48326]}],"license":"MIT"}},"src/Libraries/OptionsBuilder.sol":{"id":82,"ast":{}},"src/PriceFeed.sol":{"id":83,"ast":{}},"src/Rupio.sol":{"id":84,"ast":{}},"src/RupioSavingsContract.sol":{"id":85,"ast":{}},"src/libraries/OracleLib.sol":{"id":86,"ast":{}},"src/priceFeed.sol":{"id":87,"ast":{}}}},"solcLongVersion":"0.8.26","solcVersion":"0.8.26"}